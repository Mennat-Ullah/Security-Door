
MicroLabProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006a  00800100  000035bc  00003650  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000035bc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  0080016a  0080016a  000036ba  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000036bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00003d88  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  00003e0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000002f6  00000000  00000000  00003f8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002f14  00000000  00000000  00004283  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000117d  00000000  00000000  00007197  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002236  00000000  00000000  00008314  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000250  00000000  00000000  0000a54c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000053a  00000000  00000000  0000a79c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000c25  00000000  00000000  0000acd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 0000060e  00000000  00000000  0000b8fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000100  00000000  00000000  0000bf09  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 55 14 	jmp	0x28aa	; 0x28aa <__vector_13>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ec eb       	ldi	r30, 0xBC	; 188
      7c:	f5 e3       	ldi	r31, 0x35	; 53
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	aa 36       	cpi	r26, 0x6A	; 106
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	aa e6       	ldi	r26, 0x6A	; 106
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	af 36       	cpi	r26, 0x6F	; 111
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <main>
      9e:	0c 94 dc 1a 	jmp	0x35b8	; 0x35b8 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <lcd_init_4d>:
void lcd_write_string_4d(uint8_t *);
void lcd_init_4d(void);


void lcd_init_4d(void)
{
      a6:	0f 93       	push	r16
      a8:	1f 93       	push	r17
      aa:	df 93       	push	r29
      ac:	cf 93       	push	r28
      ae:	cd b7       	in	r28, 0x3d	; 61
      b0:	de b7       	in	r29, 0x3e	; 62
      b2:	c2 5d       	subi	r28, 0xD2	; 210
      b4:	d0 40       	sbci	r29, 0x00	; 0
      b6:	0f b6       	in	r0, 0x3f	; 63
      b8:	f8 94       	cli
      ba:	de bf       	out	0x3e, r29	; 62
      bc:	0f be       	out	0x3f, r0	; 63
      be:	cd bf       	out	0x3d, r28	; 61
	// configure the microprocessor pins for the data lines
	lcd_D7_ddr |= (1<<lcd_D7_bit);                  // 4 data lines - output
      c0:	87 e2       	ldi	r24, 0x27	; 39
      c2:	90 e0       	ldi	r25, 0x00	; 0
      c4:	27 e2       	ldi	r18, 0x27	; 39
      c6:	30 e0       	ldi	r19, 0x00	; 0
      c8:	f9 01       	movw	r30, r18
      ca:	20 81       	ld	r18, Z
      cc:	21 60       	ori	r18, 0x01	; 1
      ce:	fc 01       	movw	r30, r24
      d0:	20 83       	st	Z, r18
	lcd_D6_ddr |= (1<<lcd_D6_bit);
      d2:	87 e2       	ldi	r24, 0x27	; 39
      d4:	90 e0       	ldi	r25, 0x00	; 0
      d6:	27 e2       	ldi	r18, 0x27	; 39
      d8:	30 e0       	ldi	r19, 0x00	; 0
      da:	f9 01       	movw	r30, r18
      dc:	20 81       	ld	r18, Z
      de:	22 60       	ori	r18, 0x02	; 2
      e0:	fc 01       	movw	r30, r24
      e2:	20 83       	st	Z, r18
	lcd_D5_ddr |= (1<<lcd_D5_bit);
      e4:	87 e2       	ldi	r24, 0x27	; 39
      e6:	90 e0       	ldi	r25, 0x00	; 0
      e8:	27 e2       	ldi	r18, 0x27	; 39
      ea:	30 e0       	ldi	r19, 0x00	; 0
      ec:	f9 01       	movw	r30, r18
      ee:	20 81       	ld	r18, Z
      f0:	24 60       	ori	r18, 0x04	; 4
      f2:	fc 01       	movw	r30, r24
      f4:	20 83       	st	Z, r18
	lcd_D4_ddr |= (1<<lcd_D4_bit);
      f6:	87 e2       	ldi	r24, 0x27	; 39
      f8:	90 e0       	ldi	r25, 0x00	; 0
      fa:	27 e2       	ldi	r18, 0x27	; 39
      fc:	30 e0       	ldi	r19, 0x00	; 0
      fe:	f9 01       	movw	r30, r18
     100:	20 81       	ld	r18, Z
     102:	28 60       	ori	r18, 0x08	; 8
     104:	fc 01       	movw	r30, r24
     106:	20 83       	st	Z, r18
	// configure the microprocessor pins for the control lines
	lcd_E_ddr |= (1<<lcd_E_bit);                    // E line - output
     108:	87 e2       	ldi	r24, 0x27	; 39
     10a:	90 e0       	ldi	r25, 0x00	; 0
     10c:	27 e2       	ldi	r18, 0x27	; 39
     10e:	30 e0       	ldi	r19, 0x00	; 0
     110:	f9 01       	movw	r30, r18
     112:	20 81       	ld	r18, Z
     114:	20 61       	ori	r18, 0x10	; 16
     116:	fc 01       	movw	r30, r24
     118:	20 83       	st	Z, r18
	lcd_RS_ddr |= (1<<lcd_RS_bit);                  // RS line - output
     11a:	87 e2       	ldi	r24, 0x27	; 39
     11c:	90 e0       	ldi	r25, 0x00	; 0
     11e:	27 e2       	ldi	r18, 0x27	; 39
     120:	30 e0       	ldi	r19, 0x00	; 0
     122:	f9 01       	movw	r30, r18
     124:	20 81       	ld	r18, Z
     126:	20 62       	ori	r18, 0x20	; 32
     128:	fc 01       	movw	r30, r24
     12a:	20 83       	st	Z, r18
     12c:	80 e0       	ldi	r24, 0x00	; 0
     12e:	90 e0       	ldi	r25, 0x00	; 0
     130:	a8 ec       	ldi	r26, 0xC8	; 200
     132:	b2 e4       	ldi	r27, 0x42	; 66
     134:	89 83       	std	Y+1, r24	; 0x01
     136:	9a 83       	std	Y+2, r25	; 0x02
     138:	ab 83       	std	Y+3, r26	; 0x03
     13a:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     13c:	69 81       	ldd	r22, Y+1	; 0x01
     13e:	7a 81       	ldd	r23, Y+2	; 0x02
     140:	8b 81       	ldd	r24, Y+3	; 0x03
     142:	9c 81       	ldd	r25, Y+4	; 0x04
     144:	20 e0       	ldi	r18, 0x00	; 0
     146:	30 e0       	ldi	r19, 0x00	; 0
     148:	4a e7       	ldi	r20, 0x7A	; 122
     14a:	55 e4       	ldi	r21, 0x45	; 69
     14c:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <__mulsf3>
     150:	dc 01       	movw	r26, r24
     152:	cb 01       	movw	r24, r22
     154:	8d 83       	std	Y+5, r24	; 0x05
     156:	9e 83       	std	Y+6, r25	; 0x06
     158:	af 83       	std	Y+7, r26	; 0x07
     15a:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     15c:	11 e0       	ldi	r17, 0x01	; 1
     15e:	6d 81       	ldd	r22, Y+5	; 0x05
     160:	7e 81       	ldd	r23, Y+6	; 0x06
     162:	8f 81       	ldd	r24, Y+7	; 0x07
     164:	98 85       	ldd	r25, Y+8	; 0x08
     166:	20 e0       	ldi	r18, 0x00	; 0
     168:	30 e0       	ldi	r19, 0x00	; 0
     16a:	40 e8       	ldi	r20, 0x80	; 128
     16c:	5f e3       	ldi	r21, 0x3F	; 63
     16e:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <__ltsf2>
     172:	88 23       	and	r24, r24
     174:	0c f0       	brlt	.+2      	; 0x178 <lcd_init_4d+0xd2>
     176:	10 e0       	ldi	r17, 0x00	; 0
     178:	11 23       	and	r17, r17
     17a:	29 f0       	breq	.+10     	; 0x186 <lcd_init_4d+0xe0>
		__ticks = 1;
     17c:	81 e0       	ldi	r24, 0x01	; 1
     17e:	90 e0       	ldi	r25, 0x00	; 0
     180:	9a 87       	std	Y+10, r25	; 0x0a
     182:	89 87       	std	Y+9, r24	; 0x09
     184:	46 c0       	rjmp	.+140    	; 0x212 <lcd_init_4d+0x16c>
	else if (__tmp > 65535)
     186:	11 e0       	ldi	r17, 0x01	; 1
     188:	6d 81       	ldd	r22, Y+5	; 0x05
     18a:	7e 81       	ldd	r23, Y+6	; 0x06
     18c:	8f 81       	ldd	r24, Y+7	; 0x07
     18e:	98 85       	ldd	r25, Y+8	; 0x08
     190:	20 e0       	ldi	r18, 0x00	; 0
     192:	3f ef       	ldi	r19, 0xFF	; 255
     194:	4f e7       	ldi	r20, 0x7F	; 127
     196:	57 e4       	ldi	r21, 0x47	; 71
     198:	0e 94 0c 18 	call	0x3018	; 0x3018 <__gtsf2>
     19c:	18 16       	cp	r1, r24
     19e:	0c f0       	brlt	.+2      	; 0x1a2 <lcd_init_4d+0xfc>
     1a0:	10 e0       	ldi	r17, 0x00	; 0
     1a2:	11 23       	and	r17, r17
     1a4:	61 f1       	breq	.+88     	; 0x1fe <lcd_init_4d+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     1a6:	69 81       	ldd	r22, Y+1	; 0x01
     1a8:	7a 81       	ldd	r23, Y+2	; 0x02
     1aa:	8b 81       	ldd	r24, Y+3	; 0x03
     1ac:	9c 81       	ldd	r25, Y+4	; 0x04
     1ae:	20 e0       	ldi	r18, 0x00	; 0
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e2       	ldi	r20, 0x20	; 32
     1b4:	51 e4       	ldi	r21, 0x41	; 65
     1b6:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <__mulsf3>
     1ba:	dc 01       	movw	r26, r24
     1bc:	cb 01       	movw	r24, r22
     1be:	bc 01       	movw	r22, r24
     1c0:	cd 01       	movw	r24, r26
     1c2:	0e 94 90 14 	call	0x2920	; 0x2920 <__fixunssfsi>
     1c6:	dc 01       	movw	r26, r24
     1c8:	cb 01       	movw	r24, r22
     1ca:	9a 87       	std	Y+10, r25	; 0x0a
     1cc:	89 87       	std	Y+9, r24	; 0x09
     1ce:	12 c0       	rjmp	.+36     	; 0x1f4 <lcd_init_4d+0x14e>
     1d0:	80 e9       	ldi	r24, 0x90	; 144
     1d2:	91 e0       	ldi	r25, 0x01	; 1
     1d4:	9c 87       	std	Y+12, r25	; 0x0c
     1d6:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     1d8:	8b 85       	ldd	r24, Y+11	; 0x0b
     1da:	9c 85       	ldd	r25, Y+12	; 0x0c
     1dc:	8c 01       	movw	r16, r24
     1de:	c8 01       	movw	r24, r16
     1e0:	01 97       	sbiw	r24, 0x01	; 1
     1e2:	f1 f7       	brne	.-4      	; 0x1e0 <lcd_init_4d+0x13a>
     1e4:	8c 01       	movw	r16, r24
     1e6:	1c 87       	std	Y+12, r17	; 0x0c
     1e8:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     1ea:	89 85       	ldd	r24, Y+9	; 0x09
     1ec:	9a 85       	ldd	r25, Y+10	; 0x0a
     1ee:	01 97       	sbiw	r24, 0x01	; 1
     1f0:	9a 87       	std	Y+10, r25	; 0x0a
     1f2:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     1f4:	89 85       	ldd	r24, Y+9	; 0x09
     1f6:	9a 85       	ldd	r25, Y+10	; 0x0a
     1f8:	00 97       	sbiw	r24, 0x00	; 0
     1fa:	51 f7       	brne	.-44     	; 0x1d0 <lcd_init_4d+0x12a>
     1fc:	17 c0       	rjmp	.+46     	; 0x22c <lcd_init_4d+0x186>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     1fe:	6d 81       	ldd	r22, Y+5	; 0x05
     200:	7e 81       	ldd	r23, Y+6	; 0x06
     202:	8f 81       	ldd	r24, Y+7	; 0x07
     204:	98 85       	ldd	r25, Y+8	; 0x08
     206:	0e 94 90 14 	call	0x2920	; 0x2920 <__fixunssfsi>
     20a:	dc 01       	movw	r26, r24
     20c:	cb 01       	movw	r24, r22
     20e:	9a 87       	std	Y+10, r25	; 0x0a
     210:	89 87       	std	Y+9, r24	; 0x09
     212:	89 85       	ldd	r24, Y+9	; 0x09
     214:	9a 85       	ldd	r25, Y+10	; 0x0a
     216:	9e 87       	std	Y+14, r25	; 0x0e
     218:	8d 87       	std	Y+13, r24	; 0x0d
     21a:	8d 85       	ldd	r24, Y+13	; 0x0d
     21c:	9e 85       	ldd	r25, Y+14	; 0x0e
     21e:	8c 01       	movw	r16, r24
     220:	f8 01       	movw	r30, r16
     222:	31 97       	sbiw	r30, 0x01	; 1
     224:	f1 f7       	brne	.-4      	; 0x222 <lcd_init_4d+0x17c>
     226:	8f 01       	movw	r16, r30
     228:	1e 87       	std	Y+14, r17	; 0x0e
     22a:	0d 87       	std	Y+13, r16	; 0x0d
	
    _delay_ms(100);                                 // initial 40 mSec delay

    lcd_RS_port &= ~(1<<lcd_RS_bit);                // select the Instruction Register (RS low)
     22c:	88 e2       	ldi	r24, 0x28	; 40
     22e:	90 e0       	ldi	r25, 0x00	; 0
     230:	28 e2       	ldi	r18, 0x28	; 40
     232:	30 e0       	ldi	r19, 0x00	; 0
     234:	f9 01       	movw	r30, r18
     236:	20 81       	ld	r18, Z
     238:	2f 7d       	andi	r18, 0xDF	; 223
     23a:	fc 01       	movw	r30, r24
     23c:	20 83       	st	Z, r18
    lcd_E_port &= ~(1<<lcd_E_bit);                  // make sure E is initially low
     23e:	88 e2       	ldi	r24, 0x28	; 40
     240:	90 e0       	ldi	r25, 0x00	; 0
     242:	28 e2       	ldi	r18, 0x28	; 40
     244:	30 e0       	ldi	r19, 0x00	; 0
     246:	f9 01       	movw	r30, r18
     248:	20 81       	ld	r18, Z
     24a:	2f 7e       	andi	r18, 0xEF	; 239
     24c:	fc 01       	movw	r30, r24
     24e:	20 83       	st	Z, r18

// Reset the LCD controller
    lcd_write_4(lcd_FunctionReset);                 // first part of reset sequence
     250:	80 e3       	ldi	r24, 0x30	; 48
     252:	0e 94 c1 0c 	call	0x1982	; 0x1982 <lcd_write_4>
     256:	80 e0       	ldi	r24, 0x00	; 0
     258:	90 e0       	ldi	r25, 0x00	; 0
     25a:	a0 e2       	ldi	r26, 0x20	; 32
     25c:	b1 e4       	ldi	r27, 0x41	; 65
     25e:	8f 87       	std	Y+15, r24	; 0x0f
     260:	98 8b       	std	Y+16, r25	; 0x10
     262:	a9 8b       	std	Y+17, r26	; 0x11
     264:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     266:	6f 85       	ldd	r22, Y+15	; 0x0f
     268:	78 89       	ldd	r23, Y+16	; 0x10
     26a:	89 89       	ldd	r24, Y+17	; 0x11
     26c:	9a 89       	ldd	r25, Y+18	; 0x12
     26e:	20 e0       	ldi	r18, 0x00	; 0
     270:	30 e0       	ldi	r19, 0x00	; 0
     272:	4a e7       	ldi	r20, 0x7A	; 122
     274:	55 e4       	ldi	r21, 0x45	; 69
     276:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <__mulsf3>
     27a:	dc 01       	movw	r26, r24
     27c:	cb 01       	movw	r24, r22
     27e:	8b 8b       	std	Y+19, r24	; 0x13
     280:	9c 8b       	std	Y+20, r25	; 0x14
     282:	ad 8b       	std	Y+21, r26	; 0x15
     284:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     286:	11 e0       	ldi	r17, 0x01	; 1
     288:	6b 89       	ldd	r22, Y+19	; 0x13
     28a:	7c 89       	ldd	r23, Y+20	; 0x14
     28c:	8d 89       	ldd	r24, Y+21	; 0x15
     28e:	9e 89       	ldd	r25, Y+22	; 0x16
     290:	20 e0       	ldi	r18, 0x00	; 0
     292:	30 e0       	ldi	r19, 0x00	; 0
     294:	40 e8       	ldi	r20, 0x80	; 128
     296:	5f e3       	ldi	r21, 0x3F	; 63
     298:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <__ltsf2>
     29c:	88 23       	and	r24, r24
     29e:	0c f0       	brlt	.+2      	; 0x2a2 <lcd_init_4d+0x1fc>
     2a0:	10 e0       	ldi	r17, 0x00	; 0
     2a2:	11 23       	and	r17, r17
     2a4:	29 f0       	breq	.+10     	; 0x2b0 <lcd_init_4d+0x20a>
		__ticks = 1;
     2a6:	81 e0       	ldi	r24, 0x01	; 1
     2a8:	90 e0       	ldi	r25, 0x00	; 0
     2aa:	98 8f       	std	Y+24, r25	; 0x18
     2ac:	8f 8b       	std	Y+23, r24	; 0x17
     2ae:	46 c0       	rjmp	.+140    	; 0x33c <lcd_init_4d+0x296>
	else if (__tmp > 65535)
     2b0:	11 e0       	ldi	r17, 0x01	; 1
     2b2:	6b 89       	ldd	r22, Y+19	; 0x13
     2b4:	7c 89       	ldd	r23, Y+20	; 0x14
     2b6:	8d 89       	ldd	r24, Y+21	; 0x15
     2b8:	9e 89       	ldd	r25, Y+22	; 0x16
     2ba:	20 e0       	ldi	r18, 0x00	; 0
     2bc:	3f ef       	ldi	r19, 0xFF	; 255
     2be:	4f e7       	ldi	r20, 0x7F	; 127
     2c0:	57 e4       	ldi	r21, 0x47	; 71
     2c2:	0e 94 0c 18 	call	0x3018	; 0x3018 <__gtsf2>
     2c6:	18 16       	cp	r1, r24
     2c8:	0c f0       	brlt	.+2      	; 0x2cc <lcd_init_4d+0x226>
     2ca:	10 e0       	ldi	r17, 0x00	; 0
     2cc:	11 23       	and	r17, r17
     2ce:	61 f1       	breq	.+88     	; 0x328 <lcd_init_4d+0x282>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     2d0:	6f 85       	ldd	r22, Y+15	; 0x0f
     2d2:	78 89       	ldd	r23, Y+16	; 0x10
     2d4:	89 89       	ldd	r24, Y+17	; 0x11
     2d6:	9a 89       	ldd	r25, Y+18	; 0x12
     2d8:	20 e0       	ldi	r18, 0x00	; 0
     2da:	30 e0       	ldi	r19, 0x00	; 0
     2dc:	40 e2       	ldi	r20, 0x20	; 32
     2de:	51 e4       	ldi	r21, 0x41	; 65
     2e0:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <__mulsf3>
     2e4:	dc 01       	movw	r26, r24
     2e6:	cb 01       	movw	r24, r22
     2e8:	bc 01       	movw	r22, r24
     2ea:	cd 01       	movw	r24, r26
     2ec:	0e 94 90 14 	call	0x2920	; 0x2920 <__fixunssfsi>
     2f0:	dc 01       	movw	r26, r24
     2f2:	cb 01       	movw	r24, r22
     2f4:	98 8f       	std	Y+24, r25	; 0x18
     2f6:	8f 8b       	std	Y+23, r24	; 0x17
     2f8:	12 c0       	rjmp	.+36     	; 0x31e <lcd_init_4d+0x278>
     2fa:	80 e9       	ldi	r24, 0x90	; 144
     2fc:	91 e0       	ldi	r25, 0x01	; 1
     2fe:	9a 8f       	std	Y+26, r25	; 0x1a
     300:	89 8f       	std	Y+25, r24	; 0x19
     302:	89 8d       	ldd	r24, Y+25	; 0x19
     304:	9a 8d       	ldd	r25, Y+26	; 0x1a
     306:	8c 01       	movw	r16, r24
     308:	c8 01       	movw	r24, r16
     30a:	01 97       	sbiw	r24, 0x01	; 1
     30c:	f1 f7       	brne	.-4      	; 0x30a <lcd_init_4d+0x264>
     30e:	8c 01       	movw	r16, r24
     310:	1a 8f       	std	Y+26, r17	; 0x1a
     312:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     314:	8f 89       	ldd	r24, Y+23	; 0x17
     316:	98 8d       	ldd	r25, Y+24	; 0x18
     318:	01 97       	sbiw	r24, 0x01	; 1
     31a:	98 8f       	std	Y+24, r25	; 0x18
     31c:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     31e:	8f 89       	ldd	r24, Y+23	; 0x17
     320:	98 8d       	ldd	r25, Y+24	; 0x18
     322:	00 97       	sbiw	r24, 0x00	; 0
     324:	51 f7       	brne	.-44     	; 0x2fa <lcd_init_4d+0x254>
     326:	17 c0       	rjmp	.+46     	; 0x356 <lcd_init_4d+0x2b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     328:	6b 89       	ldd	r22, Y+19	; 0x13
     32a:	7c 89       	ldd	r23, Y+20	; 0x14
     32c:	8d 89       	ldd	r24, Y+21	; 0x15
     32e:	9e 89       	ldd	r25, Y+22	; 0x16
     330:	0e 94 90 14 	call	0x2920	; 0x2920 <__fixunssfsi>
     334:	dc 01       	movw	r26, r24
     336:	cb 01       	movw	r24, r22
     338:	98 8f       	std	Y+24, r25	; 0x18
     33a:	8f 8b       	std	Y+23, r24	; 0x17
     33c:	8f 89       	ldd	r24, Y+23	; 0x17
     33e:	98 8d       	ldd	r25, Y+24	; 0x18
     340:	9c 8f       	std	Y+28, r25	; 0x1c
     342:	8b 8f       	std	Y+27, r24	; 0x1b
     344:	8b 8d       	ldd	r24, Y+27	; 0x1b
     346:	9c 8d       	ldd	r25, Y+28	; 0x1c
     348:	8c 01       	movw	r16, r24
     34a:	f8 01       	movw	r30, r16
     34c:	31 97       	sbiw	r30, 0x01	; 1
     34e:	f1 f7       	brne	.-4      	; 0x34c <lcd_init_4d+0x2a6>
     350:	8f 01       	movw	r16, r30
     352:	1c 8f       	std	Y+28, r17	; 0x1c
     354:	0b 8f       	std	Y+27, r16	; 0x1b
    _delay_ms(10);                                  // 4.1 mS delay (min)

    lcd_write_4(lcd_FunctionReset);                 // second part of reset sequence
     356:	80 e3       	ldi	r24, 0x30	; 48
     358:	0e 94 c1 0c 	call	0x1982	; 0x1982 <lcd_write_4>
     35c:	80 e0       	ldi	r24, 0x00	; 0
     35e:	90 e0       	ldi	r25, 0x00	; 0
     360:	a8 e4       	ldi	r26, 0x48	; 72
     362:	b3 e4       	ldi	r27, 0x43	; 67
     364:	8d 8f       	std	Y+29, r24	; 0x1d
     366:	9e 8f       	std	Y+30, r25	; 0x1e
     368:	af 8f       	std	Y+31, r26	; 0x1f
     36a:	b8 a3       	std	Y+32, r27	; 0x20
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
     36c:	6d 8d       	ldd	r22, Y+29	; 0x1d
     36e:	7e 8d       	ldd	r23, Y+30	; 0x1e
     370:	8f 8d       	ldd	r24, Y+31	; 0x1f
     372:	98 a1       	ldd	r25, Y+32	; 0x20
     374:	2b ea       	ldi	r18, 0xAB	; 171
     376:	3a ea       	ldi	r19, 0xAA	; 170
     378:	4a ea       	ldi	r20, 0xAA	; 170
     37a:	50 e4       	ldi	r21, 0x40	; 64
     37c:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <__mulsf3>
     380:	dc 01       	movw	r26, r24
     382:	cb 01       	movw	r24, r22
     384:	89 a3       	std	Y+33, r24	; 0x21
     386:	9a a3       	std	Y+34, r25	; 0x22
     388:	ab a3       	std	Y+35, r26	; 0x23
     38a:	bc a3       	std	Y+36, r27	; 0x24
	if (__tmp < 1.0)
     38c:	11 e0       	ldi	r17, 0x01	; 1
     38e:	69 a1       	ldd	r22, Y+33	; 0x21
     390:	7a a1       	ldd	r23, Y+34	; 0x22
     392:	8b a1       	ldd	r24, Y+35	; 0x23
     394:	9c a1       	ldd	r25, Y+36	; 0x24
     396:	20 e0       	ldi	r18, 0x00	; 0
     398:	30 e0       	ldi	r19, 0x00	; 0
     39a:	40 e8       	ldi	r20, 0x80	; 128
     39c:	5f e3       	ldi	r21, 0x3F	; 63
     39e:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <__ltsf2>
     3a2:	88 23       	and	r24, r24
     3a4:	0c f0       	brlt	.+2      	; 0x3a8 <lcd_init_4d+0x302>
     3a6:	10 e0       	ldi	r17, 0x00	; 0
     3a8:	11 23       	and	r17, r17
     3aa:	19 f0       	breq	.+6      	; 0x3b2 <lcd_init_4d+0x30c>
		__ticks = 1;
     3ac:	81 e0       	ldi	r24, 0x01	; 1
     3ae:	8d a3       	std	Y+37, r24	; 0x25
     3b0:	a3 c0       	rjmp	.+326    	; 0x4f8 <lcd_init_4d+0x452>
	else if (__tmp > 255)
     3b2:	11 e0       	ldi	r17, 0x01	; 1
     3b4:	69 a1       	ldd	r22, Y+33	; 0x21
     3b6:	7a a1       	ldd	r23, Y+34	; 0x22
     3b8:	8b a1       	ldd	r24, Y+35	; 0x23
     3ba:	9c a1       	ldd	r25, Y+36	; 0x24
     3bc:	20 e0       	ldi	r18, 0x00	; 0
     3be:	30 e0       	ldi	r19, 0x00	; 0
     3c0:	4f e7       	ldi	r20, 0x7F	; 127
     3c2:	53 e4       	ldi	r21, 0x43	; 67
     3c4:	0e 94 0c 18 	call	0x3018	; 0x3018 <__gtsf2>
     3c8:	18 16       	cp	r1, r24
     3ca:	0c f0       	brlt	.+2      	; 0x3ce <lcd_init_4d+0x328>
     3cc:	10 e0       	ldi	r17, 0x00	; 0
     3ce:	11 23       	and	r17, r17
     3d0:	09 f4       	brne	.+2      	; 0x3d4 <lcd_init_4d+0x32e>
     3d2:	89 c0       	rjmp	.+274    	; 0x4e6 <lcd_init_4d+0x440>
	{
		_delay_ms(__us / 1000.0);
     3d4:	6d 8d       	ldd	r22, Y+29	; 0x1d
     3d6:	7e 8d       	ldd	r23, Y+30	; 0x1e
     3d8:	8f 8d       	ldd	r24, Y+31	; 0x1f
     3da:	98 a1       	ldd	r25, Y+32	; 0x20
     3dc:	20 e0       	ldi	r18, 0x00	; 0
     3de:	30 e0       	ldi	r19, 0x00	; 0
     3e0:	4a e7       	ldi	r20, 0x7A	; 122
     3e2:	54 e4       	ldi	r21, 0x44	; 68
     3e4:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <__divsf3>
     3e8:	dc 01       	movw	r26, r24
     3ea:	cb 01       	movw	r24, r22
     3ec:	8e a3       	std	Y+38, r24	; 0x26
     3ee:	9f a3       	std	Y+39, r25	; 0x27
     3f0:	a8 a7       	std	Y+40, r26	; 0x28
     3f2:	b9 a7       	std	Y+41, r27	; 0x29
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     3f4:	6e a1       	ldd	r22, Y+38	; 0x26
     3f6:	7f a1       	ldd	r23, Y+39	; 0x27
     3f8:	88 a5       	ldd	r24, Y+40	; 0x28
     3fa:	99 a5       	ldd	r25, Y+41	; 0x29
     3fc:	20 e0       	ldi	r18, 0x00	; 0
     3fe:	30 e0       	ldi	r19, 0x00	; 0
     400:	4a e7       	ldi	r20, 0x7A	; 122
     402:	55 e4       	ldi	r21, 0x45	; 69
     404:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <__mulsf3>
     408:	dc 01       	movw	r26, r24
     40a:	cb 01       	movw	r24, r22
     40c:	8a a7       	std	Y+42, r24	; 0x2a
     40e:	9b a7       	std	Y+43, r25	; 0x2b
     410:	ac a7       	std	Y+44, r26	; 0x2c
     412:	bd a7       	std	Y+45, r27	; 0x2d
	if (__tmp < 1.0)
     414:	11 e0       	ldi	r17, 0x01	; 1
     416:	6a a5       	ldd	r22, Y+42	; 0x2a
     418:	7b a5       	ldd	r23, Y+43	; 0x2b
     41a:	8c a5       	ldd	r24, Y+44	; 0x2c
     41c:	9d a5       	ldd	r25, Y+45	; 0x2d
     41e:	20 e0       	ldi	r18, 0x00	; 0
     420:	30 e0       	ldi	r19, 0x00	; 0
     422:	40 e8       	ldi	r20, 0x80	; 128
     424:	5f e3       	ldi	r21, 0x3F	; 63
     426:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <__ltsf2>
     42a:	88 23       	and	r24, r24
     42c:	0c f0       	brlt	.+2      	; 0x430 <lcd_init_4d+0x38a>
     42e:	10 e0       	ldi	r17, 0x00	; 0
     430:	11 23       	and	r17, r17
     432:	29 f0       	breq	.+10     	; 0x43e <lcd_init_4d+0x398>
		__ticks = 1;
     434:	81 e0       	ldi	r24, 0x01	; 1
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	9f a7       	std	Y+47, r25	; 0x2f
     43a:	8e a7       	std	Y+46, r24	; 0x2e
     43c:	46 c0       	rjmp	.+140    	; 0x4ca <lcd_init_4d+0x424>
	else if (__tmp > 65535)
     43e:	11 e0       	ldi	r17, 0x01	; 1
     440:	6a a5       	ldd	r22, Y+42	; 0x2a
     442:	7b a5       	ldd	r23, Y+43	; 0x2b
     444:	8c a5       	ldd	r24, Y+44	; 0x2c
     446:	9d a5       	ldd	r25, Y+45	; 0x2d
     448:	20 e0       	ldi	r18, 0x00	; 0
     44a:	3f ef       	ldi	r19, 0xFF	; 255
     44c:	4f e7       	ldi	r20, 0x7F	; 127
     44e:	57 e4       	ldi	r21, 0x47	; 71
     450:	0e 94 0c 18 	call	0x3018	; 0x3018 <__gtsf2>
     454:	18 16       	cp	r1, r24
     456:	0c f0       	brlt	.+2      	; 0x45a <lcd_init_4d+0x3b4>
     458:	10 e0       	ldi	r17, 0x00	; 0
     45a:	11 23       	and	r17, r17
     45c:	61 f1       	breq	.+88     	; 0x4b6 <lcd_init_4d+0x410>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     45e:	6e a1       	ldd	r22, Y+38	; 0x26
     460:	7f a1       	ldd	r23, Y+39	; 0x27
     462:	88 a5       	ldd	r24, Y+40	; 0x28
     464:	99 a5       	ldd	r25, Y+41	; 0x29
     466:	20 e0       	ldi	r18, 0x00	; 0
     468:	30 e0       	ldi	r19, 0x00	; 0
     46a:	40 e2       	ldi	r20, 0x20	; 32
     46c:	51 e4       	ldi	r21, 0x41	; 65
     46e:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <__mulsf3>
     472:	dc 01       	movw	r26, r24
     474:	cb 01       	movw	r24, r22
     476:	bc 01       	movw	r22, r24
     478:	cd 01       	movw	r24, r26
     47a:	0e 94 90 14 	call	0x2920	; 0x2920 <__fixunssfsi>
     47e:	dc 01       	movw	r26, r24
     480:	cb 01       	movw	r24, r22
     482:	9f a7       	std	Y+47, r25	; 0x2f
     484:	8e a7       	std	Y+46, r24	; 0x2e
     486:	12 c0       	rjmp	.+36     	; 0x4ac <lcd_init_4d+0x406>
     488:	80 e9       	ldi	r24, 0x90	; 144
     48a:	91 e0       	ldi	r25, 0x01	; 1
     48c:	99 ab       	std	Y+49, r25	; 0x31
     48e:	88 ab       	std	Y+48, r24	; 0x30
     490:	88 a9       	ldd	r24, Y+48	; 0x30
     492:	99 a9       	ldd	r25, Y+49	; 0x31
     494:	8c 01       	movw	r16, r24
     496:	c8 01       	movw	r24, r16
     498:	01 97       	sbiw	r24, 0x01	; 1
     49a:	f1 f7       	brne	.-4      	; 0x498 <lcd_init_4d+0x3f2>
     49c:	8c 01       	movw	r16, r24
     49e:	19 ab       	std	Y+49, r17	; 0x31
     4a0:	08 ab       	std	Y+48, r16	; 0x30
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4a2:	8e a5       	ldd	r24, Y+46	; 0x2e
     4a4:	9f a5       	ldd	r25, Y+47	; 0x2f
     4a6:	01 97       	sbiw	r24, 0x01	; 1
     4a8:	9f a7       	std	Y+47, r25	; 0x2f
     4aa:	8e a7       	std	Y+46, r24	; 0x2e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4ac:	8e a5       	ldd	r24, Y+46	; 0x2e
     4ae:	9f a5       	ldd	r25, Y+47	; 0x2f
     4b0:	00 97       	sbiw	r24, 0x00	; 0
     4b2:	51 f7       	brne	.-44     	; 0x488 <lcd_init_4d+0x3e2>
     4b4:	28 c0       	rjmp	.+80     	; 0x506 <lcd_init_4d+0x460>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     4b6:	6a a5       	ldd	r22, Y+42	; 0x2a
     4b8:	7b a5       	ldd	r23, Y+43	; 0x2b
     4ba:	8c a5       	ldd	r24, Y+44	; 0x2c
     4bc:	9d a5       	ldd	r25, Y+45	; 0x2d
     4be:	0e 94 90 14 	call	0x2920	; 0x2920 <__fixunssfsi>
     4c2:	dc 01       	movw	r26, r24
     4c4:	cb 01       	movw	r24, r22
     4c6:	9f a7       	std	Y+47, r25	; 0x2f
     4c8:	8e a7       	std	Y+46, r24	; 0x2e
     4ca:	8e a5       	ldd	r24, Y+46	; 0x2e
     4cc:	9f a5       	ldd	r25, Y+47	; 0x2f
     4ce:	9b ab       	std	Y+51, r25	; 0x33
     4d0:	8a ab       	std	Y+50, r24	; 0x32
     4d2:	8a a9       	ldd	r24, Y+50	; 0x32
     4d4:	9b a9       	ldd	r25, Y+51	; 0x33
     4d6:	8c 01       	movw	r16, r24
     4d8:	f8 01       	movw	r30, r16
     4da:	31 97       	sbiw	r30, 0x01	; 1
     4dc:	f1 f7       	brne	.-4      	; 0x4da <lcd_init_4d+0x434>
     4de:	8f 01       	movw	r16, r30
     4e0:	1b ab       	std	Y+51, r17	; 0x33
     4e2:	0a ab       	std	Y+50, r16	; 0x32
     4e4:	10 c0       	rjmp	.+32     	; 0x506 <lcd_init_4d+0x460>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     4e6:	69 a1       	ldd	r22, Y+33	; 0x21
     4e8:	7a a1       	ldd	r23, Y+34	; 0x22
     4ea:	8b a1       	ldd	r24, Y+35	; 0x23
     4ec:	9c a1       	ldd	r25, Y+36	; 0x24
     4ee:	0e 94 90 14 	call	0x2920	; 0x2920 <__fixunssfsi>
     4f2:	dc 01       	movw	r26, r24
     4f4:	cb 01       	movw	r24, r22
     4f6:	8d a3       	std	Y+37, r24	; 0x25
     4f8:	8d a1       	ldd	r24, Y+37	; 0x25
     4fa:	8c ab       	std	Y+52, r24	; 0x34
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     4fc:	8c a9       	ldd	r24, Y+52	; 0x34
     4fe:	18 2f       	mov	r17, r24
     500:	1a 95       	dec	r17
     502:	f1 f7       	brne	.-4      	; 0x500 <lcd_init_4d+0x45a>
     504:	1c ab       	std	Y+52, r17	; 0x34
    _delay_us(200);                                 // 100uS delay (min)

    lcd_write_4(lcd_FunctionReset);                 // third part of reset sequence
     506:	80 e3       	ldi	r24, 0x30	; 48
     508:	0e 94 c1 0c 	call	0x1982	; 0x1982 <lcd_write_4>
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a8 e4       	ldi	r26, 0x48	; 72
     512:	b3 e4       	ldi	r27, 0x43	; 67
     514:	8d ab       	std	Y+53, r24	; 0x35
     516:	9e ab       	std	Y+54, r25	; 0x36
     518:	af ab       	std	Y+55, r26	; 0x37
     51a:	b8 af       	std	Y+56, r27	; 0x38
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
     51c:	6d a9       	ldd	r22, Y+53	; 0x35
     51e:	7e a9       	ldd	r23, Y+54	; 0x36
     520:	8f a9       	ldd	r24, Y+55	; 0x37
     522:	98 ad       	ldd	r25, Y+56	; 0x38
     524:	2b ea       	ldi	r18, 0xAB	; 171
     526:	3a ea       	ldi	r19, 0xAA	; 170
     528:	4a ea       	ldi	r20, 0xAA	; 170
     52a:	50 e4       	ldi	r21, 0x40	; 64
     52c:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <__mulsf3>
     530:	dc 01       	movw	r26, r24
     532:	cb 01       	movw	r24, r22
     534:	89 af       	std	Y+57, r24	; 0x39
     536:	9a af       	std	Y+58, r25	; 0x3a
     538:	ab af       	std	Y+59, r26	; 0x3b
     53a:	bc af       	std	Y+60, r27	; 0x3c
	if (__tmp < 1.0)
     53c:	11 e0       	ldi	r17, 0x01	; 1
     53e:	69 ad       	ldd	r22, Y+57	; 0x39
     540:	7a ad       	ldd	r23, Y+58	; 0x3a
     542:	8b ad       	ldd	r24, Y+59	; 0x3b
     544:	9c ad       	ldd	r25, Y+60	; 0x3c
     546:	20 e0       	ldi	r18, 0x00	; 0
     548:	30 e0       	ldi	r19, 0x00	; 0
     54a:	40 e8       	ldi	r20, 0x80	; 128
     54c:	5f e3       	ldi	r21, 0x3F	; 63
     54e:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <__ltsf2>
     552:	88 23       	and	r24, r24
     554:	0c f0       	brlt	.+2      	; 0x558 <lcd_init_4d+0x4b2>
     556:	10 e0       	ldi	r17, 0x00	; 0
     558:	11 23       	and	r17, r17
     55a:	19 f0       	breq	.+6      	; 0x562 <lcd_init_4d+0x4bc>
		__ticks = 1;
     55c:	81 e0       	ldi	r24, 0x01	; 1
     55e:	8d af       	std	Y+61, r24	; 0x3d
     560:	f3 c0       	rjmp	.+486    	; 0x748 <lcd_init_4d+0x6a2>
	else if (__tmp > 255)
     562:	11 e0       	ldi	r17, 0x01	; 1
     564:	69 ad       	ldd	r22, Y+57	; 0x39
     566:	7a ad       	ldd	r23, Y+58	; 0x3a
     568:	8b ad       	ldd	r24, Y+59	; 0x3b
     56a:	9c ad       	ldd	r25, Y+60	; 0x3c
     56c:	20 e0       	ldi	r18, 0x00	; 0
     56e:	30 e0       	ldi	r19, 0x00	; 0
     570:	4f e7       	ldi	r20, 0x7F	; 127
     572:	53 e4       	ldi	r21, 0x43	; 67
     574:	0e 94 0c 18 	call	0x3018	; 0x3018 <__gtsf2>
     578:	18 16       	cp	r1, r24
     57a:	0c f0       	brlt	.+2      	; 0x57e <lcd_init_4d+0x4d8>
     57c:	10 e0       	ldi	r17, 0x00	; 0
     57e:	11 23       	and	r17, r17
     580:	09 f4       	brne	.+2      	; 0x584 <lcd_init_4d+0x4de>
     582:	d9 c0       	rjmp	.+434    	; 0x736 <lcd_init_4d+0x690>
	{
		_delay_ms(__us / 1000.0);
     584:	6d a9       	ldd	r22, Y+53	; 0x35
     586:	7e a9       	ldd	r23, Y+54	; 0x36
     588:	8f a9       	ldd	r24, Y+55	; 0x37
     58a:	98 ad       	ldd	r25, Y+56	; 0x38
     58c:	20 e0       	ldi	r18, 0x00	; 0
     58e:	30 e0       	ldi	r19, 0x00	; 0
     590:	4a e7       	ldi	r20, 0x7A	; 122
     592:	54 e4       	ldi	r21, 0x44	; 68
     594:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <__divsf3>
     598:	dc 01       	movw	r26, r24
     59a:	cb 01       	movw	r24, r22
     59c:	9e 01       	movw	r18, r28
     59e:	22 5c       	subi	r18, 0xC2	; 194
     5a0:	3f 4f       	sbci	r19, 0xFF	; 255
     5a2:	f9 01       	movw	r30, r18
     5a4:	80 83       	st	Z, r24
     5a6:	91 83       	std	Z+1, r25	; 0x01
     5a8:	a2 83       	std	Z+2, r26	; 0x02
     5aa:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     5ac:	8e 01       	movw	r16, r28
     5ae:	0e 5b       	subi	r16, 0xBE	; 190
     5b0:	1f 4f       	sbci	r17, 0xFF	; 255
     5b2:	ce 01       	movw	r24, r28
     5b4:	ce 96       	adiw	r24, 0x3e	; 62
     5b6:	fc 01       	movw	r30, r24
     5b8:	60 81       	ld	r22, Z
     5ba:	71 81       	ldd	r23, Z+1	; 0x01
     5bc:	82 81       	ldd	r24, Z+2	; 0x02
     5be:	93 81       	ldd	r25, Z+3	; 0x03
     5c0:	20 e0       	ldi	r18, 0x00	; 0
     5c2:	30 e0       	ldi	r19, 0x00	; 0
     5c4:	4a e7       	ldi	r20, 0x7A	; 122
     5c6:	55 e4       	ldi	r21, 0x45	; 69
     5c8:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <__mulsf3>
     5cc:	dc 01       	movw	r26, r24
     5ce:	cb 01       	movw	r24, r22
     5d0:	f8 01       	movw	r30, r16
     5d2:	80 83       	st	Z, r24
     5d4:	91 83       	std	Z+1, r25	; 0x01
     5d6:	a2 83       	std	Z+2, r26	; 0x02
     5d8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     5da:	ce 01       	movw	r24, r28
     5dc:	8e 5b       	subi	r24, 0xBE	; 190
     5de:	9f 4f       	sbci	r25, 0xFF	; 255
     5e0:	11 e0       	ldi	r17, 0x01	; 1
     5e2:	fc 01       	movw	r30, r24
     5e4:	60 81       	ld	r22, Z
     5e6:	71 81       	ldd	r23, Z+1	; 0x01
     5e8:	82 81       	ldd	r24, Z+2	; 0x02
     5ea:	93 81       	ldd	r25, Z+3	; 0x03
     5ec:	20 e0       	ldi	r18, 0x00	; 0
     5ee:	30 e0       	ldi	r19, 0x00	; 0
     5f0:	40 e8       	ldi	r20, 0x80	; 128
     5f2:	5f e3       	ldi	r21, 0x3F	; 63
     5f4:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <__ltsf2>
     5f8:	88 23       	and	r24, r24
     5fa:	0c f0       	brlt	.+2      	; 0x5fe <lcd_init_4d+0x558>
     5fc:	10 e0       	ldi	r17, 0x00	; 0
     5fe:	11 23       	and	r17, r17
     600:	49 f0       	breq	.+18     	; 0x614 <lcd_init_4d+0x56e>
		__ticks = 1;
     602:	ce 01       	movw	r24, r28
     604:	8a 5b       	subi	r24, 0xBA	; 186
     606:	9f 4f       	sbci	r25, 0xFF	; 255
     608:	21 e0       	ldi	r18, 0x01	; 1
     60a:	30 e0       	ldi	r19, 0x00	; 0
     60c:	fc 01       	movw	r30, r24
     60e:	31 83       	std	Z+1, r19	; 0x01
     610:	20 83       	st	Z, r18
     612:	73 c0       	rjmp	.+230    	; 0x6fa <lcd_init_4d+0x654>
	else if (__tmp > 65535)
     614:	ce 01       	movw	r24, r28
     616:	8e 5b       	subi	r24, 0xBE	; 190
     618:	9f 4f       	sbci	r25, 0xFF	; 255
     61a:	11 e0       	ldi	r17, 0x01	; 1
     61c:	fc 01       	movw	r30, r24
     61e:	60 81       	ld	r22, Z
     620:	71 81       	ldd	r23, Z+1	; 0x01
     622:	82 81       	ldd	r24, Z+2	; 0x02
     624:	93 81       	ldd	r25, Z+3	; 0x03
     626:	20 e0       	ldi	r18, 0x00	; 0
     628:	3f ef       	ldi	r19, 0xFF	; 255
     62a:	4f e7       	ldi	r20, 0x7F	; 127
     62c:	57 e4       	ldi	r21, 0x47	; 71
     62e:	0e 94 0c 18 	call	0x3018	; 0x3018 <__gtsf2>
     632:	18 16       	cp	r1, r24
     634:	0c f0       	brlt	.+2      	; 0x638 <lcd_init_4d+0x592>
     636:	10 e0       	ldi	r17, 0x00	; 0
     638:	11 23       	and	r17, r17
     63a:	09 f4       	brne	.+2      	; 0x63e <lcd_init_4d+0x598>
     63c:	4c c0       	rjmp	.+152    	; 0x6d6 <lcd_init_4d+0x630>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     63e:	ce 01       	movw	r24, r28
     640:	ce 96       	adiw	r24, 0x3e	; 62
     642:	fc 01       	movw	r30, r24
     644:	60 81       	ld	r22, Z
     646:	71 81       	ldd	r23, Z+1	; 0x01
     648:	82 81       	ldd	r24, Z+2	; 0x02
     64a:	93 81       	ldd	r25, Z+3	; 0x03
     64c:	20 e0       	ldi	r18, 0x00	; 0
     64e:	30 e0       	ldi	r19, 0x00	; 0
     650:	40 e2       	ldi	r20, 0x20	; 32
     652:	51 e4       	ldi	r21, 0x41	; 65
     654:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <__mulsf3>
     658:	dc 01       	movw	r26, r24
     65a:	cb 01       	movw	r24, r22
     65c:	8e 01       	movw	r16, r28
     65e:	0a 5b       	subi	r16, 0xBA	; 186
     660:	1f 4f       	sbci	r17, 0xFF	; 255
     662:	bc 01       	movw	r22, r24
     664:	cd 01       	movw	r24, r26
     666:	0e 94 90 14 	call	0x2920	; 0x2920 <__fixunssfsi>
     66a:	dc 01       	movw	r26, r24
     66c:	cb 01       	movw	r24, r22
     66e:	f8 01       	movw	r30, r16
     670:	91 83       	std	Z+1, r25	; 0x01
     672:	80 83       	st	Z, r24
     674:	27 c0       	rjmp	.+78     	; 0x6c4 <lcd_init_4d+0x61e>
     676:	ce 01       	movw	r24, r28
     678:	88 5b       	subi	r24, 0xB8	; 184
     67a:	9f 4f       	sbci	r25, 0xFF	; 255
     67c:	20 e9       	ldi	r18, 0x90	; 144
     67e:	31 e0       	ldi	r19, 0x01	; 1
     680:	fc 01       	movw	r30, r24
     682:	31 83       	std	Z+1, r19	; 0x01
     684:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     686:	ce 01       	movw	r24, r28
     688:	88 5b       	subi	r24, 0xB8	; 184
     68a:	9f 4f       	sbci	r25, 0xFF	; 255
     68c:	fc 01       	movw	r30, r24
     68e:	80 81       	ld	r24, Z
     690:	91 81       	ldd	r25, Z+1	; 0x01
     692:	8c 01       	movw	r16, r24
     694:	c8 01       	movw	r24, r16
     696:	01 97       	sbiw	r24, 0x01	; 1
     698:	f1 f7       	brne	.-4      	; 0x696 <lcd_init_4d+0x5f0>
     69a:	8c 01       	movw	r16, r24
     69c:	ce 01       	movw	r24, r28
     69e:	88 5b       	subi	r24, 0xB8	; 184
     6a0:	9f 4f       	sbci	r25, 0xFF	; 255
     6a2:	fc 01       	movw	r30, r24
     6a4:	11 83       	std	Z+1, r17	; 0x01
     6a6:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6a8:	ce 01       	movw	r24, r28
     6aa:	8a 5b       	subi	r24, 0xBA	; 186
     6ac:	9f 4f       	sbci	r25, 0xFF	; 255
     6ae:	9e 01       	movw	r18, r28
     6b0:	2a 5b       	subi	r18, 0xBA	; 186
     6b2:	3f 4f       	sbci	r19, 0xFF	; 255
     6b4:	f9 01       	movw	r30, r18
     6b6:	20 81       	ld	r18, Z
     6b8:	31 81       	ldd	r19, Z+1	; 0x01
     6ba:	21 50       	subi	r18, 0x01	; 1
     6bc:	30 40       	sbci	r19, 0x00	; 0
     6be:	fc 01       	movw	r30, r24
     6c0:	31 83       	std	Z+1, r19	; 0x01
     6c2:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6c4:	ce 01       	movw	r24, r28
     6c6:	8a 5b       	subi	r24, 0xBA	; 186
     6c8:	9f 4f       	sbci	r25, 0xFF	; 255
     6ca:	fc 01       	movw	r30, r24
     6cc:	80 81       	ld	r24, Z
     6ce:	91 81       	ldd	r25, Z+1	; 0x01
     6d0:	00 97       	sbiw	r24, 0x00	; 0
     6d2:	89 f6       	brne	.-94     	; 0x676 <lcd_init_4d+0x5d0>
     6d4:	4c c0       	rjmp	.+152    	; 0x76e <lcd_init_4d+0x6c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     6d6:	8e 01       	movw	r16, r28
     6d8:	0a 5b       	subi	r16, 0xBA	; 186
     6da:	1f 4f       	sbci	r17, 0xFF	; 255
     6dc:	ce 01       	movw	r24, r28
     6de:	8e 5b       	subi	r24, 0xBE	; 190
     6e0:	9f 4f       	sbci	r25, 0xFF	; 255
     6e2:	fc 01       	movw	r30, r24
     6e4:	60 81       	ld	r22, Z
     6e6:	71 81       	ldd	r23, Z+1	; 0x01
     6e8:	82 81       	ldd	r24, Z+2	; 0x02
     6ea:	93 81       	ldd	r25, Z+3	; 0x03
     6ec:	0e 94 90 14 	call	0x2920	; 0x2920 <__fixunssfsi>
     6f0:	dc 01       	movw	r26, r24
     6f2:	cb 01       	movw	r24, r22
     6f4:	f8 01       	movw	r30, r16
     6f6:	91 83       	std	Z+1, r25	; 0x01
     6f8:	80 83       	st	Z, r24
     6fa:	ce 01       	movw	r24, r28
     6fc:	86 5b       	subi	r24, 0xB6	; 182
     6fe:	9f 4f       	sbci	r25, 0xFF	; 255
     700:	9e 01       	movw	r18, r28
     702:	2a 5b       	subi	r18, 0xBA	; 186
     704:	3f 4f       	sbci	r19, 0xFF	; 255
     706:	f9 01       	movw	r30, r18
     708:	20 81       	ld	r18, Z
     70a:	31 81       	ldd	r19, Z+1	; 0x01
     70c:	fc 01       	movw	r30, r24
     70e:	31 83       	std	Z+1, r19	; 0x01
     710:	20 83       	st	Z, r18
     712:	ce 01       	movw	r24, r28
     714:	86 5b       	subi	r24, 0xB6	; 182
     716:	9f 4f       	sbci	r25, 0xFF	; 255
     718:	fc 01       	movw	r30, r24
     71a:	80 81       	ld	r24, Z
     71c:	91 81       	ldd	r25, Z+1	; 0x01
     71e:	8c 01       	movw	r16, r24
     720:	c8 01       	movw	r24, r16
     722:	01 97       	sbiw	r24, 0x01	; 1
     724:	f1 f7       	brne	.-4      	; 0x722 <lcd_init_4d+0x67c>
     726:	8c 01       	movw	r16, r24
     728:	ce 01       	movw	r24, r28
     72a:	86 5b       	subi	r24, 0xB6	; 182
     72c:	9f 4f       	sbci	r25, 0xFF	; 255
     72e:	fc 01       	movw	r30, r24
     730:	11 83       	std	Z+1, r17	; 0x01
     732:	00 83       	st	Z, r16
     734:	1c c0       	rjmp	.+56     	; 0x76e <lcd_init_4d+0x6c8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     736:	69 ad       	ldd	r22, Y+57	; 0x39
     738:	7a ad       	ldd	r23, Y+58	; 0x3a
     73a:	8b ad       	ldd	r24, Y+59	; 0x3b
     73c:	9c ad       	ldd	r25, Y+60	; 0x3c
     73e:	0e 94 90 14 	call	0x2920	; 0x2920 <__fixunssfsi>
     742:	dc 01       	movw	r26, r24
     744:	cb 01       	movw	r24, r22
     746:	8d af       	std	Y+61, r24	; 0x3d
     748:	ce 01       	movw	r24, r28
     74a:	84 5b       	subi	r24, 0xB4	; 180
     74c:	9f 4f       	sbci	r25, 0xFF	; 255
     74e:	2d ad       	ldd	r18, Y+61	; 0x3d
     750:	fc 01       	movw	r30, r24
     752:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     754:	ce 01       	movw	r24, r28
     756:	84 5b       	subi	r24, 0xB4	; 180
     758:	9f 4f       	sbci	r25, 0xFF	; 255
     75a:	fc 01       	movw	r30, r24
     75c:	80 81       	ld	r24, Z
     75e:	18 2f       	mov	r17, r24
     760:	1a 95       	dec	r17
     762:	f1 f7       	brne	.-4      	; 0x760 <lcd_init_4d+0x6ba>
     764:	ce 01       	movw	r24, r28
     766:	84 5b       	subi	r24, 0xB4	; 180
     768:	9f 4f       	sbci	r25, 0xFF	; 255
     76a:	fc 01       	movw	r30, r24
     76c:	10 83       	st	Z, r17
    _delay_us(200);                                 // this delay is omitted in the data sheet

 
    lcd_write_4(lcd_FunctionSet4bit);               // set 4-bit mode
     76e:	88 e2       	ldi	r24, 0x28	; 40
     770:	0e 94 c1 0c 	call	0x1982	; 0x1982 <lcd_write_4>
     774:	9e 01       	movw	r18, r28
     776:	23 5b       	subi	r18, 0xB3	; 179
     778:	3f 4f       	sbci	r19, 0xFF	; 255
     77a:	80 e0       	ldi	r24, 0x00	; 0
     77c:	90 e0       	ldi	r25, 0x00	; 0
     77e:	a0 ea       	ldi	r26, 0xA0	; 160
     780:	b2 e4       	ldi	r27, 0x42	; 66
     782:	f9 01       	movw	r30, r18
     784:	80 83       	st	Z, r24
     786:	91 83       	std	Z+1, r25	; 0x01
     788:	a2 83       	std	Z+2, r26	; 0x02
     78a:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
     78c:	8e 01       	movw	r16, r28
     78e:	0f 5a       	subi	r16, 0xAF	; 175
     790:	1f 4f       	sbci	r17, 0xFF	; 255
     792:	ce 01       	movw	r24, r28
     794:	83 5b       	subi	r24, 0xB3	; 179
     796:	9f 4f       	sbci	r25, 0xFF	; 255
     798:	fc 01       	movw	r30, r24
     79a:	60 81       	ld	r22, Z
     79c:	71 81       	ldd	r23, Z+1	; 0x01
     79e:	82 81       	ldd	r24, Z+2	; 0x02
     7a0:	93 81       	ldd	r25, Z+3	; 0x03
     7a2:	2b ea       	ldi	r18, 0xAB	; 171
     7a4:	3a ea       	ldi	r19, 0xAA	; 170
     7a6:	4a ea       	ldi	r20, 0xAA	; 170
     7a8:	50 e4       	ldi	r21, 0x40	; 64
     7aa:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <__mulsf3>
     7ae:	dc 01       	movw	r26, r24
     7b0:	cb 01       	movw	r24, r22
     7b2:	f8 01       	movw	r30, r16
     7b4:	80 83       	st	Z, r24
     7b6:	91 83       	std	Z+1, r25	; 0x01
     7b8:	a2 83       	std	Z+2, r26	; 0x02
     7ba:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     7bc:	ce 01       	movw	r24, r28
     7be:	8f 5a       	subi	r24, 0xAF	; 175
     7c0:	9f 4f       	sbci	r25, 0xFF	; 255
     7c2:	11 e0       	ldi	r17, 0x01	; 1
     7c4:	fc 01       	movw	r30, r24
     7c6:	60 81       	ld	r22, Z
     7c8:	71 81       	ldd	r23, Z+1	; 0x01
     7ca:	82 81       	ldd	r24, Z+2	; 0x02
     7cc:	93 81       	ldd	r25, Z+3	; 0x03
     7ce:	20 e0       	ldi	r18, 0x00	; 0
     7d0:	30 e0       	ldi	r19, 0x00	; 0
     7d2:	40 e8       	ldi	r20, 0x80	; 128
     7d4:	5f e3       	ldi	r21, 0x3F	; 63
     7d6:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <__ltsf2>
     7da:	88 23       	and	r24, r24
     7dc:	0c f0       	brlt	.+2      	; 0x7e0 <lcd_init_4d+0x73a>
     7de:	10 e0       	ldi	r17, 0x00	; 0
     7e0:	11 23       	and	r17, r17
     7e2:	39 f0       	breq	.+14     	; 0x7f2 <lcd_init_4d+0x74c>
		__ticks = 1;
     7e4:	ce 01       	movw	r24, r28
     7e6:	8b 5a       	subi	r24, 0xAB	; 171
     7e8:	9f 4f       	sbci	r25, 0xFF	; 255
     7ea:	21 e0       	ldi	r18, 0x01	; 1
     7ec:	fc 01       	movw	r30, r24
     7ee:	20 83       	st	Z, r18
     7f0:	05 c1       	rjmp	.+522    	; 0x9fc <__stack+0xfd>
	else if (__tmp > 255)
     7f2:	ce 01       	movw	r24, r28
     7f4:	8f 5a       	subi	r24, 0xAF	; 175
     7f6:	9f 4f       	sbci	r25, 0xFF	; 255
     7f8:	11 e0       	ldi	r17, 0x01	; 1
     7fa:	fc 01       	movw	r30, r24
     7fc:	60 81       	ld	r22, Z
     7fe:	71 81       	ldd	r23, Z+1	; 0x01
     800:	82 81       	ldd	r24, Z+2	; 0x02
     802:	93 81       	ldd	r25, Z+3	; 0x03
     804:	20 e0       	ldi	r18, 0x00	; 0
     806:	30 e0       	ldi	r19, 0x00	; 0
     808:	4f e7       	ldi	r20, 0x7F	; 127
     80a:	53 e4       	ldi	r21, 0x43	; 67
     80c:	0e 94 0c 18 	call	0x3018	; 0x3018 <__gtsf2>
     810:	18 16       	cp	r1, r24
     812:	0c f0       	brlt	.+2      	; 0x816 <lcd_init_4d+0x770>
     814:	10 e0       	ldi	r17, 0x00	; 0
     816:	11 23       	and	r17, r17
     818:	09 f4       	brne	.+2      	; 0x81c <lcd_init_4d+0x776>
     81a:	df c0       	rjmp	.+446    	; 0x9da <__stack+0xdb>
	{
		_delay_ms(__us / 1000.0);
     81c:	ce 01       	movw	r24, r28
     81e:	83 5b       	subi	r24, 0xB3	; 179
     820:	9f 4f       	sbci	r25, 0xFF	; 255
     822:	fc 01       	movw	r30, r24
     824:	60 81       	ld	r22, Z
     826:	71 81       	ldd	r23, Z+1	; 0x01
     828:	82 81       	ldd	r24, Z+2	; 0x02
     82a:	93 81       	ldd	r25, Z+3	; 0x03
     82c:	20 e0       	ldi	r18, 0x00	; 0
     82e:	30 e0       	ldi	r19, 0x00	; 0
     830:	4a e7       	ldi	r20, 0x7A	; 122
     832:	54 e4       	ldi	r21, 0x44	; 68
     834:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <__divsf3>
     838:	dc 01       	movw	r26, r24
     83a:	cb 01       	movw	r24, r22
     83c:	9e 01       	movw	r18, r28
     83e:	2a 5a       	subi	r18, 0xAA	; 170
     840:	3f 4f       	sbci	r19, 0xFF	; 255
     842:	f9 01       	movw	r30, r18
     844:	80 83       	st	Z, r24
     846:	91 83       	std	Z+1, r25	; 0x01
     848:	a2 83       	std	Z+2, r26	; 0x02
     84a:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     84c:	8e 01       	movw	r16, r28
     84e:	06 5a       	subi	r16, 0xA6	; 166
     850:	1f 4f       	sbci	r17, 0xFF	; 255
     852:	ce 01       	movw	r24, r28
     854:	8a 5a       	subi	r24, 0xAA	; 170
     856:	9f 4f       	sbci	r25, 0xFF	; 255
     858:	fc 01       	movw	r30, r24
     85a:	60 81       	ld	r22, Z
     85c:	71 81       	ldd	r23, Z+1	; 0x01
     85e:	82 81       	ldd	r24, Z+2	; 0x02
     860:	93 81       	ldd	r25, Z+3	; 0x03
     862:	20 e0       	ldi	r18, 0x00	; 0
     864:	30 e0       	ldi	r19, 0x00	; 0
     866:	4a e7       	ldi	r20, 0x7A	; 122
     868:	55 e4       	ldi	r21, 0x45	; 69
     86a:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <__mulsf3>
     86e:	dc 01       	movw	r26, r24
     870:	cb 01       	movw	r24, r22
     872:	f8 01       	movw	r30, r16
     874:	80 83       	st	Z, r24
     876:	91 83       	std	Z+1, r25	; 0x01
     878:	a2 83       	std	Z+2, r26	; 0x02
     87a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     87c:	ce 01       	movw	r24, r28
     87e:	86 5a       	subi	r24, 0xA6	; 166
     880:	9f 4f       	sbci	r25, 0xFF	; 255
     882:	11 e0       	ldi	r17, 0x01	; 1
     884:	fc 01       	movw	r30, r24
     886:	60 81       	ld	r22, Z
     888:	71 81       	ldd	r23, Z+1	; 0x01
     88a:	82 81       	ldd	r24, Z+2	; 0x02
     88c:	93 81       	ldd	r25, Z+3	; 0x03
     88e:	20 e0       	ldi	r18, 0x00	; 0
     890:	30 e0       	ldi	r19, 0x00	; 0
     892:	40 e8       	ldi	r20, 0x80	; 128
     894:	5f e3       	ldi	r21, 0x3F	; 63
     896:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <__ltsf2>
     89a:	88 23       	and	r24, r24
     89c:	0c f0       	brlt	.+2      	; 0x8a0 <lcd_init_4d+0x7fa>
     89e:	10 e0       	ldi	r17, 0x00	; 0
     8a0:	11 23       	and	r17, r17
     8a2:	49 f0       	breq	.+18     	; 0x8b6 <lcd_init_4d+0x810>
		__ticks = 1;
     8a4:	ce 01       	movw	r24, r28
     8a6:	82 5a       	subi	r24, 0xA2	; 162
     8a8:	9f 4f       	sbci	r25, 0xFF	; 255
     8aa:	21 e0       	ldi	r18, 0x01	; 1
     8ac:	30 e0       	ldi	r19, 0x00	; 0
     8ae:	fc 01       	movw	r30, r24
     8b0:	31 83       	std	Z+1, r19	; 0x01
     8b2:	20 83       	st	Z, r18
     8b4:	74 c0       	rjmp	.+232    	; 0x99e <__stack+0x9f>
	else if (__tmp > 65535)
     8b6:	ce 01       	movw	r24, r28
     8b8:	86 5a       	subi	r24, 0xA6	; 166
     8ba:	9f 4f       	sbci	r25, 0xFF	; 255
     8bc:	11 e0       	ldi	r17, 0x01	; 1
     8be:	fc 01       	movw	r30, r24
     8c0:	60 81       	ld	r22, Z
     8c2:	71 81       	ldd	r23, Z+1	; 0x01
     8c4:	82 81       	ldd	r24, Z+2	; 0x02
     8c6:	93 81       	ldd	r25, Z+3	; 0x03
     8c8:	20 e0       	ldi	r18, 0x00	; 0
     8ca:	3f ef       	ldi	r19, 0xFF	; 255
     8cc:	4f e7       	ldi	r20, 0x7F	; 127
     8ce:	57 e4       	ldi	r21, 0x47	; 71
     8d0:	0e 94 0c 18 	call	0x3018	; 0x3018 <__gtsf2>
     8d4:	18 16       	cp	r1, r24
     8d6:	0c f0       	brlt	.+2      	; 0x8da <lcd_init_4d+0x834>
     8d8:	10 e0       	ldi	r17, 0x00	; 0
     8da:	11 23       	and	r17, r17
     8dc:	09 f4       	brne	.+2      	; 0x8e0 <lcd_init_4d+0x83a>
     8de:	4d c0       	rjmp	.+154    	; 0x97a <__stack+0x7b>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     8e0:	ce 01       	movw	r24, r28
     8e2:	8a 5a       	subi	r24, 0xAA	; 170
     8e4:	9f 4f       	sbci	r25, 0xFF	; 255
     8e6:	fc 01       	movw	r30, r24
     8e8:	60 81       	ld	r22, Z
     8ea:	71 81       	ldd	r23, Z+1	; 0x01
     8ec:	82 81       	ldd	r24, Z+2	; 0x02
     8ee:	93 81       	ldd	r25, Z+3	; 0x03
     8f0:	20 e0       	ldi	r18, 0x00	; 0
     8f2:	30 e0       	ldi	r19, 0x00	; 0
     8f4:	40 e2       	ldi	r20, 0x20	; 32
     8f6:	51 e4       	ldi	r21, 0x41	; 65
     8f8:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <__mulsf3>
     8fc:	dc 01       	movw	r26, r24
     8fe:	cb 01       	movw	r24, r22
     900:	8e 01       	movw	r16, r28
     902:	02 5a       	subi	r16, 0xA2	; 162
     904:	1f 4f       	sbci	r17, 0xFF	; 255
     906:	bc 01       	movw	r22, r24
     908:	cd 01       	movw	r24, r26
     90a:	0e 94 90 14 	call	0x2920	; 0x2920 <__fixunssfsi>
     90e:	dc 01       	movw	r26, r24
     910:	cb 01       	movw	r24, r22
     912:	f8 01       	movw	r30, r16
     914:	91 83       	std	Z+1, r25	; 0x01
     916:	80 83       	st	Z, r24
     918:	27 c0       	rjmp	.+78     	; 0x968 <__stack+0x69>
     91a:	ce 01       	movw	r24, r28
     91c:	80 5a       	subi	r24, 0xA0	; 160
     91e:	9f 4f       	sbci	r25, 0xFF	; 255
     920:	20 e9       	ldi	r18, 0x90	; 144
     922:	31 e0       	ldi	r19, 0x01	; 1
     924:	fc 01       	movw	r30, r24
     926:	31 83       	std	Z+1, r19	; 0x01
     928:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     92a:	ce 01       	movw	r24, r28
     92c:	80 5a       	subi	r24, 0xA0	; 160
     92e:	9f 4f       	sbci	r25, 0xFF	; 255
     930:	fc 01       	movw	r30, r24
     932:	80 81       	ld	r24, Z
     934:	91 81       	ldd	r25, Z+1	; 0x01
     936:	8c 01       	movw	r16, r24
     938:	c8 01       	movw	r24, r16
     93a:	01 97       	sbiw	r24, 0x01	; 1
     93c:	f1 f7       	brne	.-4      	; 0x93a <__stack+0x3b>
     93e:	8c 01       	movw	r16, r24
     940:	ce 01       	movw	r24, r28
     942:	80 5a       	subi	r24, 0xA0	; 160
     944:	9f 4f       	sbci	r25, 0xFF	; 255
     946:	fc 01       	movw	r30, r24
     948:	11 83       	std	Z+1, r17	; 0x01
     94a:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     94c:	ce 01       	movw	r24, r28
     94e:	82 5a       	subi	r24, 0xA2	; 162
     950:	9f 4f       	sbci	r25, 0xFF	; 255
     952:	9e 01       	movw	r18, r28
     954:	22 5a       	subi	r18, 0xA2	; 162
     956:	3f 4f       	sbci	r19, 0xFF	; 255
     958:	f9 01       	movw	r30, r18
     95a:	20 81       	ld	r18, Z
     95c:	31 81       	ldd	r19, Z+1	; 0x01
     95e:	21 50       	subi	r18, 0x01	; 1
     960:	30 40       	sbci	r19, 0x00	; 0
     962:	fc 01       	movw	r30, r24
     964:	31 83       	std	Z+1, r19	; 0x01
     966:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     968:	ce 01       	movw	r24, r28
     96a:	82 5a       	subi	r24, 0xA2	; 162
     96c:	9f 4f       	sbci	r25, 0xFF	; 255
     96e:	fc 01       	movw	r30, r24
     970:	80 81       	ld	r24, Z
     972:	91 81       	ldd	r25, Z+1	; 0x01
     974:	00 97       	sbiw	r24, 0x00	; 0
     976:	89 f6       	brne	.-94     	; 0x91a <__stack+0x1b>
     978:	58 c0       	rjmp	.+176    	; 0xa2a <__stack+0x12b>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     97a:	8e 01       	movw	r16, r28
     97c:	02 5a       	subi	r16, 0xA2	; 162
     97e:	1f 4f       	sbci	r17, 0xFF	; 255
     980:	ce 01       	movw	r24, r28
     982:	86 5a       	subi	r24, 0xA6	; 166
     984:	9f 4f       	sbci	r25, 0xFF	; 255
     986:	fc 01       	movw	r30, r24
     988:	60 81       	ld	r22, Z
     98a:	71 81       	ldd	r23, Z+1	; 0x01
     98c:	82 81       	ldd	r24, Z+2	; 0x02
     98e:	93 81       	ldd	r25, Z+3	; 0x03
     990:	0e 94 90 14 	call	0x2920	; 0x2920 <__fixunssfsi>
     994:	dc 01       	movw	r26, r24
     996:	cb 01       	movw	r24, r22
     998:	f8 01       	movw	r30, r16
     99a:	91 83       	std	Z+1, r25	; 0x01
     99c:	80 83       	st	Z, r24
     99e:	ce 01       	movw	r24, r28
     9a0:	8e 59       	subi	r24, 0x9E	; 158
     9a2:	9f 4f       	sbci	r25, 0xFF	; 255
     9a4:	9e 01       	movw	r18, r28
     9a6:	22 5a       	subi	r18, 0xA2	; 162
     9a8:	3f 4f       	sbci	r19, 0xFF	; 255
     9aa:	f9 01       	movw	r30, r18
     9ac:	20 81       	ld	r18, Z
     9ae:	31 81       	ldd	r19, Z+1	; 0x01
     9b0:	fc 01       	movw	r30, r24
     9b2:	31 83       	std	Z+1, r19	; 0x01
     9b4:	20 83       	st	Z, r18
     9b6:	ce 01       	movw	r24, r28
     9b8:	8e 59       	subi	r24, 0x9E	; 158
     9ba:	9f 4f       	sbci	r25, 0xFF	; 255
     9bc:	fc 01       	movw	r30, r24
     9be:	80 81       	ld	r24, Z
     9c0:	91 81       	ldd	r25, Z+1	; 0x01
     9c2:	8c 01       	movw	r16, r24
     9c4:	c8 01       	movw	r24, r16
     9c6:	01 97       	sbiw	r24, 0x01	; 1
     9c8:	f1 f7       	brne	.-4      	; 0x9c6 <__stack+0xc7>
     9ca:	8c 01       	movw	r16, r24
     9cc:	ce 01       	movw	r24, r28
     9ce:	8e 59       	subi	r24, 0x9E	; 158
     9d0:	9f 4f       	sbci	r25, 0xFF	; 255
     9d2:	fc 01       	movw	r30, r24
     9d4:	11 83       	std	Z+1, r17	; 0x01
     9d6:	00 83       	st	Z, r16
     9d8:	28 c0       	rjmp	.+80     	; 0xa2a <__stack+0x12b>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     9da:	8e 01       	movw	r16, r28
     9dc:	0b 5a       	subi	r16, 0xAB	; 171
     9de:	1f 4f       	sbci	r17, 0xFF	; 255
     9e0:	ce 01       	movw	r24, r28
     9e2:	8f 5a       	subi	r24, 0xAF	; 175
     9e4:	9f 4f       	sbci	r25, 0xFF	; 255
     9e6:	fc 01       	movw	r30, r24
     9e8:	60 81       	ld	r22, Z
     9ea:	71 81       	ldd	r23, Z+1	; 0x01
     9ec:	82 81       	ldd	r24, Z+2	; 0x02
     9ee:	93 81       	ldd	r25, Z+3	; 0x03
     9f0:	0e 94 90 14 	call	0x2920	; 0x2920 <__fixunssfsi>
     9f4:	dc 01       	movw	r26, r24
     9f6:	cb 01       	movw	r24, r22
     9f8:	f8 01       	movw	r30, r16
     9fa:	80 83       	st	Z, r24
     9fc:	ce 01       	movw	r24, r28
     9fe:	8c 59       	subi	r24, 0x9C	; 156
     a00:	9f 4f       	sbci	r25, 0xFF	; 255
     a02:	9e 01       	movw	r18, r28
     a04:	2b 5a       	subi	r18, 0xAB	; 171
     a06:	3f 4f       	sbci	r19, 0xFF	; 255
     a08:	f9 01       	movw	r30, r18
     a0a:	20 81       	ld	r18, Z
     a0c:	fc 01       	movw	r30, r24
     a0e:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     a10:	ce 01       	movw	r24, r28
     a12:	8c 59       	subi	r24, 0x9C	; 156
     a14:	9f 4f       	sbci	r25, 0xFF	; 255
     a16:	fc 01       	movw	r30, r24
     a18:	80 81       	ld	r24, Z
     a1a:	18 2f       	mov	r17, r24
     a1c:	1a 95       	dec	r17
     a1e:	f1 f7       	brne	.-4      	; 0xa1c <__stack+0x11d>
     a20:	ce 01       	movw	r24, r28
     a22:	8c 59       	subi	r24, 0x9C	; 156
     a24:	9f 4f       	sbci	r25, 0xFF	; 255
     a26:	fc 01       	movw	r30, r24
     a28:	10 83       	st	Z, r17
    _delay_us(80);                                  // 40uS delay (min)

// Function Set instruction
    lcd_write_instruction_4d(lcd_FunctionSet4bit);   // set mode, lines, and font
     a2a:	88 e2       	ldi	r24, 0x28	; 40
     a2c:	0e 94 9d 0c 	call	0x193a	; 0x193a <lcd_write_instruction_4d>
     a30:	9e 01       	movw	r18, r28
     a32:	2b 59       	subi	r18, 0x9B	; 155
     a34:	3f 4f       	sbci	r19, 0xFF	; 255
     a36:	80 e0       	ldi	r24, 0x00	; 0
     a38:	90 e0       	ldi	r25, 0x00	; 0
     a3a:	a0 ea       	ldi	r26, 0xA0	; 160
     a3c:	b2 e4       	ldi	r27, 0x42	; 66
     a3e:	f9 01       	movw	r30, r18
     a40:	80 83       	st	Z, r24
     a42:	91 83       	std	Z+1, r25	; 0x01
     a44:	a2 83       	std	Z+2, r26	; 0x02
     a46:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
     a48:	8e 01       	movw	r16, r28
     a4a:	07 59       	subi	r16, 0x97	; 151
     a4c:	1f 4f       	sbci	r17, 0xFF	; 255
     a4e:	ce 01       	movw	r24, r28
     a50:	8b 59       	subi	r24, 0x9B	; 155
     a52:	9f 4f       	sbci	r25, 0xFF	; 255
     a54:	fc 01       	movw	r30, r24
     a56:	60 81       	ld	r22, Z
     a58:	71 81       	ldd	r23, Z+1	; 0x01
     a5a:	82 81       	ldd	r24, Z+2	; 0x02
     a5c:	93 81       	ldd	r25, Z+3	; 0x03
     a5e:	2b ea       	ldi	r18, 0xAB	; 171
     a60:	3a ea       	ldi	r19, 0xAA	; 170
     a62:	4a ea       	ldi	r20, 0xAA	; 170
     a64:	50 e4       	ldi	r21, 0x40	; 64
     a66:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <__mulsf3>
     a6a:	dc 01       	movw	r26, r24
     a6c:	cb 01       	movw	r24, r22
     a6e:	f8 01       	movw	r30, r16
     a70:	80 83       	st	Z, r24
     a72:	91 83       	std	Z+1, r25	; 0x01
     a74:	a2 83       	std	Z+2, r26	; 0x02
     a76:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     a78:	ce 01       	movw	r24, r28
     a7a:	87 59       	subi	r24, 0x97	; 151
     a7c:	9f 4f       	sbci	r25, 0xFF	; 255
     a7e:	11 e0       	ldi	r17, 0x01	; 1
     a80:	fc 01       	movw	r30, r24
     a82:	60 81       	ld	r22, Z
     a84:	71 81       	ldd	r23, Z+1	; 0x01
     a86:	82 81       	ldd	r24, Z+2	; 0x02
     a88:	93 81       	ldd	r25, Z+3	; 0x03
     a8a:	20 e0       	ldi	r18, 0x00	; 0
     a8c:	30 e0       	ldi	r19, 0x00	; 0
     a8e:	40 e8       	ldi	r20, 0x80	; 128
     a90:	5f e3       	ldi	r21, 0x3F	; 63
     a92:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <__ltsf2>
     a96:	88 23       	and	r24, r24
     a98:	0c f0       	brlt	.+2      	; 0xa9c <__stack+0x19d>
     a9a:	10 e0       	ldi	r17, 0x00	; 0
     a9c:	11 23       	and	r17, r17
     a9e:	39 f0       	breq	.+14     	; 0xaae <__stack+0x1af>
		__ticks = 1;
     aa0:	ce 01       	movw	r24, r28
     aa2:	83 59       	subi	r24, 0x93	; 147
     aa4:	9f 4f       	sbci	r25, 0xFF	; 255
     aa6:	21 e0       	ldi	r18, 0x01	; 1
     aa8:	fc 01       	movw	r30, r24
     aaa:	20 83       	st	Z, r18
     aac:	05 c1       	rjmp	.+522    	; 0xcb8 <__stack+0x3b9>
	else if (__tmp > 255)
     aae:	ce 01       	movw	r24, r28
     ab0:	87 59       	subi	r24, 0x97	; 151
     ab2:	9f 4f       	sbci	r25, 0xFF	; 255
     ab4:	11 e0       	ldi	r17, 0x01	; 1
     ab6:	fc 01       	movw	r30, r24
     ab8:	60 81       	ld	r22, Z
     aba:	71 81       	ldd	r23, Z+1	; 0x01
     abc:	82 81       	ldd	r24, Z+2	; 0x02
     abe:	93 81       	ldd	r25, Z+3	; 0x03
     ac0:	20 e0       	ldi	r18, 0x00	; 0
     ac2:	30 e0       	ldi	r19, 0x00	; 0
     ac4:	4f e7       	ldi	r20, 0x7F	; 127
     ac6:	53 e4       	ldi	r21, 0x43	; 67
     ac8:	0e 94 0c 18 	call	0x3018	; 0x3018 <__gtsf2>
     acc:	18 16       	cp	r1, r24
     ace:	0c f0       	brlt	.+2      	; 0xad2 <__stack+0x1d3>
     ad0:	10 e0       	ldi	r17, 0x00	; 0
     ad2:	11 23       	and	r17, r17
     ad4:	09 f4       	brne	.+2      	; 0xad8 <__stack+0x1d9>
     ad6:	df c0       	rjmp	.+446    	; 0xc96 <__stack+0x397>
	{
		_delay_ms(__us / 1000.0);
     ad8:	ce 01       	movw	r24, r28
     ada:	8b 59       	subi	r24, 0x9B	; 155
     adc:	9f 4f       	sbci	r25, 0xFF	; 255
     ade:	fc 01       	movw	r30, r24
     ae0:	60 81       	ld	r22, Z
     ae2:	71 81       	ldd	r23, Z+1	; 0x01
     ae4:	82 81       	ldd	r24, Z+2	; 0x02
     ae6:	93 81       	ldd	r25, Z+3	; 0x03
     ae8:	20 e0       	ldi	r18, 0x00	; 0
     aea:	30 e0       	ldi	r19, 0x00	; 0
     aec:	4a e7       	ldi	r20, 0x7A	; 122
     aee:	54 e4       	ldi	r21, 0x44	; 68
     af0:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <__divsf3>
     af4:	dc 01       	movw	r26, r24
     af6:	cb 01       	movw	r24, r22
     af8:	9e 01       	movw	r18, r28
     afa:	22 59       	subi	r18, 0x92	; 146
     afc:	3f 4f       	sbci	r19, 0xFF	; 255
     afe:	f9 01       	movw	r30, r18
     b00:	80 83       	st	Z, r24
     b02:	91 83       	std	Z+1, r25	; 0x01
     b04:	a2 83       	std	Z+2, r26	; 0x02
     b06:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     b08:	8e 01       	movw	r16, r28
     b0a:	0e 58       	subi	r16, 0x8E	; 142
     b0c:	1f 4f       	sbci	r17, 0xFF	; 255
     b0e:	ce 01       	movw	r24, r28
     b10:	82 59       	subi	r24, 0x92	; 146
     b12:	9f 4f       	sbci	r25, 0xFF	; 255
     b14:	fc 01       	movw	r30, r24
     b16:	60 81       	ld	r22, Z
     b18:	71 81       	ldd	r23, Z+1	; 0x01
     b1a:	82 81       	ldd	r24, Z+2	; 0x02
     b1c:	93 81       	ldd	r25, Z+3	; 0x03
     b1e:	20 e0       	ldi	r18, 0x00	; 0
     b20:	30 e0       	ldi	r19, 0x00	; 0
     b22:	4a e7       	ldi	r20, 0x7A	; 122
     b24:	55 e4       	ldi	r21, 0x45	; 69
     b26:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <__mulsf3>
     b2a:	dc 01       	movw	r26, r24
     b2c:	cb 01       	movw	r24, r22
     b2e:	f8 01       	movw	r30, r16
     b30:	80 83       	st	Z, r24
     b32:	91 83       	std	Z+1, r25	; 0x01
     b34:	a2 83       	std	Z+2, r26	; 0x02
     b36:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     b38:	ce 01       	movw	r24, r28
     b3a:	8e 58       	subi	r24, 0x8E	; 142
     b3c:	9f 4f       	sbci	r25, 0xFF	; 255
     b3e:	11 e0       	ldi	r17, 0x01	; 1
     b40:	fc 01       	movw	r30, r24
     b42:	60 81       	ld	r22, Z
     b44:	71 81       	ldd	r23, Z+1	; 0x01
     b46:	82 81       	ldd	r24, Z+2	; 0x02
     b48:	93 81       	ldd	r25, Z+3	; 0x03
     b4a:	20 e0       	ldi	r18, 0x00	; 0
     b4c:	30 e0       	ldi	r19, 0x00	; 0
     b4e:	40 e8       	ldi	r20, 0x80	; 128
     b50:	5f e3       	ldi	r21, 0x3F	; 63
     b52:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <__ltsf2>
     b56:	88 23       	and	r24, r24
     b58:	0c f0       	brlt	.+2      	; 0xb5c <__stack+0x25d>
     b5a:	10 e0       	ldi	r17, 0x00	; 0
     b5c:	11 23       	and	r17, r17
     b5e:	49 f0       	breq	.+18     	; 0xb72 <__stack+0x273>
		__ticks = 1;
     b60:	ce 01       	movw	r24, r28
     b62:	8a 58       	subi	r24, 0x8A	; 138
     b64:	9f 4f       	sbci	r25, 0xFF	; 255
     b66:	21 e0       	ldi	r18, 0x01	; 1
     b68:	30 e0       	ldi	r19, 0x00	; 0
     b6a:	fc 01       	movw	r30, r24
     b6c:	31 83       	std	Z+1, r19	; 0x01
     b6e:	20 83       	st	Z, r18
     b70:	74 c0       	rjmp	.+232    	; 0xc5a <__stack+0x35b>
	else if (__tmp > 65535)
     b72:	ce 01       	movw	r24, r28
     b74:	8e 58       	subi	r24, 0x8E	; 142
     b76:	9f 4f       	sbci	r25, 0xFF	; 255
     b78:	11 e0       	ldi	r17, 0x01	; 1
     b7a:	fc 01       	movw	r30, r24
     b7c:	60 81       	ld	r22, Z
     b7e:	71 81       	ldd	r23, Z+1	; 0x01
     b80:	82 81       	ldd	r24, Z+2	; 0x02
     b82:	93 81       	ldd	r25, Z+3	; 0x03
     b84:	20 e0       	ldi	r18, 0x00	; 0
     b86:	3f ef       	ldi	r19, 0xFF	; 255
     b88:	4f e7       	ldi	r20, 0x7F	; 127
     b8a:	57 e4       	ldi	r21, 0x47	; 71
     b8c:	0e 94 0c 18 	call	0x3018	; 0x3018 <__gtsf2>
     b90:	18 16       	cp	r1, r24
     b92:	0c f0       	brlt	.+2      	; 0xb96 <__stack+0x297>
     b94:	10 e0       	ldi	r17, 0x00	; 0
     b96:	11 23       	and	r17, r17
     b98:	09 f4       	brne	.+2      	; 0xb9c <__stack+0x29d>
     b9a:	4d c0       	rjmp	.+154    	; 0xc36 <__stack+0x337>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b9c:	ce 01       	movw	r24, r28
     b9e:	82 59       	subi	r24, 0x92	; 146
     ba0:	9f 4f       	sbci	r25, 0xFF	; 255
     ba2:	fc 01       	movw	r30, r24
     ba4:	60 81       	ld	r22, Z
     ba6:	71 81       	ldd	r23, Z+1	; 0x01
     ba8:	82 81       	ldd	r24, Z+2	; 0x02
     baa:	93 81       	ldd	r25, Z+3	; 0x03
     bac:	20 e0       	ldi	r18, 0x00	; 0
     bae:	30 e0       	ldi	r19, 0x00	; 0
     bb0:	40 e2       	ldi	r20, 0x20	; 32
     bb2:	51 e4       	ldi	r21, 0x41	; 65
     bb4:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <__mulsf3>
     bb8:	dc 01       	movw	r26, r24
     bba:	cb 01       	movw	r24, r22
     bbc:	8e 01       	movw	r16, r28
     bbe:	0a 58       	subi	r16, 0x8A	; 138
     bc0:	1f 4f       	sbci	r17, 0xFF	; 255
     bc2:	bc 01       	movw	r22, r24
     bc4:	cd 01       	movw	r24, r26
     bc6:	0e 94 90 14 	call	0x2920	; 0x2920 <__fixunssfsi>
     bca:	dc 01       	movw	r26, r24
     bcc:	cb 01       	movw	r24, r22
     bce:	f8 01       	movw	r30, r16
     bd0:	91 83       	std	Z+1, r25	; 0x01
     bd2:	80 83       	st	Z, r24
     bd4:	27 c0       	rjmp	.+78     	; 0xc24 <__stack+0x325>
     bd6:	ce 01       	movw	r24, r28
     bd8:	88 58       	subi	r24, 0x88	; 136
     bda:	9f 4f       	sbci	r25, 0xFF	; 255
     bdc:	20 e9       	ldi	r18, 0x90	; 144
     bde:	31 e0       	ldi	r19, 0x01	; 1
     be0:	fc 01       	movw	r30, r24
     be2:	31 83       	std	Z+1, r19	; 0x01
     be4:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     be6:	ce 01       	movw	r24, r28
     be8:	88 58       	subi	r24, 0x88	; 136
     bea:	9f 4f       	sbci	r25, 0xFF	; 255
     bec:	fc 01       	movw	r30, r24
     bee:	80 81       	ld	r24, Z
     bf0:	91 81       	ldd	r25, Z+1	; 0x01
     bf2:	8c 01       	movw	r16, r24
     bf4:	c8 01       	movw	r24, r16
     bf6:	01 97       	sbiw	r24, 0x01	; 1
     bf8:	f1 f7       	brne	.-4      	; 0xbf6 <__stack+0x2f7>
     bfa:	8c 01       	movw	r16, r24
     bfc:	ce 01       	movw	r24, r28
     bfe:	88 58       	subi	r24, 0x88	; 136
     c00:	9f 4f       	sbci	r25, 0xFF	; 255
     c02:	fc 01       	movw	r30, r24
     c04:	11 83       	std	Z+1, r17	; 0x01
     c06:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c08:	ce 01       	movw	r24, r28
     c0a:	8a 58       	subi	r24, 0x8A	; 138
     c0c:	9f 4f       	sbci	r25, 0xFF	; 255
     c0e:	9e 01       	movw	r18, r28
     c10:	2a 58       	subi	r18, 0x8A	; 138
     c12:	3f 4f       	sbci	r19, 0xFF	; 255
     c14:	f9 01       	movw	r30, r18
     c16:	20 81       	ld	r18, Z
     c18:	31 81       	ldd	r19, Z+1	; 0x01
     c1a:	21 50       	subi	r18, 0x01	; 1
     c1c:	30 40       	sbci	r19, 0x00	; 0
     c1e:	fc 01       	movw	r30, r24
     c20:	31 83       	std	Z+1, r19	; 0x01
     c22:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c24:	ce 01       	movw	r24, r28
     c26:	8a 58       	subi	r24, 0x8A	; 138
     c28:	9f 4f       	sbci	r25, 0xFF	; 255
     c2a:	fc 01       	movw	r30, r24
     c2c:	80 81       	ld	r24, Z
     c2e:	91 81       	ldd	r25, Z+1	; 0x01
     c30:	00 97       	sbiw	r24, 0x00	; 0
     c32:	89 f6       	brne	.-94     	; 0xbd6 <__stack+0x2d7>
     c34:	58 c0       	rjmp	.+176    	; 0xce6 <__stack+0x3e7>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c36:	8e 01       	movw	r16, r28
     c38:	0a 58       	subi	r16, 0x8A	; 138
     c3a:	1f 4f       	sbci	r17, 0xFF	; 255
     c3c:	ce 01       	movw	r24, r28
     c3e:	8e 58       	subi	r24, 0x8E	; 142
     c40:	9f 4f       	sbci	r25, 0xFF	; 255
     c42:	fc 01       	movw	r30, r24
     c44:	60 81       	ld	r22, Z
     c46:	71 81       	ldd	r23, Z+1	; 0x01
     c48:	82 81       	ldd	r24, Z+2	; 0x02
     c4a:	93 81       	ldd	r25, Z+3	; 0x03
     c4c:	0e 94 90 14 	call	0x2920	; 0x2920 <__fixunssfsi>
     c50:	dc 01       	movw	r26, r24
     c52:	cb 01       	movw	r24, r22
     c54:	f8 01       	movw	r30, r16
     c56:	91 83       	std	Z+1, r25	; 0x01
     c58:	80 83       	st	Z, r24
     c5a:	ce 01       	movw	r24, r28
     c5c:	86 58       	subi	r24, 0x86	; 134
     c5e:	9f 4f       	sbci	r25, 0xFF	; 255
     c60:	9e 01       	movw	r18, r28
     c62:	2a 58       	subi	r18, 0x8A	; 138
     c64:	3f 4f       	sbci	r19, 0xFF	; 255
     c66:	f9 01       	movw	r30, r18
     c68:	20 81       	ld	r18, Z
     c6a:	31 81       	ldd	r19, Z+1	; 0x01
     c6c:	fc 01       	movw	r30, r24
     c6e:	31 83       	std	Z+1, r19	; 0x01
     c70:	20 83       	st	Z, r18
     c72:	ce 01       	movw	r24, r28
     c74:	86 58       	subi	r24, 0x86	; 134
     c76:	9f 4f       	sbci	r25, 0xFF	; 255
     c78:	fc 01       	movw	r30, r24
     c7a:	80 81       	ld	r24, Z
     c7c:	91 81       	ldd	r25, Z+1	; 0x01
     c7e:	8c 01       	movw	r16, r24
     c80:	c8 01       	movw	r24, r16
     c82:	01 97       	sbiw	r24, 0x01	; 1
     c84:	f1 f7       	brne	.-4      	; 0xc82 <__stack+0x383>
     c86:	8c 01       	movw	r16, r24
     c88:	ce 01       	movw	r24, r28
     c8a:	86 58       	subi	r24, 0x86	; 134
     c8c:	9f 4f       	sbci	r25, 0xFF	; 255
     c8e:	fc 01       	movw	r30, r24
     c90:	11 83       	std	Z+1, r17	; 0x01
     c92:	00 83       	st	Z, r16
     c94:	28 c0       	rjmp	.+80     	; 0xce6 <__stack+0x3e7>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     c96:	8e 01       	movw	r16, r28
     c98:	03 59       	subi	r16, 0x93	; 147
     c9a:	1f 4f       	sbci	r17, 0xFF	; 255
     c9c:	ce 01       	movw	r24, r28
     c9e:	87 59       	subi	r24, 0x97	; 151
     ca0:	9f 4f       	sbci	r25, 0xFF	; 255
     ca2:	fc 01       	movw	r30, r24
     ca4:	60 81       	ld	r22, Z
     ca6:	71 81       	ldd	r23, Z+1	; 0x01
     ca8:	82 81       	ldd	r24, Z+2	; 0x02
     caa:	93 81       	ldd	r25, Z+3	; 0x03
     cac:	0e 94 90 14 	call	0x2920	; 0x2920 <__fixunssfsi>
     cb0:	dc 01       	movw	r26, r24
     cb2:	cb 01       	movw	r24, r22
     cb4:	f8 01       	movw	r30, r16
     cb6:	80 83       	st	Z, r24
     cb8:	ce 01       	movw	r24, r28
     cba:	84 58       	subi	r24, 0x84	; 132
     cbc:	9f 4f       	sbci	r25, 0xFF	; 255
     cbe:	9e 01       	movw	r18, r28
     cc0:	23 59       	subi	r18, 0x93	; 147
     cc2:	3f 4f       	sbci	r19, 0xFF	; 255
     cc4:	f9 01       	movw	r30, r18
     cc6:	20 81       	ld	r18, Z
     cc8:	fc 01       	movw	r30, r24
     cca:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     ccc:	ce 01       	movw	r24, r28
     cce:	84 58       	subi	r24, 0x84	; 132
     cd0:	9f 4f       	sbci	r25, 0xFF	; 255
     cd2:	fc 01       	movw	r30, r24
     cd4:	80 81       	ld	r24, Z
     cd6:	18 2f       	mov	r17, r24
     cd8:	1a 95       	dec	r17
     cda:	f1 f7       	brne	.-4      	; 0xcd8 <__stack+0x3d9>
     cdc:	ce 01       	movw	r24, r28
     cde:	84 58       	subi	r24, 0x84	; 132
     ce0:	9f 4f       	sbci	r25, 0xFF	; 255
     ce2:	fc 01       	movw	r30, r24
     ce4:	10 83       	st	Z, r17
    _delay_us(80);                                  // 40uS delay (min)
// Display On/Off Control instruction
    lcd_write_instruction_4d(lcd_DisplayOff);        // turn display OFF
     ce6:	88 e0       	ldi	r24, 0x08	; 8
     ce8:	0e 94 9d 0c 	call	0x193a	; 0x193a <lcd_write_instruction_4d>
     cec:	9e 01       	movw	r18, r28
     cee:	23 58       	subi	r18, 0x83	; 131
     cf0:	3f 4f       	sbci	r19, 0xFF	; 255
     cf2:	80 e0       	ldi	r24, 0x00	; 0
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	a0 ea       	ldi	r26, 0xA0	; 160
     cf8:	b2 e4       	ldi	r27, 0x42	; 66
     cfa:	f9 01       	movw	r30, r18
     cfc:	80 83       	st	Z, r24
     cfe:	91 83       	std	Z+1, r25	; 0x01
     d00:	a2 83       	std	Z+2, r26	; 0x02
     d02:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
     d04:	8e 01       	movw	r16, r28
     d06:	0f 57       	subi	r16, 0x7F	; 127
     d08:	1f 4f       	sbci	r17, 0xFF	; 255
     d0a:	ce 01       	movw	r24, r28
     d0c:	83 58       	subi	r24, 0x83	; 131
     d0e:	9f 4f       	sbci	r25, 0xFF	; 255
     d10:	fc 01       	movw	r30, r24
     d12:	60 81       	ld	r22, Z
     d14:	71 81       	ldd	r23, Z+1	; 0x01
     d16:	82 81       	ldd	r24, Z+2	; 0x02
     d18:	93 81       	ldd	r25, Z+3	; 0x03
     d1a:	2b ea       	ldi	r18, 0xAB	; 171
     d1c:	3a ea       	ldi	r19, 0xAA	; 170
     d1e:	4a ea       	ldi	r20, 0xAA	; 170
     d20:	50 e4       	ldi	r21, 0x40	; 64
     d22:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <__mulsf3>
     d26:	dc 01       	movw	r26, r24
     d28:	cb 01       	movw	r24, r22
     d2a:	f8 01       	movw	r30, r16
     d2c:	80 83       	st	Z, r24
     d2e:	91 83       	std	Z+1, r25	; 0x01
     d30:	a2 83       	std	Z+2, r26	; 0x02
     d32:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     d34:	ce 01       	movw	r24, r28
     d36:	8f 57       	subi	r24, 0x7F	; 127
     d38:	9f 4f       	sbci	r25, 0xFF	; 255
     d3a:	11 e0       	ldi	r17, 0x01	; 1
     d3c:	fc 01       	movw	r30, r24
     d3e:	60 81       	ld	r22, Z
     d40:	71 81       	ldd	r23, Z+1	; 0x01
     d42:	82 81       	ldd	r24, Z+2	; 0x02
     d44:	93 81       	ldd	r25, Z+3	; 0x03
     d46:	20 e0       	ldi	r18, 0x00	; 0
     d48:	30 e0       	ldi	r19, 0x00	; 0
     d4a:	40 e8       	ldi	r20, 0x80	; 128
     d4c:	5f e3       	ldi	r21, 0x3F	; 63
     d4e:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <__ltsf2>
     d52:	88 23       	and	r24, r24
     d54:	0c f0       	brlt	.+2      	; 0xd58 <__stack+0x459>
     d56:	10 e0       	ldi	r17, 0x00	; 0
     d58:	11 23       	and	r17, r17
     d5a:	39 f0       	breq	.+14     	; 0xd6a <__stack+0x46b>
		__ticks = 1;
     d5c:	ce 01       	movw	r24, r28
     d5e:	8b 57       	subi	r24, 0x7B	; 123
     d60:	9f 4f       	sbci	r25, 0xFF	; 255
     d62:	21 e0       	ldi	r18, 0x01	; 1
     d64:	fc 01       	movw	r30, r24
     d66:	20 83       	st	Z, r18
     d68:	05 c1       	rjmp	.+522    	; 0xf74 <__stack+0x675>
	else if (__tmp > 255)
     d6a:	ce 01       	movw	r24, r28
     d6c:	8f 57       	subi	r24, 0x7F	; 127
     d6e:	9f 4f       	sbci	r25, 0xFF	; 255
     d70:	11 e0       	ldi	r17, 0x01	; 1
     d72:	fc 01       	movw	r30, r24
     d74:	60 81       	ld	r22, Z
     d76:	71 81       	ldd	r23, Z+1	; 0x01
     d78:	82 81       	ldd	r24, Z+2	; 0x02
     d7a:	93 81       	ldd	r25, Z+3	; 0x03
     d7c:	20 e0       	ldi	r18, 0x00	; 0
     d7e:	30 e0       	ldi	r19, 0x00	; 0
     d80:	4f e7       	ldi	r20, 0x7F	; 127
     d82:	53 e4       	ldi	r21, 0x43	; 67
     d84:	0e 94 0c 18 	call	0x3018	; 0x3018 <__gtsf2>
     d88:	18 16       	cp	r1, r24
     d8a:	0c f0       	brlt	.+2      	; 0xd8e <__stack+0x48f>
     d8c:	10 e0       	ldi	r17, 0x00	; 0
     d8e:	11 23       	and	r17, r17
     d90:	09 f4       	brne	.+2      	; 0xd94 <__stack+0x495>
     d92:	df c0       	rjmp	.+446    	; 0xf52 <__stack+0x653>
	{
		_delay_ms(__us / 1000.0);
     d94:	ce 01       	movw	r24, r28
     d96:	83 58       	subi	r24, 0x83	; 131
     d98:	9f 4f       	sbci	r25, 0xFF	; 255
     d9a:	fc 01       	movw	r30, r24
     d9c:	60 81       	ld	r22, Z
     d9e:	71 81       	ldd	r23, Z+1	; 0x01
     da0:	82 81       	ldd	r24, Z+2	; 0x02
     da2:	93 81       	ldd	r25, Z+3	; 0x03
     da4:	20 e0       	ldi	r18, 0x00	; 0
     da6:	30 e0       	ldi	r19, 0x00	; 0
     da8:	4a e7       	ldi	r20, 0x7A	; 122
     daa:	54 e4       	ldi	r21, 0x44	; 68
     dac:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <__divsf3>
     db0:	dc 01       	movw	r26, r24
     db2:	cb 01       	movw	r24, r22
     db4:	9e 01       	movw	r18, r28
     db6:	2a 57       	subi	r18, 0x7A	; 122
     db8:	3f 4f       	sbci	r19, 0xFF	; 255
     dba:	f9 01       	movw	r30, r18
     dbc:	80 83       	st	Z, r24
     dbe:	91 83       	std	Z+1, r25	; 0x01
     dc0:	a2 83       	std	Z+2, r26	; 0x02
     dc2:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     dc4:	8e 01       	movw	r16, r28
     dc6:	06 57       	subi	r16, 0x76	; 118
     dc8:	1f 4f       	sbci	r17, 0xFF	; 255
     dca:	ce 01       	movw	r24, r28
     dcc:	8a 57       	subi	r24, 0x7A	; 122
     dce:	9f 4f       	sbci	r25, 0xFF	; 255
     dd0:	fc 01       	movw	r30, r24
     dd2:	60 81       	ld	r22, Z
     dd4:	71 81       	ldd	r23, Z+1	; 0x01
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	20 e0       	ldi	r18, 0x00	; 0
     ddc:	30 e0       	ldi	r19, 0x00	; 0
     dde:	4a e7       	ldi	r20, 0x7A	; 122
     de0:	55 e4       	ldi	r21, 0x45	; 69
     de2:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <__mulsf3>
     de6:	dc 01       	movw	r26, r24
     de8:	cb 01       	movw	r24, r22
     dea:	f8 01       	movw	r30, r16
     dec:	80 83       	st	Z, r24
     dee:	91 83       	std	Z+1, r25	; 0x01
     df0:	a2 83       	std	Z+2, r26	; 0x02
     df2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     df4:	ce 01       	movw	r24, r28
     df6:	86 57       	subi	r24, 0x76	; 118
     df8:	9f 4f       	sbci	r25, 0xFF	; 255
     dfa:	11 e0       	ldi	r17, 0x01	; 1
     dfc:	fc 01       	movw	r30, r24
     dfe:	60 81       	ld	r22, Z
     e00:	71 81       	ldd	r23, Z+1	; 0x01
     e02:	82 81       	ldd	r24, Z+2	; 0x02
     e04:	93 81       	ldd	r25, Z+3	; 0x03
     e06:	20 e0       	ldi	r18, 0x00	; 0
     e08:	30 e0       	ldi	r19, 0x00	; 0
     e0a:	40 e8       	ldi	r20, 0x80	; 128
     e0c:	5f e3       	ldi	r21, 0x3F	; 63
     e0e:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <__ltsf2>
     e12:	88 23       	and	r24, r24
     e14:	0c f0       	brlt	.+2      	; 0xe18 <__stack+0x519>
     e16:	10 e0       	ldi	r17, 0x00	; 0
     e18:	11 23       	and	r17, r17
     e1a:	49 f0       	breq	.+18     	; 0xe2e <__stack+0x52f>
		__ticks = 1;
     e1c:	ce 01       	movw	r24, r28
     e1e:	82 57       	subi	r24, 0x72	; 114
     e20:	9f 4f       	sbci	r25, 0xFF	; 255
     e22:	21 e0       	ldi	r18, 0x01	; 1
     e24:	30 e0       	ldi	r19, 0x00	; 0
     e26:	fc 01       	movw	r30, r24
     e28:	31 83       	std	Z+1, r19	; 0x01
     e2a:	20 83       	st	Z, r18
     e2c:	74 c0       	rjmp	.+232    	; 0xf16 <__stack+0x617>
	else if (__tmp > 65535)
     e2e:	ce 01       	movw	r24, r28
     e30:	86 57       	subi	r24, 0x76	; 118
     e32:	9f 4f       	sbci	r25, 0xFF	; 255
     e34:	11 e0       	ldi	r17, 0x01	; 1
     e36:	fc 01       	movw	r30, r24
     e38:	60 81       	ld	r22, Z
     e3a:	71 81       	ldd	r23, Z+1	; 0x01
     e3c:	82 81       	ldd	r24, Z+2	; 0x02
     e3e:	93 81       	ldd	r25, Z+3	; 0x03
     e40:	20 e0       	ldi	r18, 0x00	; 0
     e42:	3f ef       	ldi	r19, 0xFF	; 255
     e44:	4f e7       	ldi	r20, 0x7F	; 127
     e46:	57 e4       	ldi	r21, 0x47	; 71
     e48:	0e 94 0c 18 	call	0x3018	; 0x3018 <__gtsf2>
     e4c:	18 16       	cp	r1, r24
     e4e:	0c f0       	brlt	.+2      	; 0xe52 <__stack+0x553>
     e50:	10 e0       	ldi	r17, 0x00	; 0
     e52:	11 23       	and	r17, r17
     e54:	09 f4       	brne	.+2      	; 0xe58 <__stack+0x559>
     e56:	4d c0       	rjmp	.+154    	; 0xef2 <__stack+0x5f3>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e58:	ce 01       	movw	r24, r28
     e5a:	8a 57       	subi	r24, 0x7A	; 122
     e5c:	9f 4f       	sbci	r25, 0xFF	; 255
     e5e:	fc 01       	movw	r30, r24
     e60:	60 81       	ld	r22, Z
     e62:	71 81       	ldd	r23, Z+1	; 0x01
     e64:	82 81       	ldd	r24, Z+2	; 0x02
     e66:	93 81       	ldd	r25, Z+3	; 0x03
     e68:	20 e0       	ldi	r18, 0x00	; 0
     e6a:	30 e0       	ldi	r19, 0x00	; 0
     e6c:	40 e2       	ldi	r20, 0x20	; 32
     e6e:	51 e4       	ldi	r21, 0x41	; 65
     e70:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <__mulsf3>
     e74:	dc 01       	movw	r26, r24
     e76:	cb 01       	movw	r24, r22
     e78:	8e 01       	movw	r16, r28
     e7a:	02 57       	subi	r16, 0x72	; 114
     e7c:	1f 4f       	sbci	r17, 0xFF	; 255
     e7e:	bc 01       	movw	r22, r24
     e80:	cd 01       	movw	r24, r26
     e82:	0e 94 90 14 	call	0x2920	; 0x2920 <__fixunssfsi>
     e86:	dc 01       	movw	r26, r24
     e88:	cb 01       	movw	r24, r22
     e8a:	f8 01       	movw	r30, r16
     e8c:	91 83       	std	Z+1, r25	; 0x01
     e8e:	80 83       	st	Z, r24
     e90:	27 c0       	rjmp	.+78     	; 0xee0 <__stack+0x5e1>
     e92:	ce 01       	movw	r24, r28
     e94:	80 57       	subi	r24, 0x70	; 112
     e96:	9f 4f       	sbci	r25, 0xFF	; 255
     e98:	20 e9       	ldi	r18, 0x90	; 144
     e9a:	31 e0       	ldi	r19, 0x01	; 1
     e9c:	fc 01       	movw	r30, r24
     e9e:	31 83       	std	Z+1, r19	; 0x01
     ea0:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     ea2:	ce 01       	movw	r24, r28
     ea4:	80 57       	subi	r24, 0x70	; 112
     ea6:	9f 4f       	sbci	r25, 0xFF	; 255
     ea8:	fc 01       	movw	r30, r24
     eaa:	80 81       	ld	r24, Z
     eac:	91 81       	ldd	r25, Z+1	; 0x01
     eae:	8c 01       	movw	r16, r24
     eb0:	c8 01       	movw	r24, r16
     eb2:	01 97       	sbiw	r24, 0x01	; 1
     eb4:	f1 f7       	brne	.-4      	; 0xeb2 <__stack+0x5b3>
     eb6:	8c 01       	movw	r16, r24
     eb8:	ce 01       	movw	r24, r28
     eba:	80 57       	subi	r24, 0x70	; 112
     ebc:	9f 4f       	sbci	r25, 0xFF	; 255
     ebe:	fc 01       	movw	r30, r24
     ec0:	11 83       	std	Z+1, r17	; 0x01
     ec2:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ec4:	ce 01       	movw	r24, r28
     ec6:	82 57       	subi	r24, 0x72	; 114
     ec8:	9f 4f       	sbci	r25, 0xFF	; 255
     eca:	9e 01       	movw	r18, r28
     ecc:	22 57       	subi	r18, 0x72	; 114
     ece:	3f 4f       	sbci	r19, 0xFF	; 255
     ed0:	f9 01       	movw	r30, r18
     ed2:	20 81       	ld	r18, Z
     ed4:	31 81       	ldd	r19, Z+1	; 0x01
     ed6:	21 50       	subi	r18, 0x01	; 1
     ed8:	30 40       	sbci	r19, 0x00	; 0
     eda:	fc 01       	movw	r30, r24
     edc:	31 83       	std	Z+1, r19	; 0x01
     ede:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ee0:	ce 01       	movw	r24, r28
     ee2:	82 57       	subi	r24, 0x72	; 114
     ee4:	9f 4f       	sbci	r25, 0xFF	; 255
     ee6:	fc 01       	movw	r30, r24
     ee8:	80 81       	ld	r24, Z
     eea:	91 81       	ldd	r25, Z+1	; 0x01
     eec:	00 97       	sbiw	r24, 0x00	; 0
     eee:	89 f6       	brne	.-94     	; 0xe92 <__stack+0x593>
     ef0:	58 c0       	rjmp	.+176    	; 0xfa2 <__stack+0x6a3>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ef2:	8e 01       	movw	r16, r28
     ef4:	02 57       	subi	r16, 0x72	; 114
     ef6:	1f 4f       	sbci	r17, 0xFF	; 255
     ef8:	ce 01       	movw	r24, r28
     efa:	86 57       	subi	r24, 0x76	; 118
     efc:	9f 4f       	sbci	r25, 0xFF	; 255
     efe:	fc 01       	movw	r30, r24
     f00:	60 81       	ld	r22, Z
     f02:	71 81       	ldd	r23, Z+1	; 0x01
     f04:	82 81       	ldd	r24, Z+2	; 0x02
     f06:	93 81       	ldd	r25, Z+3	; 0x03
     f08:	0e 94 90 14 	call	0x2920	; 0x2920 <__fixunssfsi>
     f0c:	dc 01       	movw	r26, r24
     f0e:	cb 01       	movw	r24, r22
     f10:	f8 01       	movw	r30, r16
     f12:	91 83       	std	Z+1, r25	; 0x01
     f14:	80 83       	st	Z, r24
     f16:	ce 01       	movw	r24, r28
     f18:	8e 56       	subi	r24, 0x6E	; 110
     f1a:	9f 4f       	sbci	r25, 0xFF	; 255
     f1c:	9e 01       	movw	r18, r28
     f1e:	22 57       	subi	r18, 0x72	; 114
     f20:	3f 4f       	sbci	r19, 0xFF	; 255
     f22:	f9 01       	movw	r30, r18
     f24:	20 81       	ld	r18, Z
     f26:	31 81       	ldd	r19, Z+1	; 0x01
     f28:	fc 01       	movw	r30, r24
     f2a:	31 83       	std	Z+1, r19	; 0x01
     f2c:	20 83       	st	Z, r18
     f2e:	ce 01       	movw	r24, r28
     f30:	8e 56       	subi	r24, 0x6E	; 110
     f32:	9f 4f       	sbci	r25, 0xFF	; 255
     f34:	fc 01       	movw	r30, r24
     f36:	80 81       	ld	r24, Z
     f38:	91 81       	ldd	r25, Z+1	; 0x01
     f3a:	8c 01       	movw	r16, r24
     f3c:	c8 01       	movw	r24, r16
     f3e:	01 97       	sbiw	r24, 0x01	; 1
     f40:	f1 f7       	brne	.-4      	; 0xf3e <__stack+0x63f>
     f42:	8c 01       	movw	r16, r24
     f44:	ce 01       	movw	r24, r28
     f46:	8e 56       	subi	r24, 0x6E	; 110
     f48:	9f 4f       	sbci	r25, 0xFF	; 255
     f4a:	fc 01       	movw	r30, r24
     f4c:	11 83       	std	Z+1, r17	; 0x01
     f4e:	00 83       	st	Z, r16
     f50:	28 c0       	rjmp	.+80     	; 0xfa2 <__stack+0x6a3>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     f52:	8e 01       	movw	r16, r28
     f54:	0b 57       	subi	r16, 0x7B	; 123
     f56:	1f 4f       	sbci	r17, 0xFF	; 255
     f58:	ce 01       	movw	r24, r28
     f5a:	8f 57       	subi	r24, 0x7F	; 127
     f5c:	9f 4f       	sbci	r25, 0xFF	; 255
     f5e:	fc 01       	movw	r30, r24
     f60:	60 81       	ld	r22, Z
     f62:	71 81       	ldd	r23, Z+1	; 0x01
     f64:	82 81       	ldd	r24, Z+2	; 0x02
     f66:	93 81       	ldd	r25, Z+3	; 0x03
     f68:	0e 94 90 14 	call	0x2920	; 0x2920 <__fixunssfsi>
     f6c:	dc 01       	movw	r26, r24
     f6e:	cb 01       	movw	r24, r22
     f70:	f8 01       	movw	r30, r16
     f72:	80 83       	st	Z, r24
     f74:	ce 01       	movw	r24, r28
     f76:	8c 56       	subi	r24, 0x6C	; 108
     f78:	9f 4f       	sbci	r25, 0xFF	; 255
     f7a:	9e 01       	movw	r18, r28
     f7c:	2b 57       	subi	r18, 0x7B	; 123
     f7e:	3f 4f       	sbci	r19, 0xFF	; 255
     f80:	f9 01       	movw	r30, r18
     f82:	20 81       	ld	r18, Z
     f84:	fc 01       	movw	r30, r24
     f86:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     f88:	ce 01       	movw	r24, r28
     f8a:	8c 56       	subi	r24, 0x6C	; 108
     f8c:	9f 4f       	sbci	r25, 0xFF	; 255
     f8e:	fc 01       	movw	r30, r24
     f90:	80 81       	ld	r24, Z
     f92:	18 2f       	mov	r17, r24
     f94:	1a 95       	dec	r17
     f96:	f1 f7       	brne	.-4      	; 0xf94 <__stack+0x695>
     f98:	ce 01       	movw	r24, r28
     f9a:	8c 56       	subi	r24, 0x6C	; 108
     f9c:	9f 4f       	sbci	r25, 0xFF	; 255
     f9e:	fc 01       	movw	r30, r24
     fa0:	10 83       	st	Z, r17
    _delay_us(80);                                  // 40uS delay (min)

// Clear Display instruction
    lcd_write_instruction_4d(lcd_Clear);             // clear display RAM
     fa2:	81 e0       	ldi	r24, 0x01	; 1
     fa4:	0e 94 9d 0c 	call	0x193a	; 0x193a <lcd_write_instruction_4d>
     fa8:	9e 01       	movw	r18, r28
     faa:	2b 56       	subi	r18, 0x6B	; 107
     fac:	3f 4f       	sbci	r19, 0xFF	; 255
     fae:	80 e0       	ldi	r24, 0x00	; 0
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	a0 e8       	ldi	r26, 0x80	; 128
     fb4:	b0 e4       	ldi	r27, 0x40	; 64
     fb6:	f9 01       	movw	r30, r18
     fb8:	80 83       	st	Z, r24
     fba:	91 83       	std	Z+1, r25	; 0x01
     fbc:	a2 83       	std	Z+2, r26	; 0x02
     fbe:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     fc0:	8e 01       	movw	r16, r28
     fc2:	07 56       	subi	r16, 0x67	; 103
     fc4:	1f 4f       	sbci	r17, 0xFF	; 255
     fc6:	ce 01       	movw	r24, r28
     fc8:	8b 56       	subi	r24, 0x6B	; 107
     fca:	9f 4f       	sbci	r25, 0xFF	; 255
     fcc:	fc 01       	movw	r30, r24
     fce:	60 81       	ld	r22, Z
     fd0:	71 81       	ldd	r23, Z+1	; 0x01
     fd2:	82 81       	ldd	r24, Z+2	; 0x02
     fd4:	93 81       	ldd	r25, Z+3	; 0x03
     fd6:	20 e0       	ldi	r18, 0x00	; 0
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	4a e7       	ldi	r20, 0x7A	; 122
     fdc:	55 e4       	ldi	r21, 0x45	; 69
     fde:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <__mulsf3>
     fe2:	dc 01       	movw	r26, r24
     fe4:	cb 01       	movw	r24, r22
     fe6:	f8 01       	movw	r30, r16
     fe8:	80 83       	st	Z, r24
     fea:	91 83       	std	Z+1, r25	; 0x01
     fec:	a2 83       	std	Z+2, r26	; 0x02
     fee:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     ff0:	ce 01       	movw	r24, r28
     ff2:	87 56       	subi	r24, 0x67	; 103
     ff4:	9f 4f       	sbci	r25, 0xFF	; 255
     ff6:	11 e0       	ldi	r17, 0x01	; 1
     ff8:	fc 01       	movw	r30, r24
     ffa:	60 81       	ld	r22, Z
     ffc:	71 81       	ldd	r23, Z+1	; 0x01
     ffe:	82 81       	ldd	r24, Z+2	; 0x02
    1000:	93 81       	ldd	r25, Z+3	; 0x03
    1002:	20 e0       	ldi	r18, 0x00	; 0
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	40 e8       	ldi	r20, 0x80	; 128
    1008:	5f e3       	ldi	r21, 0x3F	; 63
    100a:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <__ltsf2>
    100e:	88 23       	and	r24, r24
    1010:	0c f0       	brlt	.+2      	; 0x1014 <__stack+0x715>
    1012:	10 e0       	ldi	r17, 0x00	; 0
    1014:	11 23       	and	r17, r17
    1016:	49 f0       	breq	.+18     	; 0x102a <__stack+0x72b>
		__ticks = 1;
    1018:	ce 01       	movw	r24, r28
    101a:	83 56       	subi	r24, 0x63	; 99
    101c:	9f 4f       	sbci	r25, 0xFF	; 255
    101e:	21 e0       	ldi	r18, 0x01	; 1
    1020:	30 e0       	ldi	r19, 0x00	; 0
    1022:	fc 01       	movw	r30, r24
    1024:	31 83       	std	Z+1, r19	; 0x01
    1026:	20 83       	st	Z, r18
    1028:	74 c0       	rjmp	.+232    	; 0x1112 <__stack+0x813>
	else if (__tmp > 65535)
    102a:	ce 01       	movw	r24, r28
    102c:	87 56       	subi	r24, 0x67	; 103
    102e:	9f 4f       	sbci	r25, 0xFF	; 255
    1030:	11 e0       	ldi	r17, 0x01	; 1
    1032:	fc 01       	movw	r30, r24
    1034:	60 81       	ld	r22, Z
    1036:	71 81       	ldd	r23, Z+1	; 0x01
    1038:	82 81       	ldd	r24, Z+2	; 0x02
    103a:	93 81       	ldd	r25, Z+3	; 0x03
    103c:	20 e0       	ldi	r18, 0x00	; 0
    103e:	3f ef       	ldi	r19, 0xFF	; 255
    1040:	4f e7       	ldi	r20, 0x7F	; 127
    1042:	57 e4       	ldi	r21, 0x47	; 71
    1044:	0e 94 0c 18 	call	0x3018	; 0x3018 <__gtsf2>
    1048:	18 16       	cp	r1, r24
    104a:	0c f0       	brlt	.+2      	; 0x104e <__stack+0x74f>
    104c:	10 e0       	ldi	r17, 0x00	; 0
    104e:	11 23       	and	r17, r17
    1050:	09 f4       	brne	.+2      	; 0x1054 <__stack+0x755>
    1052:	4d c0       	rjmp	.+154    	; 0x10ee <__stack+0x7ef>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1054:	ce 01       	movw	r24, r28
    1056:	8b 56       	subi	r24, 0x6B	; 107
    1058:	9f 4f       	sbci	r25, 0xFF	; 255
    105a:	fc 01       	movw	r30, r24
    105c:	60 81       	ld	r22, Z
    105e:	71 81       	ldd	r23, Z+1	; 0x01
    1060:	82 81       	ldd	r24, Z+2	; 0x02
    1062:	93 81       	ldd	r25, Z+3	; 0x03
    1064:	20 e0       	ldi	r18, 0x00	; 0
    1066:	30 e0       	ldi	r19, 0x00	; 0
    1068:	40 e2       	ldi	r20, 0x20	; 32
    106a:	51 e4       	ldi	r21, 0x41	; 65
    106c:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <__mulsf3>
    1070:	dc 01       	movw	r26, r24
    1072:	cb 01       	movw	r24, r22
    1074:	8e 01       	movw	r16, r28
    1076:	03 56       	subi	r16, 0x63	; 99
    1078:	1f 4f       	sbci	r17, 0xFF	; 255
    107a:	bc 01       	movw	r22, r24
    107c:	cd 01       	movw	r24, r26
    107e:	0e 94 90 14 	call	0x2920	; 0x2920 <__fixunssfsi>
    1082:	dc 01       	movw	r26, r24
    1084:	cb 01       	movw	r24, r22
    1086:	f8 01       	movw	r30, r16
    1088:	91 83       	std	Z+1, r25	; 0x01
    108a:	80 83       	st	Z, r24
    108c:	27 c0       	rjmp	.+78     	; 0x10dc <__stack+0x7dd>
    108e:	ce 01       	movw	r24, r28
    1090:	81 56       	subi	r24, 0x61	; 97
    1092:	9f 4f       	sbci	r25, 0xFF	; 255
    1094:	20 e9       	ldi	r18, 0x90	; 144
    1096:	31 e0       	ldi	r19, 0x01	; 1
    1098:	fc 01       	movw	r30, r24
    109a:	31 83       	std	Z+1, r19	; 0x01
    109c:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    109e:	ce 01       	movw	r24, r28
    10a0:	81 56       	subi	r24, 0x61	; 97
    10a2:	9f 4f       	sbci	r25, 0xFF	; 255
    10a4:	fc 01       	movw	r30, r24
    10a6:	80 81       	ld	r24, Z
    10a8:	91 81       	ldd	r25, Z+1	; 0x01
    10aa:	8c 01       	movw	r16, r24
    10ac:	c8 01       	movw	r24, r16
    10ae:	01 97       	sbiw	r24, 0x01	; 1
    10b0:	f1 f7       	brne	.-4      	; 0x10ae <__stack+0x7af>
    10b2:	8c 01       	movw	r16, r24
    10b4:	ce 01       	movw	r24, r28
    10b6:	81 56       	subi	r24, 0x61	; 97
    10b8:	9f 4f       	sbci	r25, 0xFF	; 255
    10ba:	fc 01       	movw	r30, r24
    10bc:	11 83       	std	Z+1, r17	; 0x01
    10be:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10c0:	ce 01       	movw	r24, r28
    10c2:	83 56       	subi	r24, 0x63	; 99
    10c4:	9f 4f       	sbci	r25, 0xFF	; 255
    10c6:	9e 01       	movw	r18, r28
    10c8:	23 56       	subi	r18, 0x63	; 99
    10ca:	3f 4f       	sbci	r19, 0xFF	; 255
    10cc:	f9 01       	movw	r30, r18
    10ce:	20 81       	ld	r18, Z
    10d0:	31 81       	ldd	r19, Z+1	; 0x01
    10d2:	21 50       	subi	r18, 0x01	; 1
    10d4:	30 40       	sbci	r19, 0x00	; 0
    10d6:	fc 01       	movw	r30, r24
    10d8:	31 83       	std	Z+1, r19	; 0x01
    10da:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10dc:	ce 01       	movw	r24, r28
    10de:	83 56       	subi	r24, 0x63	; 99
    10e0:	9f 4f       	sbci	r25, 0xFF	; 255
    10e2:	fc 01       	movw	r30, r24
    10e4:	80 81       	ld	r24, Z
    10e6:	91 81       	ldd	r25, Z+1	; 0x01
    10e8:	00 97       	sbiw	r24, 0x00	; 0
    10ea:	89 f6       	brne	.-94     	; 0x108e <__stack+0x78f>
    10ec:	2f c0       	rjmp	.+94     	; 0x114c <__stack+0x84d>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10ee:	8e 01       	movw	r16, r28
    10f0:	03 56       	subi	r16, 0x63	; 99
    10f2:	1f 4f       	sbci	r17, 0xFF	; 255
    10f4:	ce 01       	movw	r24, r28
    10f6:	87 56       	subi	r24, 0x67	; 103
    10f8:	9f 4f       	sbci	r25, 0xFF	; 255
    10fa:	fc 01       	movw	r30, r24
    10fc:	60 81       	ld	r22, Z
    10fe:	71 81       	ldd	r23, Z+1	; 0x01
    1100:	82 81       	ldd	r24, Z+2	; 0x02
    1102:	93 81       	ldd	r25, Z+3	; 0x03
    1104:	0e 94 90 14 	call	0x2920	; 0x2920 <__fixunssfsi>
    1108:	dc 01       	movw	r26, r24
    110a:	cb 01       	movw	r24, r22
    110c:	f8 01       	movw	r30, r16
    110e:	91 83       	std	Z+1, r25	; 0x01
    1110:	80 83       	st	Z, r24
    1112:	ce 01       	movw	r24, r28
    1114:	8f 55       	subi	r24, 0x5F	; 95
    1116:	9f 4f       	sbci	r25, 0xFF	; 255
    1118:	9e 01       	movw	r18, r28
    111a:	23 56       	subi	r18, 0x63	; 99
    111c:	3f 4f       	sbci	r19, 0xFF	; 255
    111e:	f9 01       	movw	r30, r18
    1120:	20 81       	ld	r18, Z
    1122:	31 81       	ldd	r19, Z+1	; 0x01
    1124:	fc 01       	movw	r30, r24
    1126:	31 83       	std	Z+1, r19	; 0x01
    1128:	20 83       	st	Z, r18
    112a:	ce 01       	movw	r24, r28
    112c:	8f 55       	subi	r24, 0x5F	; 95
    112e:	9f 4f       	sbci	r25, 0xFF	; 255
    1130:	fc 01       	movw	r30, r24
    1132:	80 81       	ld	r24, Z
    1134:	91 81       	ldd	r25, Z+1	; 0x01
    1136:	8c 01       	movw	r16, r24
    1138:	c8 01       	movw	r24, r16
    113a:	01 97       	sbiw	r24, 0x01	; 1
    113c:	f1 f7       	brne	.-4      	; 0x113a <__stack+0x83b>
    113e:	8c 01       	movw	r16, r24
    1140:	ce 01       	movw	r24, r28
    1142:	8f 55       	subi	r24, 0x5F	; 95
    1144:	9f 4f       	sbci	r25, 0xFF	; 255
    1146:	fc 01       	movw	r30, r24
    1148:	11 83       	std	Z+1, r17	; 0x01
    114a:	00 83       	st	Z, r16
    _delay_ms(4);                                   // 1.64 mS delay (min)

// ; Entry Mode Set instruction
    lcd_write_instruction_4d(lcd_EntryMode);         // set desired shift characteristics
    114c:	86 e0       	ldi	r24, 0x06	; 6
    114e:	0e 94 9d 0c 	call	0x193a	; 0x193a <lcd_write_instruction_4d>
    1152:	9e 01       	movw	r18, r28
    1154:	2d 55       	subi	r18, 0x5D	; 93
    1156:	3f 4f       	sbci	r19, 0xFF	; 255
    1158:	80 e0       	ldi	r24, 0x00	; 0
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	a0 ea       	ldi	r26, 0xA0	; 160
    115e:	b2 e4       	ldi	r27, 0x42	; 66
    1160:	f9 01       	movw	r30, r18
    1162:	80 83       	st	Z, r24
    1164:	91 83       	std	Z+1, r25	; 0x01
    1166:	a2 83       	std	Z+2, r26	; 0x02
    1168:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
    116a:	8e 01       	movw	r16, r28
    116c:	09 55       	subi	r16, 0x59	; 89
    116e:	1f 4f       	sbci	r17, 0xFF	; 255
    1170:	ce 01       	movw	r24, r28
    1172:	8d 55       	subi	r24, 0x5D	; 93
    1174:	9f 4f       	sbci	r25, 0xFF	; 255
    1176:	fc 01       	movw	r30, r24
    1178:	60 81       	ld	r22, Z
    117a:	71 81       	ldd	r23, Z+1	; 0x01
    117c:	82 81       	ldd	r24, Z+2	; 0x02
    117e:	93 81       	ldd	r25, Z+3	; 0x03
    1180:	2b ea       	ldi	r18, 0xAB	; 171
    1182:	3a ea       	ldi	r19, 0xAA	; 170
    1184:	4a ea       	ldi	r20, 0xAA	; 170
    1186:	50 e4       	ldi	r21, 0x40	; 64
    1188:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <__mulsf3>
    118c:	dc 01       	movw	r26, r24
    118e:	cb 01       	movw	r24, r22
    1190:	f8 01       	movw	r30, r16
    1192:	80 83       	st	Z, r24
    1194:	91 83       	std	Z+1, r25	; 0x01
    1196:	a2 83       	std	Z+2, r26	; 0x02
    1198:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    119a:	ce 01       	movw	r24, r28
    119c:	89 55       	subi	r24, 0x59	; 89
    119e:	9f 4f       	sbci	r25, 0xFF	; 255
    11a0:	11 e0       	ldi	r17, 0x01	; 1
    11a2:	fc 01       	movw	r30, r24
    11a4:	60 81       	ld	r22, Z
    11a6:	71 81       	ldd	r23, Z+1	; 0x01
    11a8:	82 81       	ldd	r24, Z+2	; 0x02
    11aa:	93 81       	ldd	r25, Z+3	; 0x03
    11ac:	20 e0       	ldi	r18, 0x00	; 0
    11ae:	30 e0       	ldi	r19, 0x00	; 0
    11b0:	40 e8       	ldi	r20, 0x80	; 128
    11b2:	5f e3       	ldi	r21, 0x3F	; 63
    11b4:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <__ltsf2>
    11b8:	88 23       	and	r24, r24
    11ba:	0c f0       	brlt	.+2      	; 0x11be <__stack+0x8bf>
    11bc:	10 e0       	ldi	r17, 0x00	; 0
    11be:	11 23       	and	r17, r17
    11c0:	39 f0       	breq	.+14     	; 0x11d0 <__stack+0x8d1>
		__ticks = 1;
    11c2:	ce 01       	movw	r24, r28
    11c4:	85 55       	subi	r24, 0x55	; 85
    11c6:	9f 4f       	sbci	r25, 0xFF	; 255
    11c8:	21 e0       	ldi	r18, 0x01	; 1
    11ca:	fc 01       	movw	r30, r24
    11cc:	20 83       	st	Z, r18
    11ce:	05 c1       	rjmp	.+522    	; 0x13da <__stack+0xadb>
	else if (__tmp > 255)
    11d0:	ce 01       	movw	r24, r28
    11d2:	89 55       	subi	r24, 0x59	; 89
    11d4:	9f 4f       	sbci	r25, 0xFF	; 255
    11d6:	11 e0       	ldi	r17, 0x01	; 1
    11d8:	fc 01       	movw	r30, r24
    11da:	60 81       	ld	r22, Z
    11dc:	71 81       	ldd	r23, Z+1	; 0x01
    11de:	82 81       	ldd	r24, Z+2	; 0x02
    11e0:	93 81       	ldd	r25, Z+3	; 0x03
    11e2:	20 e0       	ldi	r18, 0x00	; 0
    11e4:	30 e0       	ldi	r19, 0x00	; 0
    11e6:	4f e7       	ldi	r20, 0x7F	; 127
    11e8:	53 e4       	ldi	r21, 0x43	; 67
    11ea:	0e 94 0c 18 	call	0x3018	; 0x3018 <__gtsf2>
    11ee:	18 16       	cp	r1, r24
    11f0:	0c f0       	brlt	.+2      	; 0x11f4 <__stack+0x8f5>
    11f2:	10 e0       	ldi	r17, 0x00	; 0
    11f4:	11 23       	and	r17, r17
    11f6:	09 f4       	brne	.+2      	; 0x11fa <__stack+0x8fb>
    11f8:	df c0       	rjmp	.+446    	; 0x13b8 <__stack+0xab9>
	{
		_delay_ms(__us / 1000.0);
    11fa:	ce 01       	movw	r24, r28
    11fc:	8d 55       	subi	r24, 0x5D	; 93
    11fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1200:	fc 01       	movw	r30, r24
    1202:	60 81       	ld	r22, Z
    1204:	71 81       	ldd	r23, Z+1	; 0x01
    1206:	82 81       	ldd	r24, Z+2	; 0x02
    1208:	93 81       	ldd	r25, Z+3	; 0x03
    120a:	20 e0       	ldi	r18, 0x00	; 0
    120c:	30 e0       	ldi	r19, 0x00	; 0
    120e:	4a e7       	ldi	r20, 0x7A	; 122
    1210:	54 e4       	ldi	r21, 0x44	; 68
    1212:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <__divsf3>
    1216:	dc 01       	movw	r26, r24
    1218:	cb 01       	movw	r24, r22
    121a:	9e 01       	movw	r18, r28
    121c:	24 55       	subi	r18, 0x54	; 84
    121e:	3f 4f       	sbci	r19, 0xFF	; 255
    1220:	f9 01       	movw	r30, r18
    1222:	80 83       	st	Z, r24
    1224:	91 83       	std	Z+1, r25	; 0x01
    1226:	a2 83       	std	Z+2, r26	; 0x02
    1228:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    122a:	8e 01       	movw	r16, r28
    122c:	00 55       	subi	r16, 0x50	; 80
    122e:	1f 4f       	sbci	r17, 0xFF	; 255
    1230:	ce 01       	movw	r24, r28
    1232:	84 55       	subi	r24, 0x54	; 84
    1234:	9f 4f       	sbci	r25, 0xFF	; 255
    1236:	fc 01       	movw	r30, r24
    1238:	60 81       	ld	r22, Z
    123a:	71 81       	ldd	r23, Z+1	; 0x01
    123c:	82 81       	ldd	r24, Z+2	; 0x02
    123e:	93 81       	ldd	r25, Z+3	; 0x03
    1240:	20 e0       	ldi	r18, 0x00	; 0
    1242:	30 e0       	ldi	r19, 0x00	; 0
    1244:	4a e7       	ldi	r20, 0x7A	; 122
    1246:	55 e4       	ldi	r21, 0x45	; 69
    1248:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <__mulsf3>
    124c:	dc 01       	movw	r26, r24
    124e:	cb 01       	movw	r24, r22
    1250:	f8 01       	movw	r30, r16
    1252:	80 83       	st	Z, r24
    1254:	91 83       	std	Z+1, r25	; 0x01
    1256:	a2 83       	std	Z+2, r26	; 0x02
    1258:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    125a:	ce 01       	movw	r24, r28
    125c:	80 55       	subi	r24, 0x50	; 80
    125e:	9f 4f       	sbci	r25, 0xFF	; 255
    1260:	11 e0       	ldi	r17, 0x01	; 1
    1262:	fc 01       	movw	r30, r24
    1264:	60 81       	ld	r22, Z
    1266:	71 81       	ldd	r23, Z+1	; 0x01
    1268:	82 81       	ldd	r24, Z+2	; 0x02
    126a:	93 81       	ldd	r25, Z+3	; 0x03
    126c:	20 e0       	ldi	r18, 0x00	; 0
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	40 e8       	ldi	r20, 0x80	; 128
    1272:	5f e3       	ldi	r21, 0x3F	; 63
    1274:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <__ltsf2>
    1278:	88 23       	and	r24, r24
    127a:	0c f0       	brlt	.+2      	; 0x127e <__stack+0x97f>
    127c:	10 e0       	ldi	r17, 0x00	; 0
    127e:	11 23       	and	r17, r17
    1280:	49 f0       	breq	.+18     	; 0x1294 <__stack+0x995>
		__ticks = 1;
    1282:	ce 01       	movw	r24, r28
    1284:	8c 54       	subi	r24, 0x4C	; 76
    1286:	9f 4f       	sbci	r25, 0xFF	; 255
    1288:	21 e0       	ldi	r18, 0x01	; 1
    128a:	30 e0       	ldi	r19, 0x00	; 0
    128c:	fc 01       	movw	r30, r24
    128e:	31 83       	std	Z+1, r19	; 0x01
    1290:	20 83       	st	Z, r18
    1292:	74 c0       	rjmp	.+232    	; 0x137c <__stack+0xa7d>
	else if (__tmp > 65535)
    1294:	ce 01       	movw	r24, r28
    1296:	80 55       	subi	r24, 0x50	; 80
    1298:	9f 4f       	sbci	r25, 0xFF	; 255
    129a:	11 e0       	ldi	r17, 0x01	; 1
    129c:	fc 01       	movw	r30, r24
    129e:	60 81       	ld	r22, Z
    12a0:	71 81       	ldd	r23, Z+1	; 0x01
    12a2:	82 81       	ldd	r24, Z+2	; 0x02
    12a4:	93 81       	ldd	r25, Z+3	; 0x03
    12a6:	20 e0       	ldi	r18, 0x00	; 0
    12a8:	3f ef       	ldi	r19, 0xFF	; 255
    12aa:	4f e7       	ldi	r20, 0x7F	; 127
    12ac:	57 e4       	ldi	r21, 0x47	; 71
    12ae:	0e 94 0c 18 	call	0x3018	; 0x3018 <__gtsf2>
    12b2:	18 16       	cp	r1, r24
    12b4:	0c f0       	brlt	.+2      	; 0x12b8 <__stack+0x9b9>
    12b6:	10 e0       	ldi	r17, 0x00	; 0
    12b8:	11 23       	and	r17, r17
    12ba:	09 f4       	brne	.+2      	; 0x12be <__stack+0x9bf>
    12bc:	4d c0       	rjmp	.+154    	; 0x1358 <__stack+0xa59>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12be:	ce 01       	movw	r24, r28
    12c0:	84 55       	subi	r24, 0x54	; 84
    12c2:	9f 4f       	sbci	r25, 0xFF	; 255
    12c4:	fc 01       	movw	r30, r24
    12c6:	60 81       	ld	r22, Z
    12c8:	71 81       	ldd	r23, Z+1	; 0x01
    12ca:	82 81       	ldd	r24, Z+2	; 0x02
    12cc:	93 81       	ldd	r25, Z+3	; 0x03
    12ce:	20 e0       	ldi	r18, 0x00	; 0
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	40 e2       	ldi	r20, 0x20	; 32
    12d4:	51 e4       	ldi	r21, 0x41	; 65
    12d6:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <__mulsf3>
    12da:	dc 01       	movw	r26, r24
    12dc:	cb 01       	movw	r24, r22
    12de:	8e 01       	movw	r16, r28
    12e0:	0c 54       	subi	r16, 0x4C	; 76
    12e2:	1f 4f       	sbci	r17, 0xFF	; 255
    12e4:	bc 01       	movw	r22, r24
    12e6:	cd 01       	movw	r24, r26
    12e8:	0e 94 90 14 	call	0x2920	; 0x2920 <__fixunssfsi>
    12ec:	dc 01       	movw	r26, r24
    12ee:	cb 01       	movw	r24, r22
    12f0:	f8 01       	movw	r30, r16
    12f2:	91 83       	std	Z+1, r25	; 0x01
    12f4:	80 83       	st	Z, r24
    12f6:	27 c0       	rjmp	.+78     	; 0x1346 <__stack+0xa47>
    12f8:	ce 01       	movw	r24, r28
    12fa:	8a 54       	subi	r24, 0x4A	; 74
    12fc:	9f 4f       	sbci	r25, 0xFF	; 255
    12fe:	20 e9       	ldi	r18, 0x90	; 144
    1300:	31 e0       	ldi	r19, 0x01	; 1
    1302:	fc 01       	movw	r30, r24
    1304:	31 83       	std	Z+1, r19	; 0x01
    1306:	20 83       	st	Z, r18
    1308:	ce 01       	movw	r24, r28
    130a:	8a 54       	subi	r24, 0x4A	; 74
    130c:	9f 4f       	sbci	r25, 0xFF	; 255
    130e:	fc 01       	movw	r30, r24
    1310:	80 81       	ld	r24, Z
    1312:	91 81       	ldd	r25, Z+1	; 0x01
    1314:	8c 01       	movw	r16, r24
    1316:	c8 01       	movw	r24, r16
    1318:	01 97       	sbiw	r24, 0x01	; 1
    131a:	f1 f7       	brne	.-4      	; 0x1318 <__stack+0xa19>
    131c:	8c 01       	movw	r16, r24
    131e:	ce 01       	movw	r24, r28
    1320:	8a 54       	subi	r24, 0x4A	; 74
    1322:	9f 4f       	sbci	r25, 0xFF	; 255
    1324:	fc 01       	movw	r30, r24
    1326:	11 83       	std	Z+1, r17	; 0x01
    1328:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    132a:	ce 01       	movw	r24, r28
    132c:	8c 54       	subi	r24, 0x4C	; 76
    132e:	9f 4f       	sbci	r25, 0xFF	; 255
    1330:	9e 01       	movw	r18, r28
    1332:	2c 54       	subi	r18, 0x4C	; 76
    1334:	3f 4f       	sbci	r19, 0xFF	; 255
    1336:	f9 01       	movw	r30, r18
    1338:	20 81       	ld	r18, Z
    133a:	31 81       	ldd	r19, Z+1	; 0x01
    133c:	21 50       	subi	r18, 0x01	; 1
    133e:	30 40       	sbci	r19, 0x00	; 0
    1340:	fc 01       	movw	r30, r24
    1342:	31 83       	std	Z+1, r19	; 0x01
    1344:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1346:	ce 01       	movw	r24, r28
    1348:	8c 54       	subi	r24, 0x4C	; 76
    134a:	9f 4f       	sbci	r25, 0xFF	; 255
    134c:	fc 01       	movw	r30, r24
    134e:	80 81       	ld	r24, Z
    1350:	91 81       	ldd	r25, Z+1	; 0x01
    1352:	00 97       	sbiw	r24, 0x00	; 0
    1354:	89 f6       	brne	.-94     	; 0x12f8 <__stack+0x9f9>
    1356:	58 c0       	rjmp	.+176    	; 0x1408 <__stack+0xb09>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1358:	8e 01       	movw	r16, r28
    135a:	0c 54       	subi	r16, 0x4C	; 76
    135c:	1f 4f       	sbci	r17, 0xFF	; 255
    135e:	ce 01       	movw	r24, r28
    1360:	80 55       	subi	r24, 0x50	; 80
    1362:	9f 4f       	sbci	r25, 0xFF	; 255
    1364:	fc 01       	movw	r30, r24
    1366:	60 81       	ld	r22, Z
    1368:	71 81       	ldd	r23, Z+1	; 0x01
    136a:	82 81       	ldd	r24, Z+2	; 0x02
    136c:	93 81       	ldd	r25, Z+3	; 0x03
    136e:	0e 94 90 14 	call	0x2920	; 0x2920 <__fixunssfsi>
    1372:	dc 01       	movw	r26, r24
    1374:	cb 01       	movw	r24, r22
    1376:	f8 01       	movw	r30, r16
    1378:	91 83       	std	Z+1, r25	; 0x01
    137a:	80 83       	st	Z, r24
    137c:	ce 01       	movw	r24, r28
    137e:	88 54       	subi	r24, 0x48	; 72
    1380:	9f 4f       	sbci	r25, 0xFF	; 255
    1382:	9e 01       	movw	r18, r28
    1384:	2c 54       	subi	r18, 0x4C	; 76
    1386:	3f 4f       	sbci	r19, 0xFF	; 255
    1388:	f9 01       	movw	r30, r18
    138a:	20 81       	ld	r18, Z
    138c:	31 81       	ldd	r19, Z+1	; 0x01
    138e:	fc 01       	movw	r30, r24
    1390:	31 83       	std	Z+1, r19	; 0x01
    1392:	20 83       	st	Z, r18
    1394:	ce 01       	movw	r24, r28
    1396:	88 54       	subi	r24, 0x48	; 72
    1398:	9f 4f       	sbci	r25, 0xFF	; 255
    139a:	fc 01       	movw	r30, r24
    139c:	80 81       	ld	r24, Z
    139e:	91 81       	ldd	r25, Z+1	; 0x01
    13a0:	8c 01       	movw	r16, r24
    13a2:	c8 01       	movw	r24, r16
    13a4:	01 97       	sbiw	r24, 0x01	; 1
    13a6:	f1 f7       	brne	.-4      	; 0x13a4 <__stack+0xaa5>
    13a8:	8c 01       	movw	r16, r24
    13aa:	ce 01       	movw	r24, r28
    13ac:	88 54       	subi	r24, 0x48	; 72
    13ae:	9f 4f       	sbci	r25, 0xFF	; 255
    13b0:	fc 01       	movw	r30, r24
    13b2:	11 83       	std	Z+1, r17	; 0x01
    13b4:	00 83       	st	Z, r16
    13b6:	28 c0       	rjmp	.+80     	; 0x1408 <__stack+0xb09>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    13b8:	8e 01       	movw	r16, r28
    13ba:	05 55       	subi	r16, 0x55	; 85
    13bc:	1f 4f       	sbci	r17, 0xFF	; 255
    13be:	ce 01       	movw	r24, r28
    13c0:	89 55       	subi	r24, 0x59	; 89
    13c2:	9f 4f       	sbci	r25, 0xFF	; 255
    13c4:	fc 01       	movw	r30, r24
    13c6:	60 81       	ld	r22, Z
    13c8:	71 81       	ldd	r23, Z+1	; 0x01
    13ca:	82 81       	ldd	r24, Z+2	; 0x02
    13cc:	93 81       	ldd	r25, Z+3	; 0x03
    13ce:	0e 94 90 14 	call	0x2920	; 0x2920 <__fixunssfsi>
    13d2:	dc 01       	movw	r26, r24
    13d4:	cb 01       	movw	r24, r22
    13d6:	f8 01       	movw	r30, r16
    13d8:	80 83       	st	Z, r24
    13da:	ce 01       	movw	r24, r28
    13dc:	86 54       	subi	r24, 0x46	; 70
    13de:	9f 4f       	sbci	r25, 0xFF	; 255
    13e0:	9e 01       	movw	r18, r28
    13e2:	25 55       	subi	r18, 0x55	; 85
    13e4:	3f 4f       	sbci	r19, 0xFF	; 255
    13e6:	f9 01       	movw	r30, r18
    13e8:	20 81       	ld	r18, Z
    13ea:	fc 01       	movw	r30, r24
    13ec:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    13ee:	ce 01       	movw	r24, r28
    13f0:	86 54       	subi	r24, 0x46	; 70
    13f2:	9f 4f       	sbci	r25, 0xFF	; 255
    13f4:	fc 01       	movw	r30, r24
    13f6:	80 81       	ld	r24, Z
    13f8:	18 2f       	mov	r17, r24
    13fa:	1a 95       	dec	r17
    13fc:	f1 f7       	brne	.-4      	; 0x13fa <__stack+0xafb>
    13fe:	ce 01       	movw	r24, r28
    1400:	86 54       	subi	r24, 0x46	; 70
    1402:	9f 4f       	sbci	r25, 0xFF	; 255
    1404:	fc 01       	movw	r30, r24
    1406:	10 83       	st	Z, r17
    _delay_us(80);                                  // 40uS delay (min)
 
// Display On/Off Control instruction
    lcd_write_instruction_4d(lcd_DisplayOn);         // turn the display ON
    1408:	8c e0       	ldi	r24, 0x0C	; 12
    140a:	0e 94 9d 0c 	call	0x193a	; 0x193a <lcd_write_instruction_4d>
    140e:	9e 01       	movw	r18, r28
    1410:	25 54       	subi	r18, 0x45	; 69
    1412:	3f 4f       	sbci	r19, 0xFF	; 255
    1414:	80 e0       	ldi	r24, 0x00	; 0
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	a0 ea       	ldi	r26, 0xA0	; 160
    141a:	b2 e4       	ldi	r27, 0x42	; 66
    141c:	f9 01       	movw	r30, r18
    141e:	80 83       	st	Z, r24
    1420:	91 83       	std	Z+1, r25	; 0x01
    1422:	a2 83       	std	Z+2, r26	; 0x02
    1424:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
    1426:	8e 01       	movw	r16, r28
    1428:	01 54       	subi	r16, 0x41	; 65
    142a:	1f 4f       	sbci	r17, 0xFF	; 255
    142c:	ce 01       	movw	r24, r28
    142e:	85 54       	subi	r24, 0x45	; 69
    1430:	9f 4f       	sbci	r25, 0xFF	; 255
    1432:	fc 01       	movw	r30, r24
    1434:	60 81       	ld	r22, Z
    1436:	71 81       	ldd	r23, Z+1	; 0x01
    1438:	82 81       	ldd	r24, Z+2	; 0x02
    143a:	93 81       	ldd	r25, Z+3	; 0x03
    143c:	2b ea       	ldi	r18, 0xAB	; 171
    143e:	3a ea       	ldi	r19, 0xAA	; 170
    1440:	4a ea       	ldi	r20, 0xAA	; 170
    1442:	50 e4       	ldi	r21, 0x40	; 64
    1444:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <__mulsf3>
    1448:	dc 01       	movw	r26, r24
    144a:	cb 01       	movw	r24, r22
    144c:	f8 01       	movw	r30, r16
    144e:	80 83       	st	Z, r24
    1450:	91 83       	std	Z+1, r25	; 0x01
    1452:	a2 83       	std	Z+2, r26	; 0x02
    1454:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1456:	ce 01       	movw	r24, r28
    1458:	81 54       	subi	r24, 0x41	; 65
    145a:	9f 4f       	sbci	r25, 0xFF	; 255
    145c:	11 e0       	ldi	r17, 0x01	; 1
    145e:	fc 01       	movw	r30, r24
    1460:	60 81       	ld	r22, Z
    1462:	71 81       	ldd	r23, Z+1	; 0x01
    1464:	82 81       	ldd	r24, Z+2	; 0x02
    1466:	93 81       	ldd	r25, Z+3	; 0x03
    1468:	20 e0       	ldi	r18, 0x00	; 0
    146a:	30 e0       	ldi	r19, 0x00	; 0
    146c:	40 e8       	ldi	r20, 0x80	; 128
    146e:	5f e3       	ldi	r21, 0x3F	; 63
    1470:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <__ltsf2>
    1474:	88 23       	and	r24, r24
    1476:	0c f0       	brlt	.+2      	; 0x147a <__stack+0xb7b>
    1478:	10 e0       	ldi	r17, 0x00	; 0
    147a:	11 23       	and	r17, r17
    147c:	39 f0       	breq	.+14     	; 0x148c <__stack+0xb8d>
		__ticks = 1;
    147e:	ce 01       	movw	r24, r28
    1480:	8d 53       	subi	r24, 0x3D	; 61
    1482:	9f 4f       	sbci	r25, 0xFF	; 255
    1484:	21 e0       	ldi	r18, 0x01	; 1
    1486:	fc 01       	movw	r30, r24
    1488:	20 83       	st	Z, r18
    148a:	05 c1       	rjmp	.+522    	; 0x1696 <__stack+0xd97>
	else if (__tmp > 255)
    148c:	ce 01       	movw	r24, r28
    148e:	81 54       	subi	r24, 0x41	; 65
    1490:	9f 4f       	sbci	r25, 0xFF	; 255
    1492:	11 e0       	ldi	r17, 0x01	; 1
    1494:	fc 01       	movw	r30, r24
    1496:	60 81       	ld	r22, Z
    1498:	71 81       	ldd	r23, Z+1	; 0x01
    149a:	82 81       	ldd	r24, Z+2	; 0x02
    149c:	93 81       	ldd	r25, Z+3	; 0x03
    149e:	20 e0       	ldi	r18, 0x00	; 0
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	4f e7       	ldi	r20, 0x7F	; 127
    14a4:	53 e4       	ldi	r21, 0x43	; 67
    14a6:	0e 94 0c 18 	call	0x3018	; 0x3018 <__gtsf2>
    14aa:	18 16       	cp	r1, r24
    14ac:	0c f0       	brlt	.+2      	; 0x14b0 <__stack+0xbb1>
    14ae:	10 e0       	ldi	r17, 0x00	; 0
    14b0:	11 23       	and	r17, r17
    14b2:	09 f4       	brne	.+2      	; 0x14b6 <__stack+0xbb7>
    14b4:	df c0       	rjmp	.+446    	; 0x1674 <__stack+0xd75>
	{
		_delay_ms(__us / 1000.0);
    14b6:	ce 01       	movw	r24, r28
    14b8:	85 54       	subi	r24, 0x45	; 69
    14ba:	9f 4f       	sbci	r25, 0xFF	; 255
    14bc:	fc 01       	movw	r30, r24
    14be:	60 81       	ld	r22, Z
    14c0:	71 81       	ldd	r23, Z+1	; 0x01
    14c2:	82 81       	ldd	r24, Z+2	; 0x02
    14c4:	93 81       	ldd	r25, Z+3	; 0x03
    14c6:	20 e0       	ldi	r18, 0x00	; 0
    14c8:	30 e0       	ldi	r19, 0x00	; 0
    14ca:	4a e7       	ldi	r20, 0x7A	; 122
    14cc:	54 e4       	ldi	r21, 0x44	; 68
    14ce:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <__divsf3>
    14d2:	dc 01       	movw	r26, r24
    14d4:	cb 01       	movw	r24, r22
    14d6:	9e 01       	movw	r18, r28
    14d8:	2c 53       	subi	r18, 0x3C	; 60
    14da:	3f 4f       	sbci	r19, 0xFF	; 255
    14dc:	f9 01       	movw	r30, r18
    14de:	80 83       	st	Z, r24
    14e0:	91 83       	std	Z+1, r25	; 0x01
    14e2:	a2 83       	std	Z+2, r26	; 0x02
    14e4:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    14e6:	8e 01       	movw	r16, r28
    14e8:	08 53       	subi	r16, 0x38	; 56
    14ea:	1f 4f       	sbci	r17, 0xFF	; 255
    14ec:	ce 01       	movw	r24, r28
    14ee:	8c 53       	subi	r24, 0x3C	; 60
    14f0:	9f 4f       	sbci	r25, 0xFF	; 255
    14f2:	fc 01       	movw	r30, r24
    14f4:	60 81       	ld	r22, Z
    14f6:	71 81       	ldd	r23, Z+1	; 0x01
    14f8:	82 81       	ldd	r24, Z+2	; 0x02
    14fa:	93 81       	ldd	r25, Z+3	; 0x03
    14fc:	20 e0       	ldi	r18, 0x00	; 0
    14fe:	30 e0       	ldi	r19, 0x00	; 0
    1500:	4a e7       	ldi	r20, 0x7A	; 122
    1502:	55 e4       	ldi	r21, 0x45	; 69
    1504:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <__mulsf3>
    1508:	dc 01       	movw	r26, r24
    150a:	cb 01       	movw	r24, r22
    150c:	f8 01       	movw	r30, r16
    150e:	80 83       	st	Z, r24
    1510:	91 83       	std	Z+1, r25	; 0x01
    1512:	a2 83       	std	Z+2, r26	; 0x02
    1514:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1516:	ce 01       	movw	r24, r28
    1518:	88 53       	subi	r24, 0x38	; 56
    151a:	9f 4f       	sbci	r25, 0xFF	; 255
    151c:	11 e0       	ldi	r17, 0x01	; 1
    151e:	fc 01       	movw	r30, r24
    1520:	60 81       	ld	r22, Z
    1522:	71 81       	ldd	r23, Z+1	; 0x01
    1524:	82 81       	ldd	r24, Z+2	; 0x02
    1526:	93 81       	ldd	r25, Z+3	; 0x03
    1528:	20 e0       	ldi	r18, 0x00	; 0
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	40 e8       	ldi	r20, 0x80	; 128
    152e:	5f e3       	ldi	r21, 0x3F	; 63
    1530:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <__ltsf2>
    1534:	88 23       	and	r24, r24
    1536:	0c f0       	brlt	.+2      	; 0x153a <__stack+0xc3b>
    1538:	10 e0       	ldi	r17, 0x00	; 0
    153a:	11 23       	and	r17, r17
    153c:	49 f0       	breq	.+18     	; 0x1550 <__stack+0xc51>
		__ticks = 1;
    153e:	ce 01       	movw	r24, r28
    1540:	84 53       	subi	r24, 0x34	; 52
    1542:	9f 4f       	sbci	r25, 0xFF	; 255
    1544:	21 e0       	ldi	r18, 0x01	; 1
    1546:	30 e0       	ldi	r19, 0x00	; 0
    1548:	fc 01       	movw	r30, r24
    154a:	31 83       	std	Z+1, r19	; 0x01
    154c:	20 83       	st	Z, r18
    154e:	74 c0       	rjmp	.+232    	; 0x1638 <__stack+0xd39>
	else if (__tmp > 65535)
    1550:	ce 01       	movw	r24, r28
    1552:	88 53       	subi	r24, 0x38	; 56
    1554:	9f 4f       	sbci	r25, 0xFF	; 255
    1556:	11 e0       	ldi	r17, 0x01	; 1
    1558:	fc 01       	movw	r30, r24
    155a:	60 81       	ld	r22, Z
    155c:	71 81       	ldd	r23, Z+1	; 0x01
    155e:	82 81       	ldd	r24, Z+2	; 0x02
    1560:	93 81       	ldd	r25, Z+3	; 0x03
    1562:	20 e0       	ldi	r18, 0x00	; 0
    1564:	3f ef       	ldi	r19, 0xFF	; 255
    1566:	4f e7       	ldi	r20, 0x7F	; 127
    1568:	57 e4       	ldi	r21, 0x47	; 71
    156a:	0e 94 0c 18 	call	0x3018	; 0x3018 <__gtsf2>
    156e:	18 16       	cp	r1, r24
    1570:	0c f0       	brlt	.+2      	; 0x1574 <__stack+0xc75>
    1572:	10 e0       	ldi	r17, 0x00	; 0
    1574:	11 23       	and	r17, r17
    1576:	09 f4       	brne	.+2      	; 0x157a <__stack+0xc7b>
    1578:	4d c0       	rjmp	.+154    	; 0x1614 <__stack+0xd15>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    157a:	ce 01       	movw	r24, r28
    157c:	8c 53       	subi	r24, 0x3C	; 60
    157e:	9f 4f       	sbci	r25, 0xFF	; 255
    1580:	fc 01       	movw	r30, r24
    1582:	60 81       	ld	r22, Z
    1584:	71 81       	ldd	r23, Z+1	; 0x01
    1586:	82 81       	ldd	r24, Z+2	; 0x02
    1588:	93 81       	ldd	r25, Z+3	; 0x03
    158a:	20 e0       	ldi	r18, 0x00	; 0
    158c:	30 e0       	ldi	r19, 0x00	; 0
    158e:	40 e2       	ldi	r20, 0x20	; 32
    1590:	51 e4       	ldi	r21, 0x41	; 65
    1592:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <__mulsf3>
    1596:	dc 01       	movw	r26, r24
    1598:	cb 01       	movw	r24, r22
    159a:	8e 01       	movw	r16, r28
    159c:	04 53       	subi	r16, 0x34	; 52
    159e:	1f 4f       	sbci	r17, 0xFF	; 255
    15a0:	bc 01       	movw	r22, r24
    15a2:	cd 01       	movw	r24, r26
    15a4:	0e 94 90 14 	call	0x2920	; 0x2920 <__fixunssfsi>
    15a8:	dc 01       	movw	r26, r24
    15aa:	cb 01       	movw	r24, r22
    15ac:	f8 01       	movw	r30, r16
    15ae:	91 83       	std	Z+1, r25	; 0x01
    15b0:	80 83       	st	Z, r24
    15b2:	27 c0       	rjmp	.+78     	; 0x1602 <__stack+0xd03>
    15b4:	ce 01       	movw	r24, r28
    15b6:	82 53       	subi	r24, 0x32	; 50
    15b8:	9f 4f       	sbci	r25, 0xFF	; 255
    15ba:	20 e9       	ldi	r18, 0x90	; 144
    15bc:	31 e0       	ldi	r19, 0x01	; 1
    15be:	fc 01       	movw	r30, r24
    15c0:	31 83       	std	Z+1, r19	; 0x01
    15c2:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    15c4:	ce 01       	movw	r24, r28
    15c6:	82 53       	subi	r24, 0x32	; 50
    15c8:	9f 4f       	sbci	r25, 0xFF	; 255
    15ca:	fc 01       	movw	r30, r24
    15cc:	80 81       	ld	r24, Z
    15ce:	91 81       	ldd	r25, Z+1	; 0x01
    15d0:	8c 01       	movw	r16, r24
    15d2:	c8 01       	movw	r24, r16
    15d4:	01 97       	sbiw	r24, 0x01	; 1
    15d6:	f1 f7       	brne	.-4      	; 0x15d4 <__stack+0xcd5>
    15d8:	8c 01       	movw	r16, r24
    15da:	ce 01       	movw	r24, r28
    15dc:	82 53       	subi	r24, 0x32	; 50
    15de:	9f 4f       	sbci	r25, 0xFF	; 255
    15e0:	fc 01       	movw	r30, r24
    15e2:	11 83       	std	Z+1, r17	; 0x01
    15e4:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15e6:	ce 01       	movw	r24, r28
    15e8:	84 53       	subi	r24, 0x34	; 52
    15ea:	9f 4f       	sbci	r25, 0xFF	; 255
    15ec:	9e 01       	movw	r18, r28
    15ee:	24 53       	subi	r18, 0x34	; 52
    15f0:	3f 4f       	sbci	r19, 0xFF	; 255
    15f2:	f9 01       	movw	r30, r18
    15f4:	20 81       	ld	r18, Z
    15f6:	31 81       	ldd	r19, Z+1	; 0x01
    15f8:	21 50       	subi	r18, 0x01	; 1
    15fa:	30 40       	sbci	r19, 0x00	; 0
    15fc:	fc 01       	movw	r30, r24
    15fe:	31 83       	std	Z+1, r19	; 0x01
    1600:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1602:	ce 01       	movw	r24, r28
    1604:	84 53       	subi	r24, 0x34	; 52
    1606:	9f 4f       	sbci	r25, 0xFF	; 255
    1608:	fc 01       	movw	r30, r24
    160a:	80 81       	ld	r24, Z
    160c:	91 81       	ldd	r25, Z+1	; 0x01
    160e:	00 97       	sbiw	r24, 0x00	; 0
    1610:	89 f6       	brne	.-94     	; 0x15b4 <__stack+0xcb5>
    1612:	58 c0       	rjmp	.+176    	; 0x16c4 <__stack+0xdc5>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1614:	8e 01       	movw	r16, r28
    1616:	04 53       	subi	r16, 0x34	; 52
    1618:	1f 4f       	sbci	r17, 0xFF	; 255
    161a:	ce 01       	movw	r24, r28
    161c:	88 53       	subi	r24, 0x38	; 56
    161e:	9f 4f       	sbci	r25, 0xFF	; 255
    1620:	fc 01       	movw	r30, r24
    1622:	60 81       	ld	r22, Z
    1624:	71 81       	ldd	r23, Z+1	; 0x01
    1626:	82 81       	ldd	r24, Z+2	; 0x02
    1628:	93 81       	ldd	r25, Z+3	; 0x03
    162a:	0e 94 90 14 	call	0x2920	; 0x2920 <__fixunssfsi>
    162e:	dc 01       	movw	r26, r24
    1630:	cb 01       	movw	r24, r22
    1632:	f8 01       	movw	r30, r16
    1634:	91 83       	std	Z+1, r25	; 0x01
    1636:	80 83       	st	Z, r24
    1638:	ce 01       	movw	r24, r28
    163a:	80 53       	subi	r24, 0x30	; 48
    163c:	9f 4f       	sbci	r25, 0xFF	; 255
    163e:	9e 01       	movw	r18, r28
    1640:	24 53       	subi	r18, 0x34	; 52
    1642:	3f 4f       	sbci	r19, 0xFF	; 255
    1644:	f9 01       	movw	r30, r18
    1646:	20 81       	ld	r18, Z
    1648:	31 81       	ldd	r19, Z+1	; 0x01
    164a:	fc 01       	movw	r30, r24
    164c:	31 83       	std	Z+1, r19	; 0x01
    164e:	20 83       	st	Z, r18
    1650:	ce 01       	movw	r24, r28
    1652:	80 53       	subi	r24, 0x30	; 48
    1654:	9f 4f       	sbci	r25, 0xFF	; 255
    1656:	fc 01       	movw	r30, r24
    1658:	80 81       	ld	r24, Z
    165a:	91 81       	ldd	r25, Z+1	; 0x01
    165c:	8c 01       	movw	r16, r24
    165e:	c8 01       	movw	r24, r16
    1660:	01 97       	sbiw	r24, 0x01	; 1
    1662:	f1 f7       	brne	.-4      	; 0x1660 <__stack+0xd61>
    1664:	8c 01       	movw	r16, r24
    1666:	ce 01       	movw	r24, r28
    1668:	80 53       	subi	r24, 0x30	; 48
    166a:	9f 4f       	sbci	r25, 0xFF	; 255
    166c:	fc 01       	movw	r30, r24
    166e:	11 83       	std	Z+1, r17	; 0x01
    1670:	00 83       	st	Z, r16
    1672:	28 c0       	rjmp	.+80     	; 0x16c4 <__stack+0xdc5>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1674:	8e 01       	movw	r16, r28
    1676:	0d 53       	subi	r16, 0x3D	; 61
    1678:	1f 4f       	sbci	r17, 0xFF	; 255
    167a:	ce 01       	movw	r24, r28
    167c:	81 54       	subi	r24, 0x41	; 65
    167e:	9f 4f       	sbci	r25, 0xFF	; 255
    1680:	fc 01       	movw	r30, r24
    1682:	60 81       	ld	r22, Z
    1684:	71 81       	ldd	r23, Z+1	; 0x01
    1686:	82 81       	ldd	r24, Z+2	; 0x02
    1688:	93 81       	ldd	r25, Z+3	; 0x03
    168a:	0e 94 90 14 	call	0x2920	; 0x2920 <__fixunssfsi>
    168e:	dc 01       	movw	r26, r24
    1690:	cb 01       	movw	r24, r22
    1692:	f8 01       	movw	r30, r16
    1694:	80 83       	st	Z, r24
    1696:	ce 01       	movw	r24, r28
    1698:	8e 52       	subi	r24, 0x2E	; 46
    169a:	9f 4f       	sbci	r25, 0xFF	; 255
    169c:	9e 01       	movw	r18, r28
    169e:	2d 53       	subi	r18, 0x3D	; 61
    16a0:	3f 4f       	sbci	r19, 0xFF	; 255
    16a2:	f9 01       	movw	r30, r18
    16a4:	20 81       	ld	r18, Z
    16a6:	fc 01       	movw	r30, r24
    16a8:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    16aa:	ce 01       	movw	r24, r28
    16ac:	8e 52       	subi	r24, 0x2E	; 46
    16ae:	9f 4f       	sbci	r25, 0xFF	; 255
    16b0:	fc 01       	movw	r30, r24
    16b2:	80 81       	ld	r24, Z
    16b4:	18 2f       	mov	r17, r24
    16b6:	1a 95       	dec	r17
    16b8:	f1 f7       	brne	.-4      	; 0x16b6 <__stack+0xdb7>
    16ba:	ce 01       	movw	r24, r28
    16bc:	8e 52       	subi	r24, 0x2E	; 46
    16be:	9f 4f       	sbci	r25, 0xFF	; 255
    16c0:	fc 01       	movw	r30, r24
    16c2:	10 83       	st	Z, r17
    _delay_us(80);                                  // 40uS delay (min)
}
    16c4:	ce 52       	subi	r28, 0x2E	; 46
    16c6:	df 4f       	sbci	r29, 0xFF	; 255
    16c8:	0f b6       	in	r0, 0x3f	; 63
    16ca:	f8 94       	cli
    16cc:	de bf       	out	0x3e, r29	; 62
    16ce:	0f be       	out	0x3f, r0	; 63
    16d0:	cd bf       	out	0x3d, r28	; 61
    16d2:	cf 91       	pop	r28
    16d4:	df 91       	pop	r29
    16d6:	1f 91       	pop	r17
    16d8:	0f 91       	pop	r16
    16da:	08 95       	ret

000016dc <lcd_write_string_4d>:

void lcd_write_string_4d(uint8_t theString[])
{
    16dc:	0f 93       	push	r16
    16de:	1f 93       	push	r17
    16e0:	df 93       	push	r29
    16e2:	cf 93       	push	r28
    16e4:	cd b7       	in	r28, 0x3d	; 61
    16e6:	de b7       	in	r29, 0x3e	; 62
    16e8:	6c 97       	sbiw	r28, 0x1c	; 28
    16ea:	0f b6       	in	r0, 0x3f	; 63
    16ec:	f8 94       	cli
    16ee:	de bf       	out	0x3e, r29	; 62
    16f0:	0f be       	out	0x3f, r0	; 63
    16f2:	cd bf       	out	0x3d, r28	; 61
    16f4:	9c 8f       	std	Y+28, r25	; 0x1c
    16f6:	8b 8f       	std	Y+27, r24	; 0x1b
    volatile int i = 0;                             // character counter*/
    16f8:	1a 8e       	std	Y+26, r1	; 0x1a
    16fa:	19 8e       	std	Y+25, r1	; 0x19
    while (theString[i] != 0)
    16fc:	e4 c0       	rjmp	.+456    	; 0x18c6 <lcd_write_string_4d+0x1ea>
    {
        lcd_write_character_4d(theString[i]);
    16fe:	89 8d       	ldd	r24, Y+25	; 0x19
    1700:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1702:	2b 8d       	ldd	r18, Y+27	; 0x1b
    1704:	3c 8d       	ldd	r19, Y+28	; 0x1c
    1706:	82 0f       	add	r24, r18
    1708:	93 1f       	adc	r25, r19
    170a:	fc 01       	movw	r30, r24
    170c:	80 81       	ld	r24, Z
    170e:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <lcd_write_character_4d>
        i++;
    1712:	89 8d       	ldd	r24, Y+25	; 0x19
    1714:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1716:	01 96       	adiw	r24, 0x01	; 1
    1718:	9a 8f       	std	Y+26, r25	; 0x1a
    171a:	89 8f       	std	Y+25, r24	; 0x19
    171c:	80 e0       	ldi	r24, 0x00	; 0
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	a0 ea       	ldi	r26, 0xA0	; 160
    1722:	b2 e4       	ldi	r27, 0x42	; 66
    1724:	89 83       	std	Y+1, r24	; 0x01
    1726:	9a 83       	std	Y+2, r25	; 0x02
    1728:	ab 83       	std	Y+3, r26	; 0x03
    172a:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
    172c:	69 81       	ldd	r22, Y+1	; 0x01
    172e:	7a 81       	ldd	r23, Y+2	; 0x02
    1730:	8b 81       	ldd	r24, Y+3	; 0x03
    1732:	9c 81       	ldd	r25, Y+4	; 0x04
    1734:	2b ea       	ldi	r18, 0xAB	; 171
    1736:	3a ea       	ldi	r19, 0xAA	; 170
    1738:	4a ea       	ldi	r20, 0xAA	; 170
    173a:	50 e4       	ldi	r21, 0x40	; 64
    173c:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <__mulsf3>
    1740:	dc 01       	movw	r26, r24
    1742:	cb 01       	movw	r24, r22
    1744:	8d 83       	std	Y+5, r24	; 0x05
    1746:	9e 83       	std	Y+6, r25	; 0x06
    1748:	af 83       	std	Y+7, r26	; 0x07
    174a:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    174c:	11 e0       	ldi	r17, 0x01	; 1
    174e:	6d 81       	ldd	r22, Y+5	; 0x05
    1750:	7e 81       	ldd	r23, Y+6	; 0x06
    1752:	8f 81       	ldd	r24, Y+7	; 0x07
    1754:	98 85       	ldd	r25, Y+8	; 0x08
    1756:	20 e0       	ldi	r18, 0x00	; 0
    1758:	30 e0       	ldi	r19, 0x00	; 0
    175a:	40 e8       	ldi	r20, 0x80	; 128
    175c:	5f e3       	ldi	r21, 0x3F	; 63
    175e:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <__ltsf2>
    1762:	88 23       	and	r24, r24
    1764:	0c f0       	brlt	.+2      	; 0x1768 <lcd_write_string_4d+0x8c>
    1766:	10 e0       	ldi	r17, 0x00	; 0
    1768:	11 23       	and	r17, r17
    176a:	19 f0       	breq	.+6      	; 0x1772 <lcd_write_string_4d+0x96>
		__ticks = 1;
    176c:	81 e0       	ldi	r24, 0x01	; 1
    176e:	89 87       	std	Y+9, r24	; 0x09
    1770:	a3 c0       	rjmp	.+326    	; 0x18b8 <lcd_write_string_4d+0x1dc>
	else if (__tmp > 255)
    1772:	11 e0       	ldi	r17, 0x01	; 1
    1774:	6d 81       	ldd	r22, Y+5	; 0x05
    1776:	7e 81       	ldd	r23, Y+6	; 0x06
    1778:	8f 81       	ldd	r24, Y+7	; 0x07
    177a:	98 85       	ldd	r25, Y+8	; 0x08
    177c:	20 e0       	ldi	r18, 0x00	; 0
    177e:	30 e0       	ldi	r19, 0x00	; 0
    1780:	4f e7       	ldi	r20, 0x7F	; 127
    1782:	53 e4       	ldi	r21, 0x43	; 67
    1784:	0e 94 0c 18 	call	0x3018	; 0x3018 <__gtsf2>
    1788:	18 16       	cp	r1, r24
    178a:	0c f0       	brlt	.+2      	; 0x178e <lcd_write_string_4d+0xb2>
    178c:	10 e0       	ldi	r17, 0x00	; 0
    178e:	11 23       	and	r17, r17
    1790:	09 f4       	brne	.+2      	; 0x1794 <lcd_write_string_4d+0xb8>
    1792:	89 c0       	rjmp	.+274    	; 0x18a6 <lcd_write_string_4d+0x1ca>
	{
		_delay_ms(__us / 1000.0);
    1794:	69 81       	ldd	r22, Y+1	; 0x01
    1796:	7a 81       	ldd	r23, Y+2	; 0x02
    1798:	8b 81       	ldd	r24, Y+3	; 0x03
    179a:	9c 81       	ldd	r25, Y+4	; 0x04
    179c:	20 e0       	ldi	r18, 0x00	; 0
    179e:	30 e0       	ldi	r19, 0x00	; 0
    17a0:	4a e7       	ldi	r20, 0x7A	; 122
    17a2:	54 e4       	ldi	r21, 0x44	; 68
    17a4:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <__divsf3>
    17a8:	dc 01       	movw	r26, r24
    17aa:	cb 01       	movw	r24, r22
    17ac:	8a 87       	std	Y+10, r24	; 0x0a
    17ae:	9b 87       	std	Y+11, r25	; 0x0b
    17b0:	ac 87       	std	Y+12, r26	; 0x0c
    17b2:	bd 87       	std	Y+13, r27	; 0x0d
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    17b4:	6a 85       	ldd	r22, Y+10	; 0x0a
    17b6:	7b 85       	ldd	r23, Y+11	; 0x0b
    17b8:	8c 85       	ldd	r24, Y+12	; 0x0c
    17ba:	9d 85       	ldd	r25, Y+13	; 0x0d
    17bc:	20 e0       	ldi	r18, 0x00	; 0
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	4a e7       	ldi	r20, 0x7A	; 122
    17c2:	55 e4       	ldi	r21, 0x45	; 69
    17c4:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <__mulsf3>
    17c8:	dc 01       	movw	r26, r24
    17ca:	cb 01       	movw	r24, r22
    17cc:	8e 87       	std	Y+14, r24	; 0x0e
    17ce:	9f 87       	std	Y+15, r25	; 0x0f
    17d0:	a8 8b       	std	Y+16, r26	; 0x10
    17d2:	b9 8b       	std	Y+17, r27	; 0x11
	if (__tmp < 1.0)
    17d4:	11 e0       	ldi	r17, 0x01	; 1
    17d6:	6e 85       	ldd	r22, Y+14	; 0x0e
    17d8:	7f 85       	ldd	r23, Y+15	; 0x0f
    17da:	88 89       	ldd	r24, Y+16	; 0x10
    17dc:	99 89       	ldd	r25, Y+17	; 0x11
    17de:	20 e0       	ldi	r18, 0x00	; 0
    17e0:	30 e0       	ldi	r19, 0x00	; 0
    17e2:	40 e8       	ldi	r20, 0x80	; 128
    17e4:	5f e3       	ldi	r21, 0x3F	; 63
    17e6:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <__ltsf2>
    17ea:	88 23       	and	r24, r24
    17ec:	0c f0       	brlt	.+2      	; 0x17f0 <lcd_write_string_4d+0x114>
    17ee:	10 e0       	ldi	r17, 0x00	; 0
    17f0:	11 23       	and	r17, r17
    17f2:	29 f0       	breq	.+10     	; 0x17fe <lcd_write_string_4d+0x122>
		__ticks = 1;
    17f4:	81 e0       	ldi	r24, 0x01	; 1
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	9b 8b       	std	Y+19, r25	; 0x13
    17fa:	8a 8b       	std	Y+18, r24	; 0x12
    17fc:	46 c0       	rjmp	.+140    	; 0x188a <lcd_write_string_4d+0x1ae>
	else if (__tmp > 65535)
    17fe:	11 e0       	ldi	r17, 0x01	; 1
    1800:	6e 85       	ldd	r22, Y+14	; 0x0e
    1802:	7f 85       	ldd	r23, Y+15	; 0x0f
    1804:	88 89       	ldd	r24, Y+16	; 0x10
    1806:	99 89       	ldd	r25, Y+17	; 0x11
    1808:	20 e0       	ldi	r18, 0x00	; 0
    180a:	3f ef       	ldi	r19, 0xFF	; 255
    180c:	4f e7       	ldi	r20, 0x7F	; 127
    180e:	57 e4       	ldi	r21, 0x47	; 71
    1810:	0e 94 0c 18 	call	0x3018	; 0x3018 <__gtsf2>
    1814:	18 16       	cp	r1, r24
    1816:	0c f0       	brlt	.+2      	; 0x181a <lcd_write_string_4d+0x13e>
    1818:	10 e0       	ldi	r17, 0x00	; 0
    181a:	11 23       	and	r17, r17
    181c:	61 f1       	breq	.+88     	; 0x1876 <lcd_write_string_4d+0x19a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    181e:	6a 85       	ldd	r22, Y+10	; 0x0a
    1820:	7b 85       	ldd	r23, Y+11	; 0x0b
    1822:	8c 85       	ldd	r24, Y+12	; 0x0c
    1824:	9d 85       	ldd	r25, Y+13	; 0x0d
    1826:	20 e0       	ldi	r18, 0x00	; 0
    1828:	30 e0       	ldi	r19, 0x00	; 0
    182a:	40 e2       	ldi	r20, 0x20	; 32
    182c:	51 e4       	ldi	r21, 0x41	; 65
    182e:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <__mulsf3>
    1832:	dc 01       	movw	r26, r24
    1834:	cb 01       	movw	r24, r22
    1836:	bc 01       	movw	r22, r24
    1838:	cd 01       	movw	r24, r26
    183a:	0e 94 90 14 	call	0x2920	; 0x2920 <__fixunssfsi>
    183e:	dc 01       	movw	r26, r24
    1840:	cb 01       	movw	r24, r22
    1842:	9b 8b       	std	Y+19, r25	; 0x13
    1844:	8a 8b       	std	Y+18, r24	; 0x12
    1846:	12 c0       	rjmp	.+36     	; 0x186c <lcd_write_string_4d+0x190>
    1848:	80 e9       	ldi	r24, 0x90	; 144
    184a:	91 e0       	ldi	r25, 0x01	; 1
    184c:	9d 8b       	std	Y+21, r25	; 0x15
    184e:	8c 8b       	std	Y+20, r24	; 0x14
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1850:	8c 89       	ldd	r24, Y+20	; 0x14
    1852:	9d 89       	ldd	r25, Y+21	; 0x15
    1854:	8c 01       	movw	r16, r24
    1856:	c8 01       	movw	r24, r16
    1858:	01 97       	sbiw	r24, 0x01	; 1
    185a:	f1 f7       	brne	.-4      	; 0x1858 <lcd_write_string_4d+0x17c>
    185c:	8c 01       	movw	r16, r24
    185e:	1d 8b       	std	Y+21, r17	; 0x15
    1860:	0c 8b       	std	Y+20, r16	; 0x14
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1862:	8a 89       	ldd	r24, Y+18	; 0x12
    1864:	9b 89       	ldd	r25, Y+19	; 0x13
    1866:	01 97       	sbiw	r24, 0x01	; 1
    1868:	9b 8b       	std	Y+19, r25	; 0x13
    186a:	8a 8b       	std	Y+18, r24	; 0x12
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    186c:	8a 89       	ldd	r24, Y+18	; 0x12
    186e:	9b 89       	ldd	r25, Y+19	; 0x13
    1870:	00 97       	sbiw	r24, 0x00	; 0
    1872:	51 f7       	brne	.-44     	; 0x1848 <lcd_write_string_4d+0x16c>
    1874:	28 c0       	rjmp	.+80     	; 0x18c6 <lcd_write_string_4d+0x1ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1876:	6e 85       	ldd	r22, Y+14	; 0x0e
    1878:	7f 85       	ldd	r23, Y+15	; 0x0f
    187a:	88 89       	ldd	r24, Y+16	; 0x10
    187c:	99 89       	ldd	r25, Y+17	; 0x11
    187e:	0e 94 90 14 	call	0x2920	; 0x2920 <__fixunssfsi>
    1882:	dc 01       	movw	r26, r24
    1884:	cb 01       	movw	r24, r22
    1886:	9b 8b       	std	Y+19, r25	; 0x13
    1888:	8a 8b       	std	Y+18, r24	; 0x12
    188a:	8a 89       	ldd	r24, Y+18	; 0x12
    188c:	9b 89       	ldd	r25, Y+19	; 0x13
    188e:	9f 8b       	std	Y+23, r25	; 0x17
    1890:	8e 8b       	std	Y+22, r24	; 0x16
    1892:	8e 89       	ldd	r24, Y+22	; 0x16
    1894:	9f 89       	ldd	r25, Y+23	; 0x17
    1896:	8c 01       	movw	r16, r24
    1898:	f8 01       	movw	r30, r16
    189a:	31 97       	sbiw	r30, 0x01	; 1
    189c:	f1 f7       	brne	.-4      	; 0x189a <lcd_write_string_4d+0x1be>
    189e:	8f 01       	movw	r16, r30
    18a0:	1f 8b       	std	Y+23, r17	; 0x17
    18a2:	0e 8b       	std	Y+22, r16	; 0x16
    18a4:	10 c0       	rjmp	.+32     	; 0x18c6 <lcd_write_string_4d+0x1ea>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    18a6:	6d 81       	ldd	r22, Y+5	; 0x05
    18a8:	7e 81       	ldd	r23, Y+6	; 0x06
    18aa:	8f 81       	ldd	r24, Y+7	; 0x07
    18ac:	98 85       	ldd	r25, Y+8	; 0x08
    18ae:	0e 94 90 14 	call	0x2920	; 0x2920 <__fixunssfsi>
    18b2:	dc 01       	movw	r26, r24
    18b4:	cb 01       	movw	r24, r22
    18b6:	89 87       	std	Y+9, r24	; 0x09
    18b8:	89 85       	ldd	r24, Y+9	; 0x09
    18ba:	88 8f       	std	Y+24, r24	; 0x18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    18bc:	88 8d       	ldd	r24, Y+24	; 0x18
    18be:	18 2f       	mov	r17, r24
    18c0:	1a 95       	dec	r17
    18c2:	f1 f7       	brne	.-4      	; 0x18c0 <lcd_write_string_4d+0x1e4>
    18c4:	18 8f       	std	Y+24, r17	; 0x18
}

void lcd_write_string_4d(uint8_t theString[])
{
    volatile int i = 0;                             // character counter*/
    while (theString[i] != 0)
    18c6:	89 8d       	ldd	r24, Y+25	; 0x19
    18c8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    18ca:	2b 8d       	ldd	r18, Y+27	; 0x1b
    18cc:	3c 8d       	ldd	r19, Y+28	; 0x1c
    18ce:	82 0f       	add	r24, r18
    18d0:	93 1f       	adc	r25, r19
    18d2:	fc 01       	movw	r30, r24
    18d4:	80 81       	ld	r24, Z
    18d6:	88 23       	and	r24, r24
    18d8:	09 f0       	breq	.+2      	; 0x18dc <lcd_write_string_4d+0x200>
    18da:	11 cf       	rjmp	.-478    	; 0x16fe <lcd_write_string_4d+0x22>
    {
        lcd_write_character_4d(theString[i]);
        i++;
        _delay_us(80);                              // 40 uS delay (min)
    }
}
    18dc:	6c 96       	adiw	r28, 0x1c	; 28
    18de:	0f b6       	in	r0, 0x3f	; 63
    18e0:	f8 94       	cli
    18e2:	de bf       	out	0x3e, r29	; 62
    18e4:	0f be       	out	0x3f, r0	; 63
    18e6:	cd bf       	out	0x3d, r28	; 61
    18e8:	cf 91       	pop	r28
    18ea:	df 91       	pop	r29
    18ec:	1f 91       	pop	r17
    18ee:	0f 91       	pop	r16
    18f0:	08 95       	ret

000018f2 <lcd_write_character_4d>:


void lcd_write_character_4d(uint8_t theData)
{
    18f2:	df 93       	push	r29
    18f4:	cf 93       	push	r28
    18f6:	0f 92       	push	r0
    18f8:	cd b7       	in	r28, 0x3d	; 61
    18fa:	de b7       	in	r29, 0x3e	; 62
    18fc:	89 83       	std	Y+1, r24	; 0x01
    lcd_RS_port |= (1<<lcd_RS_bit);                 // select the Data Register (RS high)
    18fe:	88 e2       	ldi	r24, 0x28	; 40
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	28 e2       	ldi	r18, 0x28	; 40
    1904:	30 e0       	ldi	r19, 0x00	; 0
    1906:	f9 01       	movw	r30, r18
    1908:	20 81       	ld	r18, Z
    190a:	20 62       	ori	r18, 0x20	; 32
    190c:	fc 01       	movw	r30, r24
    190e:	20 83       	st	Z, r18
    lcd_E_port &= ~(1<<lcd_E_bit);                  // make sure E is initially low
    1910:	88 e2       	ldi	r24, 0x28	; 40
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	28 e2       	ldi	r18, 0x28	; 40
    1916:	30 e0       	ldi	r19, 0x00	; 0
    1918:	f9 01       	movw	r30, r18
    191a:	20 81       	ld	r18, Z
    191c:	2f 7e       	andi	r18, 0xEF	; 239
    191e:	fc 01       	movw	r30, r24
    1920:	20 83       	st	Z, r18
    lcd_write_4(theData);                           // write the upper 4-bits of the data
    1922:	89 81       	ldd	r24, Y+1	; 0x01
    1924:	0e 94 c1 0c 	call	0x1982	; 0x1982 <lcd_write_4>
    lcd_write_4(theData << 4);                      // write the lower 4-bits of the data
    1928:	89 81       	ldd	r24, Y+1	; 0x01
    192a:	82 95       	swap	r24
    192c:	80 7f       	andi	r24, 0xF0	; 240
    192e:	0e 94 c1 0c 	call	0x1982	; 0x1982 <lcd_write_4>
}
    1932:	0f 90       	pop	r0
    1934:	cf 91       	pop	r28
    1936:	df 91       	pop	r29
    1938:	08 95       	ret

0000193a <lcd_write_instruction_4d>:


void lcd_write_instruction_4d(uint8_t theInstruction)
{
    193a:	df 93       	push	r29
    193c:	cf 93       	push	r28
    193e:	0f 92       	push	r0
    1940:	cd b7       	in	r28, 0x3d	; 61
    1942:	de b7       	in	r29, 0x3e	; 62
    1944:	89 83       	std	Y+1, r24	; 0x01
    lcd_RS_port &= ~(1<<lcd_RS_bit);                // select the Instruction Register (RS low)
    1946:	88 e2       	ldi	r24, 0x28	; 40
    1948:	90 e0       	ldi	r25, 0x00	; 0
    194a:	28 e2       	ldi	r18, 0x28	; 40
    194c:	30 e0       	ldi	r19, 0x00	; 0
    194e:	f9 01       	movw	r30, r18
    1950:	20 81       	ld	r18, Z
    1952:	2f 7d       	andi	r18, 0xDF	; 223
    1954:	fc 01       	movw	r30, r24
    1956:	20 83       	st	Z, r18
    lcd_E_port &= ~(1<<lcd_E_bit);                  // make sure E is initially low
    1958:	88 e2       	ldi	r24, 0x28	; 40
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	28 e2       	ldi	r18, 0x28	; 40
    195e:	30 e0       	ldi	r19, 0x00	; 0
    1960:	f9 01       	movw	r30, r18
    1962:	20 81       	ld	r18, Z
    1964:	2f 7e       	andi	r18, 0xEF	; 239
    1966:	fc 01       	movw	r30, r24
    1968:	20 83       	st	Z, r18
    lcd_write_4(theInstruction);                    // write the upper 4-bits of the data
    196a:	89 81       	ldd	r24, Y+1	; 0x01
    196c:	0e 94 c1 0c 	call	0x1982	; 0x1982 <lcd_write_4>
    lcd_write_4(theInstruction << 4);               // write the lower 4-bits of the data
    1970:	89 81       	ldd	r24, Y+1	; 0x01
    1972:	82 95       	swap	r24
    1974:	80 7f       	andi	r24, 0xF0	; 240
    1976:	0e 94 c1 0c 	call	0x1982	; 0x1982 <lcd_write_4>
}
    197a:	0f 90       	pop	r0
    197c:	cf 91       	pop	r28
    197e:	df 91       	pop	r29
    1980:	08 95       	ret

00001982 <lcd_write_4>:



void lcd_write_4(uint8_t theByte)
{
    1982:	0f 93       	push	r16
    1984:	1f 93       	push	r17
    1986:	df 93       	push	r29
    1988:	cf 93       	push	r28
    198a:	cd b7       	in	r28, 0x3d	; 61
    198c:	de b7       	in	r29, 0x3e	; 62
    198e:	e1 97       	sbiw	r28, 0x31	; 49
    1990:	0f b6       	in	r0, 0x3f	; 63
    1992:	f8 94       	cli
    1994:	de bf       	out	0x3e, r29	; 62
    1996:	0f be       	out	0x3f, r0	; 63
    1998:	cd bf       	out	0x3d, r28	; 61
    199a:	89 ab       	std	Y+49, r24	; 0x31
    lcd_D7_port &= ~(1<<lcd_D7_bit);                        // assume that data is '0'
    199c:	88 e2       	ldi	r24, 0x28	; 40
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	28 e2       	ldi	r18, 0x28	; 40
    19a2:	30 e0       	ldi	r19, 0x00	; 0
    19a4:	f9 01       	movw	r30, r18
    19a6:	20 81       	ld	r18, Z
    19a8:	2e 7f       	andi	r18, 0xFE	; 254
    19aa:	fc 01       	movw	r30, r24
    19ac:	20 83       	st	Z, r18
    if (theByte & 1<<7) lcd_D7_port |= (1<<lcd_D7_bit);     // make data = '1' if necessary
    19ae:	89 a9       	ldd	r24, Y+49	; 0x31
    19b0:	88 23       	and	r24, r24
    19b2:	4c f4       	brge	.+18     	; 0x19c6 <lcd_write_4+0x44>
    19b4:	88 e2       	ldi	r24, 0x28	; 40
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	28 e2       	ldi	r18, 0x28	; 40
    19ba:	30 e0       	ldi	r19, 0x00	; 0
    19bc:	f9 01       	movw	r30, r18
    19be:	20 81       	ld	r18, Z
    19c0:	21 60       	ori	r18, 0x01	; 1
    19c2:	fc 01       	movw	r30, r24
    19c4:	20 83       	st	Z, r18

    lcd_D6_port &= ~(1<<lcd_D6_bit);                        // repeat for each data bit
    19c6:	88 e2       	ldi	r24, 0x28	; 40
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	28 e2       	ldi	r18, 0x28	; 40
    19cc:	30 e0       	ldi	r19, 0x00	; 0
    19ce:	f9 01       	movw	r30, r18
    19d0:	20 81       	ld	r18, Z
    19d2:	2d 7f       	andi	r18, 0xFD	; 253
    19d4:	fc 01       	movw	r30, r24
    19d6:	20 83       	st	Z, r18
    if (theByte & 1<<6) lcd_D6_port |= (1<<lcd_D6_bit);
    19d8:	89 a9       	ldd	r24, Y+49	; 0x31
    19da:	88 2f       	mov	r24, r24
    19dc:	90 e0       	ldi	r25, 0x00	; 0
    19de:	80 74       	andi	r24, 0x40	; 64
    19e0:	90 70       	andi	r25, 0x00	; 0
    19e2:	00 97       	sbiw	r24, 0x00	; 0
    19e4:	49 f0       	breq	.+18     	; 0x19f8 <lcd_write_4+0x76>
    19e6:	88 e2       	ldi	r24, 0x28	; 40
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	28 e2       	ldi	r18, 0x28	; 40
    19ec:	30 e0       	ldi	r19, 0x00	; 0
    19ee:	f9 01       	movw	r30, r18
    19f0:	20 81       	ld	r18, Z
    19f2:	22 60       	ori	r18, 0x02	; 2
    19f4:	fc 01       	movw	r30, r24
    19f6:	20 83       	st	Z, r18

    lcd_D5_port &= ~(1<<lcd_D5_bit);
    19f8:	88 e2       	ldi	r24, 0x28	; 40
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	28 e2       	ldi	r18, 0x28	; 40
    19fe:	30 e0       	ldi	r19, 0x00	; 0
    1a00:	f9 01       	movw	r30, r18
    1a02:	20 81       	ld	r18, Z
    1a04:	2b 7f       	andi	r18, 0xFB	; 251
    1a06:	fc 01       	movw	r30, r24
    1a08:	20 83       	st	Z, r18
    if (theByte & 1<<5) lcd_D5_port |= (1<<lcd_D5_bit);
    1a0a:	89 a9       	ldd	r24, Y+49	; 0x31
    1a0c:	88 2f       	mov	r24, r24
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	80 72       	andi	r24, 0x20	; 32
    1a12:	90 70       	andi	r25, 0x00	; 0
    1a14:	00 97       	sbiw	r24, 0x00	; 0
    1a16:	49 f0       	breq	.+18     	; 0x1a2a <lcd_write_4+0xa8>
    1a18:	88 e2       	ldi	r24, 0x28	; 40
    1a1a:	90 e0       	ldi	r25, 0x00	; 0
    1a1c:	28 e2       	ldi	r18, 0x28	; 40
    1a1e:	30 e0       	ldi	r19, 0x00	; 0
    1a20:	f9 01       	movw	r30, r18
    1a22:	20 81       	ld	r18, Z
    1a24:	24 60       	ori	r18, 0x04	; 4
    1a26:	fc 01       	movw	r30, r24
    1a28:	20 83       	st	Z, r18

    lcd_D4_port &= ~(1<<lcd_D4_bit);
    1a2a:	88 e2       	ldi	r24, 0x28	; 40
    1a2c:	90 e0       	ldi	r25, 0x00	; 0
    1a2e:	28 e2       	ldi	r18, 0x28	; 40
    1a30:	30 e0       	ldi	r19, 0x00	; 0
    1a32:	f9 01       	movw	r30, r18
    1a34:	20 81       	ld	r18, Z
    1a36:	27 7f       	andi	r18, 0xF7	; 247
    1a38:	fc 01       	movw	r30, r24
    1a3a:	20 83       	st	Z, r18
    if (theByte & 1<<4) lcd_D4_port |= (1<<lcd_D4_bit);
    1a3c:	89 a9       	ldd	r24, Y+49	; 0x31
    1a3e:	88 2f       	mov	r24, r24
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	80 71       	andi	r24, 0x10	; 16
    1a44:	90 70       	andi	r25, 0x00	; 0
    1a46:	00 97       	sbiw	r24, 0x00	; 0
    1a48:	49 f0       	breq	.+18     	; 0x1a5c <lcd_write_4+0xda>
    1a4a:	88 e2       	ldi	r24, 0x28	; 40
    1a4c:	90 e0       	ldi	r25, 0x00	; 0
    1a4e:	28 e2       	ldi	r18, 0x28	; 40
    1a50:	30 e0       	ldi	r19, 0x00	; 0
    1a52:	f9 01       	movw	r30, r18
    1a54:	20 81       	ld	r18, Z
    1a56:	28 60       	ori	r18, 0x08	; 8
    1a58:	fc 01       	movw	r30, r24
    1a5a:	20 83       	st	Z, r18

    lcd_E_port |= (1<<lcd_E_bit);                   
    1a5c:	88 e2       	ldi	r24, 0x28	; 40
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	28 e2       	ldi	r18, 0x28	; 40
    1a62:	30 e0       	ldi	r19, 0x00	; 0
    1a64:	f9 01       	movw	r30, r18
    1a66:	20 81       	ld	r18, Z
    1a68:	20 61       	ori	r18, 0x10	; 16
    1a6a:	fc 01       	movw	r30, r24
    1a6c:	20 83       	st	Z, r18
    1a6e:	80 e0       	ldi	r24, 0x00	; 0
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	a0 e8       	ldi	r26, 0x80	; 128
    1a74:	bf e3       	ldi	r27, 0x3F	; 63
    1a76:	89 83       	std	Y+1, r24	; 0x01
    1a78:	9a 83       	std	Y+2, r25	; 0x02
    1a7a:	ab 83       	std	Y+3, r26	; 0x03
    1a7c:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
    1a7e:	69 81       	ldd	r22, Y+1	; 0x01
    1a80:	7a 81       	ldd	r23, Y+2	; 0x02
    1a82:	8b 81       	ldd	r24, Y+3	; 0x03
    1a84:	9c 81       	ldd	r25, Y+4	; 0x04
    1a86:	2b ea       	ldi	r18, 0xAB	; 171
    1a88:	3a ea       	ldi	r19, 0xAA	; 170
    1a8a:	4a ea       	ldi	r20, 0xAA	; 170
    1a8c:	50 e4       	ldi	r21, 0x40	; 64
    1a8e:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <__mulsf3>
    1a92:	dc 01       	movw	r26, r24
    1a94:	cb 01       	movw	r24, r22
    1a96:	8d 83       	std	Y+5, r24	; 0x05
    1a98:	9e 83       	std	Y+6, r25	; 0x06
    1a9a:	af 83       	std	Y+7, r26	; 0x07
    1a9c:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1a9e:	11 e0       	ldi	r17, 0x01	; 1
    1aa0:	6d 81       	ldd	r22, Y+5	; 0x05
    1aa2:	7e 81       	ldd	r23, Y+6	; 0x06
    1aa4:	8f 81       	ldd	r24, Y+7	; 0x07
    1aa6:	98 85       	ldd	r25, Y+8	; 0x08
    1aa8:	20 e0       	ldi	r18, 0x00	; 0
    1aaa:	30 e0       	ldi	r19, 0x00	; 0
    1aac:	40 e8       	ldi	r20, 0x80	; 128
    1aae:	5f e3       	ldi	r21, 0x3F	; 63
    1ab0:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <__ltsf2>
    1ab4:	88 23       	and	r24, r24
    1ab6:	0c f0       	brlt	.+2      	; 0x1aba <lcd_write_4+0x138>
    1ab8:	10 e0       	ldi	r17, 0x00	; 0
    1aba:	11 23       	and	r17, r17
    1abc:	19 f0       	breq	.+6      	; 0x1ac4 <lcd_write_4+0x142>
		__ticks = 1;
    1abe:	81 e0       	ldi	r24, 0x01	; 1
    1ac0:	89 87       	std	Y+9, r24	; 0x09
    1ac2:	a3 c0       	rjmp	.+326    	; 0x1c0a <lcd_write_4+0x288>
	else if (__tmp > 255)
    1ac4:	11 e0       	ldi	r17, 0x01	; 1
    1ac6:	6d 81       	ldd	r22, Y+5	; 0x05
    1ac8:	7e 81       	ldd	r23, Y+6	; 0x06
    1aca:	8f 81       	ldd	r24, Y+7	; 0x07
    1acc:	98 85       	ldd	r25, Y+8	; 0x08
    1ace:	20 e0       	ldi	r18, 0x00	; 0
    1ad0:	30 e0       	ldi	r19, 0x00	; 0
    1ad2:	4f e7       	ldi	r20, 0x7F	; 127
    1ad4:	53 e4       	ldi	r21, 0x43	; 67
    1ad6:	0e 94 0c 18 	call	0x3018	; 0x3018 <__gtsf2>
    1ada:	18 16       	cp	r1, r24
    1adc:	0c f0       	brlt	.+2      	; 0x1ae0 <lcd_write_4+0x15e>
    1ade:	10 e0       	ldi	r17, 0x00	; 0
    1ae0:	11 23       	and	r17, r17
    1ae2:	09 f4       	brne	.+2      	; 0x1ae6 <lcd_write_4+0x164>
    1ae4:	89 c0       	rjmp	.+274    	; 0x1bf8 <lcd_write_4+0x276>
	{
		_delay_ms(__us / 1000.0);
    1ae6:	69 81       	ldd	r22, Y+1	; 0x01
    1ae8:	7a 81       	ldd	r23, Y+2	; 0x02
    1aea:	8b 81       	ldd	r24, Y+3	; 0x03
    1aec:	9c 81       	ldd	r25, Y+4	; 0x04
    1aee:	20 e0       	ldi	r18, 0x00	; 0
    1af0:	30 e0       	ldi	r19, 0x00	; 0
    1af2:	4a e7       	ldi	r20, 0x7A	; 122
    1af4:	54 e4       	ldi	r21, 0x44	; 68
    1af6:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <__divsf3>
    1afa:	dc 01       	movw	r26, r24
    1afc:	cb 01       	movw	r24, r22
    1afe:	8a 87       	std	Y+10, r24	; 0x0a
    1b00:	9b 87       	std	Y+11, r25	; 0x0b
    1b02:	ac 87       	std	Y+12, r26	; 0x0c
    1b04:	bd 87       	std	Y+13, r27	; 0x0d
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    1b06:	6a 85       	ldd	r22, Y+10	; 0x0a
    1b08:	7b 85       	ldd	r23, Y+11	; 0x0b
    1b0a:	8c 85       	ldd	r24, Y+12	; 0x0c
    1b0c:	9d 85       	ldd	r25, Y+13	; 0x0d
    1b0e:	20 e0       	ldi	r18, 0x00	; 0
    1b10:	30 e0       	ldi	r19, 0x00	; 0
    1b12:	4a e7       	ldi	r20, 0x7A	; 122
    1b14:	55 e4       	ldi	r21, 0x45	; 69
    1b16:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <__mulsf3>
    1b1a:	dc 01       	movw	r26, r24
    1b1c:	cb 01       	movw	r24, r22
    1b1e:	8e 87       	std	Y+14, r24	; 0x0e
    1b20:	9f 87       	std	Y+15, r25	; 0x0f
    1b22:	a8 8b       	std	Y+16, r26	; 0x10
    1b24:	b9 8b       	std	Y+17, r27	; 0x11
	if (__tmp < 1.0)
    1b26:	11 e0       	ldi	r17, 0x01	; 1
    1b28:	6e 85       	ldd	r22, Y+14	; 0x0e
    1b2a:	7f 85       	ldd	r23, Y+15	; 0x0f
    1b2c:	88 89       	ldd	r24, Y+16	; 0x10
    1b2e:	99 89       	ldd	r25, Y+17	; 0x11
    1b30:	20 e0       	ldi	r18, 0x00	; 0
    1b32:	30 e0       	ldi	r19, 0x00	; 0
    1b34:	40 e8       	ldi	r20, 0x80	; 128
    1b36:	5f e3       	ldi	r21, 0x3F	; 63
    1b38:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <__ltsf2>
    1b3c:	88 23       	and	r24, r24
    1b3e:	0c f0       	brlt	.+2      	; 0x1b42 <lcd_write_4+0x1c0>
    1b40:	10 e0       	ldi	r17, 0x00	; 0
    1b42:	11 23       	and	r17, r17
    1b44:	29 f0       	breq	.+10     	; 0x1b50 <lcd_write_4+0x1ce>
		__ticks = 1;
    1b46:	81 e0       	ldi	r24, 0x01	; 1
    1b48:	90 e0       	ldi	r25, 0x00	; 0
    1b4a:	9b 8b       	std	Y+19, r25	; 0x13
    1b4c:	8a 8b       	std	Y+18, r24	; 0x12
    1b4e:	46 c0       	rjmp	.+140    	; 0x1bdc <lcd_write_4+0x25a>
	else if (__tmp > 65535)
    1b50:	11 e0       	ldi	r17, 0x01	; 1
    1b52:	6e 85       	ldd	r22, Y+14	; 0x0e
    1b54:	7f 85       	ldd	r23, Y+15	; 0x0f
    1b56:	88 89       	ldd	r24, Y+16	; 0x10
    1b58:	99 89       	ldd	r25, Y+17	; 0x11
    1b5a:	20 e0       	ldi	r18, 0x00	; 0
    1b5c:	3f ef       	ldi	r19, 0xFF	; 255
    1b5e:	4f e7       	ldi	r20, 0x7F	; 127
    1b60:	57 e4       	ldi	r21, 0x47	; 71
    1b62:	0e 94 0c 18 	call	0x3018	; 0x3018 <__gtsf2>
    1b66:	18 16       	cp	r1, r24
    1b68:	0c f0       	brlt	.+2      	; 0x1b6c <lcd_write_4+0x1ea>
    1b6a:	10 e0       	ldi	r17, 0x00	; 0
    1b6c:	11 23       	and	r17, r17
    1b6e:	61 f1       	breq	.+88     	; 0x1bc8 <lcd_write_4+0x246>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b70:	6a 85       	ldd	r22, Y+10	; 0x0a
    1b72:	7b 85       	ldd	r23, Y+11	; 0x0b
    1b74:	8c 85       	ldd	r24, Y+12	; 0x0c
    1b76:	9d 85       	ldd	r25, Y+13	; 0x0d
    1b78:	20 e0       	ldi	r18, 0x00	; 0
    1b7a:	30 e0       	ldi	r19, 0x00	; 0
    1b7c:	40 e2       	ldi	r20, 0x20	; 32
    1b7e:	51 e4       	ldi	r21, 0x41	; 65
    1b80:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <__mulsf3>
    1b84:	dc 01       	movw	r26, r24
    1b86:	cb 01       	movw	r24, r22
    1b88:	bc 01       	movw	r22, r24
    1b8a:	cd 01       	movw	r24, r26
    1b8c:	0e 94 90 14 	call	0x2920	; 0x2920 <__fixunssfsi>
    1b90:	dc 01       	movw	r26, r24
    1b92:	cb 01       	movw	r24, r22
    1b94:	9b 8b       	std	Y+19, r25	; 0x13
    1b96:	8a 8b       	std	Y+18, r24	; 0x12
    1b98:	12 c0       	rjmp	.+36     	; 0x1bbe <lcd_write_4+0x23c>
    1b9a:	80 e9       	ldi	r24, 0x90	; 144
    1b9c:	91 e0       	ldi	r25, 0x01	; 1
    1b9e:	9d 8b       	std	Y+21, r25	; 0x15
    1ba0:	8c 8b       	std	Y+20, r24	; 0x14
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ba2:	8c 89       	ldd	r24, Y+20	; 0x14
    1ba4:	9d 89       	ldd	r25, Y+21	; 0x15
    1ba6:	8c 01       	movw	r16, r24
    1ba8:	c8 01       	movw	r24, r16
    1baa:	01 97       	sbiw	r24, 0x01	; 1
    1bac:	f1 f7       	brne	.-4      	; 0x1baa <lcd_write_4+0x228>
    1bae:	8c 01       	movw	r16, r24
    1bb0:	1d 8b       	std	Y+21, r17	; 0x15
    1bb2:	0c 8b       	std	Y+20, r16	; 0x14
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bb4:	8a 89       	ldd	r24, Y+18	; 0x12
    1bb6:	9b 89       	ldd	r25, Y+19	; 0x13
    1bb8:	01 97       	sbiw	r24, 0x01	; 1
    1bba:	9b 8b       	std	Y+19, r25	; 0x13
    1bbc:	8a 8b       	std	Y+18, r24	; 0x12
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bbe:	8a 89       	ldd	r24, Y+18	; 0x12
    1bc0:	9b 89       	ldd	r25, Y+19	; 0x13
    1bc2:	00 97       	sbiw	r24, 0x00	; 0
    1bc4:	51 f7       	brne	.-44     	; 0x1b9a <lcd_write_4+0x218>
    1bc6:	28 c0       	rjmp	.+80     	; 0x1c18 <lcd_write_4+0x296>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bc8:	6e 85       	ldd	r22, Y+14	; 0x0e
    1bca:	7f 85       	ldd	r23, Y+15	; 0x0f
    1bcc:	88 89       	ldd	r24, Y+16	; 0x10
    1bce:	99 89       	ldd	r25, Y+17	; 0x11
    1bd0:	0e 94 90 14 	call	0x2920	; 0x2920 <__fixunssfsi>
    1bd4:	dc 01       	movw	r26, r24
    1bd6:	cb 01       	movw	r24, r22
    1bd8:	9b 8b       	std	Y+19, r25	; 0x13
    1bda:	8a 8b       	std	Y+18, r24	; 0x12
    1bdc:	8a 89       	ldd	r24, Y+18	; 0x12
    1bde:	9b 89       	ldd	r25, Y+19	; 0x13
    1be0:	9f 8b       	std	Y+23, r25	; 0x17
    1be2:	8e 8b       	std	Y+22, r24	; 0x16
    1be4:	8e 89       	ldd	r24, Y+22	; 0x16
    1be6:	9f 89       	ldd	r25, Y+23	; 0x17
    1be8:	8c 01       	movw	r16, r24
    1bea:	f8 01       	movw	r30, r16
    1bec:	31 97       	sbiw	r30, 0x01	; 1
    1bee:	f1 f7       	brne	.-4      	; 0x1bec <lcd_write_4+0x26a>
    1bf0:	8f 01       	movw	r16, r30
    1bf2:	1f 8b       	std	Y+23, r17	; 0x17
    1bf4:	0e 8b       	std	Y+22, r16	; 0x16
    1bf6:	10 c0       	rjmp	.+32     	; 0x1c18 <lcd_write_4+0x296>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1bf8:	6d 81       	ldd	r22, Y+5	; 0x05
    1bfa:	7e 81       	ldd	r23, Y+6	; 0x06
    1bfc:	8f 81       	ldd	r24, Y+7	; 0x07
    1bfe:	98 85       	ldd	r25, Y+8	; 0x08
    1c00:	0e 94 90 14 	call	0x2920	; 0x2920 <__fixunssfsi>
    1c04:	dc 01       	movw	r26, r24
    1c06:	cb 01       	movw	r24, r22
    1c08:	89 87       	std	Y+9, r24	; 0x09
    1c0a:	89 85       	ldd	r24, Y+9	; 0x09
    1c0c:	88 8f       	std	Y+24, r24	; 0x18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1c0e:	88 8d       	ldd	r24, Y+24	; 0x18
    1c10:	18 2f       	mov	r17, r24
    1c12:	1a 95       	dec	r17
    1c14:	f1 f7       	brne	.-4      	; 0x1c12 <lcd_write_4+0x290>
    1c16:	18 8f       	std	Y+24, r17	; 0x18
    _delay_us(1);                                   
    lcd_E_port &= ~(1<<lcd_E_bit);                  
    1c18:	88 e2       	ldi	r24, 0x28	; 40
    1c1a:	90 e0       	ldi	r25, 0x00	; 0
    1c1c:	28 e2       	ldi	r18, 0x28	; 40
    1c1e:	30 e0       	ldi	r19, 0x00	; 0
    1c20:	f9 01       	movw	r30, r18
    1c22:	20 81       	ld	r18, Z
    1c24:	2f 7e       	andi	r18, 0xEF	; 239
    1c26:	fc 01       	movw	r30, r24
    1c28:	20 83       	st	Z, r18
    1c2a:	80 e0       	ldi	r24, 0x00	; 0
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	a0 e8       	ldi	r26, 0x80	; 128
    1c30:	bf e3       	ldi	r27, 0x3F	; 63
    1c32:	89 8f       	std	Y+25, r24	; 0x19
    1c34:	9a 8f       	std	Y+26, r25	; 0x1a
    1c36:	ab 8f       	std	Y+27, r26	; 0x1b
    1c38:	bc 8f       	std	Y+28, r27	; 0x1c
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
    1c3a:	69 8d       	ldd	r22, Y+25	; 0x19
    1c3c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c3e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c40:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c42:	2b ea       	ldi	r18, 0xAB	; 171
    1c44:	3a ea       	ldi	r19, 0xAA	; 170
    1c46:	4a ea       	ldi	r20, 0xAA	; 170
    1c48:	50 e4       	ldi	r21, 0x40	; 64
    1c4a:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <__mulsf3>
    1c4e:	dc 01       	movw	r26, r24
    1c50:	cb 01       	movw	r24, r22
    1c52:	8d 8f       	std	Y+29, r24	; 0x1d
    1c54:	9e 8f       	std	Y+30, r25	; 0x1e
    1c56:	af 8f       	std	Y+31, r26	; 0x1f
    1c58:	b8 a3       	std	Y+32, r27	; 0x20
	if (__tmp < 1.0)
    1c5a:	11 e0       	ldi	r17, 0x01	; 1
    1c5c:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1c5e:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1c60:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c62:	98 a1       	ldd	r25, Y+32	; 0x20
    1c64:	20 e0       	ldi	r18, 0x00	; 0
    1c66:	30 e0       	ldi	r19, 0x00	; 0
    1c68:	40 e8       	ldi	r20, 0x80	; 128
    1c6a:	5f e3       	ldi	r21, 0x3F	; 63
    1c6c:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <__ltsf2>
    1c70:	88 23       	and	r24, r24
    1c72:	0c f0       	brlt	.+2      	; 0x1c76 <lcd_write_4+0x2f4>
    1c74:	10 e0       	ldi	r17, 0x00	; 0
    1c76:	11 23       	and	r17, r17
    1c78:	19 f0       	breq	.+6      	; 0x1c80 <lcd_write_4+0x2fe>
		__ticks = 1;
    1c7a:	81 e0       	ldi	r24, 0x01	; 1
    1c7c:	89 a3       	std	Y+33, r24	; 0x21
    1c7e:	a3 c0       	rjmp	.+326    	; 0x1dc6 <lcd_write_4+0x444>
	else if (__tmp > 255)
    1c80:	11 e0       	ldi	r17, 0x01	; 1
    1c82:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1c84:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1c86:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c88:	98 a1       	ldd	r25, Y+32	; 0x20
    1c8a:	20 e0       	ldi	r18, 0x00	; 0
    1c8c:	30 e0       	ldi	r19, 0x00	; 0
    1c8e:	4f e7       	ldi	r20, 0x7F	; 127
    1c90:	53 e4       	ldi	r21, 0x43	; 67
    1c92:	0e 94 0c 18 	call	0x3018	; 0x3018 <__gtsf2>
    1c96:	18 16       	cp	r1, r24
    1c98:	0c f0       	brlt	.+2      	; 0x1c9c <lcd_write_4+0x31a>
    1c9a:	10 e0       	ldi	r17, 0x00	; 0
    1c9c:	11 23       	and	r17, r17
    1c9e:	09 f4       	brne	.+2      	; 0x1ca2 <lcd_write_4+0x320>
    1ca0:	89 c0       	rjmp	.+274    	; 0x1db4 <lcd_write_4+0x432>
	{
		_delay_ms(__us / 1000.0);
    1ca2:	69 8d       	ldd	r22, Y+25	; 0x19
    1ca4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ca6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ca8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1caa:	20 e0       	ldi	r18, 0x00	; 0
    1cac:	30 e0       	ldi	r19, 0x00	; 0
    1cae:	4a e7       	ldi	r20, 0x7A	; 122
    1cb0:	54 e4       	ldi	r21, 0x44	; 68
    1cb2:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <__divsf3>
    1cb6:	dc 01       	movw	r26, r24
    1cb8:	cb 01       	movw	r24, r22
    1cba:	8a a3       	std	Y+34, r24	; 0x22
    1cbc:	9b a3       	std	Y+35, r25	; 0x23
    1cbe:	ac a3       	std	Y+36, r26	; 0x24
    1cc0:	bd a3       	std	Y+37, r27	; 0x25
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    1cc2:	6a a1       	ldd	r22, Y+34	; 0x22
    1cc4:	7b a1       	ldd	r23, Y+35	; 0x23
    1cc6:	8c a1       	ldd	r24, Y+36	; 0x24
    1cc8:	9d a1       	ldd	r25, Y+37	; 0x25
    1cca:	20 e0       	ldi	r18, 0x00	; 0
    1ccc:	30 e0       	ldi	r19, 0x00	; 0
    1cce:	4a e7       	ldi	r20, 0x7A	; 122
    1cd0:	55 e4       	ldi	r21, 0x45	; 69
    1cd2:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <__mulsf3>
    1cd6:	dc 01       	movw	r26, r24
    1cd8:	cb 01       	movw	r24, r22
    1cda:	8e a3       	std	Y+38, r24	; 0x26
    1cdc:	9f a3       	std	Y+39, r25	; 0x27
    1cde:	a8 a7       	std	Y+40, r26	; 0x28
    1ce0:	b9 a7       	std	Y+41, r27	; 0x29
	if (__tmp < 1.0)
    1ce2:	11 e0       	ldi	r17, 0x01	; 1
    1ce4:	6e a1       	ldd	r22, Y+38	; 0x26
    1ce6:	7f a1       	ldd	r23, Y+39	; 0x27
    1ce8:	88 a5       	ldd	r24, Y+40	; 0x28
    1cea:	99 a5       	ldd	r25, Y+41	; 0x29
    1cec:	20 e0       	ldi	r18, 0x00	; 0
    1cee:	30 e0       	ldi	r19, 0x00	; 0
    1cf0:	40 e8       	ldi	r20, 0x80	; 128
    1cf2:	5f e3       	ldi	r21, 0x3F	; 63
    1cf4:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <__ltsf2>
    1cf8:	88 23       	and	r24, r24
    1cfa:	0c f0       	brlt	.+2      	; 0x1cfe <lcd_write_4+0x37c>
    1cfc:	10 e0       	ldi	r17, 0x00	; 0
    1cfe:	11 23       	and	r17, r17
    1d00:	29 f0       	breq	.+10     	; 0x1d0c <lcd_write_4+0x38a>
		__ticks = 1;
    1d02:	81 e0       	ldi	r24, 0x01	; 1
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	9b a7       	std	Y+43, r25	; 0x2b
    1d08:	8a a7       	std	Y+42, r24	; 0x2a
    1d0a:	46 c0       	rjmp	.+140    	; 0x1d98 <lcd_write_4+0x416>
	else if (__tmp > 65535)
    1d0c:	11 e0       	ldi	r17, 0x01	; 1
    1d0e:	6e a1       	ldd	r22, Y+38	; 0x26
    1d10:	7f a1       	ldd	r23, Y+39	; 0x27
    1d12:	88 a5       	ldd	r24, Y+40	; 0x28
    1d14:	99 a5       	ldd	r25, Y+41	; 0x29
    1d16:	20 e0       	ldi	r18, 0x00	; 0
    1d18:	3f ef       	ldi	r19, 0xFF	; 255
    1d1a:	4f e7       	ldi	r20, 0x7F	; 127
    1d1c:	57 e4       	ldi	r21, 0x47	; 71
    1d1e:	0e 94 0c 18 	call	0x3018	; 0x3018 <__gtsf2>
    1d22:	18 16       	cp	r1, r24
    1d24:	0c f0       	brlt	.+2      	; 0x1d28 <lcd_write_4+0x3a6>
    1d26:	10 e0       	ldi	r17, 0x00	; 0
    1d28:	11 23       	and	r17, r17
    1d2a:	61 f1       	breq	.+88     	; 0x1d84 <lcd_write_4+0x402>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d2c:	6a a1       	ldd	r22, Y+34	; 0x22
    1d2e:	7b a1       	ldd	r23, Y+35	; 0x23
    1d30:	8c a1       	ldd	r24, Y+36	; 0x24
    1d32:	9d a1       	ldd	r25, Y+37	; 0x25
    1d34:	20 e0       	ldi	r18, 0x00	; 0
    1d36:	30 e0       	ldi	r19, 0x00	; 0
    1d38:	40 e2       	ldi	r20, 0x20	; 32
    1d3a:	51 e4       	ldi	r21, 0x41	; 65
    1d3c:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <__mulsf3>
    1d40:	dc 01       	movw	r26, r24
    1d42:	cb 01       	movw	r24, r22
    1d44:	bc 01       	movw	r22, r24
    1d46:	cd 01       	movw	r24, r26
    1d48:	0e 94 90 14 	call	0x2920	; 0x2920 <__fixunssfsi>
    1d4c:	dc 01       	movw	r26, r24
    1d4e:	cb 01       	movw	r24, r22
    1d50:	9b a7       	std	Y+43, r25	; 0x2b
    1d52:	8a a7       	std	Y+42, r24	; 0x2a
    1d54:	12 c0       	rjmp	.+36     	; 0x1d7a <lcd_write_4+0x3f8>
    1d56:	80 e9       	ldi	r24, 0x90	; 144
    1d58:	91 e0       	ldi	r25, 0x01	; 1
    1d5a:	9d a7       	std	Y+45, r25	; 0x2d
    1d5c:	8c a7       	std	Y+44, r24	; 0x2c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d5e:	8c a5       	ldd	r24, Y+44	; 0x2c
    1d60:	9d a5       	ldd	r25, Y+45	; 0x2d
    1d62:	8c 01       	movw	r16, r24
    1d64:	c8 01       	movw	r24, r16
    1d66:	01 97       	sbiw	r24, 0x01	; 1
    1d68:	f1 f7       	brne	.-4      	; 0x1d66 <lcd_write_4+0x3e4>
    1d6a:	8c 01       	movw	r16, r24
    1d6c:	1d a7       	std	Y+45, r17	; 0x2d
    1d6e:	0c a7       	std	Y+44, r16	; 0x2c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d70:	8a a5       	ldd	r24, Y+42	; 0x2a
    1d72:	9b a5       	ldd	r25, Y+43	; 0x2b
    1d74:	01 97       	sbiw	r24, 0x01	; 1
    1d76:	9b a7       	std	Y+43, r25	; 0x2b
    1d78:	8a a7       	std	Y+42, r24	; 0x2a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d7a:	8a a5       	ldd	r24, Y+42	; 0x2a
    1d7c:	9b a5       	ldd	r25, Y+43	; 0x2b
    1d7e:	00 97       	sbiw	r24, 0x00	; 0
    1d80:	51 f7       	brne	.-44     	; 0x1d56 <lcd_write_4+0x3d4>
    1d82:	28 c0       	rjmp	.+80     	; 0x1dd4 <lcd_write_4+0x452>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d84:	6e a1       	ldd	r22, Y+38	; 0x26
    1d86:	7f a1       	ldd	r23, Y+39	; 0x27
    1d88:	88 a5       	ldd	r24, Y+40	; 0x28
    1d8a:	99 a5       	ldd	r25, Y+41	; 0x29
    1d8c:	0e 94 90 14 	call	0x2920	; 0x2920 <__fixunssfsi>
    1d90:	dc 01       	movw	r26, r24
    1d92:	cb 01       	movw	r24, r22
    1d94:	9b a7       	std	Y+43, r25	; 0x2b
    1d96:	8a a7       	std	Y+42, r24	; 0x2a
    1d98:	8a a5       	ldd	r24, Y+42	; 0x2a
    1d9a:	9b a5       	ldd	r25, Y+43	; 0x2b
    1d9c:	9f a7       	std	Y+47, r25	; 0x2f
    1d9e:	8e a7       	std	Y+46, r24	; 0x2e
    1da0:	8e a5       	ldd	r24, Y+46	; 0x2e
    1da2:	9f a5       	ldd	r25, Y+47	; 0x2f
    1da4:	8c 01       	movw	r16, r24
    1da6:	f8 01       	movw	r30, r16
    1da8:	31 97       	sbiw	r30, 0x01	; 1
    1daa:	f1 f7       	brne	.-4      	; 0x1da8 <lcd_write_4+0x426>
    1dac:	8f 01       	movw	r16, r30
    1dae:	1f a7       	std	Y+47, r17	; 0x2f
    1db0:	0e a7       	std	Y+46, r16	; 0x2e
    1db2:	10 c0       	rjmp	.+32     	; 0x1dd4 <lcd_write_4+0x452>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1db4:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1db6:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1db8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1dba:	98 a1       	ldd	r25, Y+32	; 0x20
    1dbc:	0e 94 90 14 	call	0x2920	; 0x2920 <__fixunssfsi>
    1dc0:	dc 01       	movw	r26, r24
    1dc2:	cb 01       	movw	r24, r22
    1dc4:	89 a3       	std	Y+33, r24	; 0x21
    1dc6:	89 a1       	ldd	r24, Y+33	; 0x21
    1dc8:	88 ab       	std	Y+48, r24	; 0x30
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1dca:	88 a9       	ldd	r24, Y+48	; 0x30
    1dcc:	18 2f       	mov	r17, r24
    1dce:	1a 95       	dec	r17
    1dd0:	f1 f7       	brne	.-4      	; 0x1dce <lcd_write_4+0x44c>
    1dd2:	18 ab       	std	Y+48, r17	; 0x30
    _delay_us(1);                                   
}
    1dd4:	e1 96       	adiw	r28, 0x31	; 49
    1dd6:	0f b6       	in	r0, 0x3f	; 63
    1dd8:	f8 94       	cli
    1dda:	de bf       	out	0x3e, r29	; 62
    1ddc:	0f be       	out	0x3f, r0	; 63
    1dde:	cd bf       	out	0x3d, r28	; 61
    1de0:	cf 91       	pop	r28
    1de2:	df 91       	pop	r29
    1de4:	1f 91       	pop	r17
    1de6:	0f 91       	pop	r16
    1de8:	08 95       	ret

00001dea <GetKeyPressed>:
#define KEYPAD_PORT PORTD
#define KEYPAD_DDRR  DDRD
#define KEYPAD_DDRC  DDRB
#define KEYPAD_PIN  PIND
uint8_t  GetKeyPressed()
{
    1dea:	df 93       	push	r29
    1dec:	cf 93       	push	r28
    1dee:	00 d0       	rcall	.+0      	; 0x1df0 <GetKeyPressed+0x6>
    1df0:	cd b7       	in	r28, 0x3d	; 61
    1df2:	de b7       	in	r29, 0x3e	; 62
    uint8_t r,c;
    KEYPAD_PORT|= 0X0F;
    1df4:	8b e2       	ldi	r24, 0x2B	; 43
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	2b e2       	ldi	r18, 0x2B	; 43
    1dfa:	30 e0       	ldi	r19, 0x00	; 0
    1dfc:	f9 01       	movw	r30, r18
    1dfe:	20 81       	ld	r18, Z
    1e00:	2f 60       	ori	r18, 0x0F	; 15
    1e02:	fc 01       	movw	r30, r24
    1e04:	20 83       	st	Z, r18
    for(c=0;c<4;c++)
    1e06:	1a 82       	std	Y+2, r1	; 0x02
    1e08:	4c c0       	rjmp	.+152    	; 0x1ea2 <GetKeyPressed+0xb8>
    {
        KEYPAD_DDRC&=~(0XFF);
    1e0a:	84 e2       	ldi	r24, 0x24	; 36
    1e0c:	90 e0       	ldi	r25, 0x00	; 0
    1e0e:	fc 01       	movw	r30, r24
    1e10:	80 81       	ld	r24, Z
    1e12:	84 e2       	ldi	r24, 0x24	; 36
    1e14:	90 e0       	ldi	r25, 0x00	; 0
    1e16:	fc 01       	movw	r30, r24
    1e18:	10 82       	st	Z, r1
        KEYPAD_DDRR&=~(0XFF);
    1e1a:	8a e2       	ldi	r24, 0x2A	; 42
    1e1c:	90 e0       	ldi	r25, 0x00	; 0
    1e1e:	fc 01       	movw	r30, r24
    1e20:	80 81       	ld	r24, Z
    1e22:	8a e2       	ldi	r24, 0x2A	; 42
    1e24:	90 e0       	ldi	r25, 0x00	; 0
    1e26:	fc 01       	movw	r30, r24
    1e28:	10 82       	st	Z, r1
        KEYPAD_DDRC|=(0X20>>c);
    1e2a:	84 e2       	ldi	r24, 0x24	; 36
    1e2c:	90 e0       	ldi	r25, 0x00	; 0
    1e2e:	24 e2       	ldi	r18, 0x24	; 36
    1e30:	30 e0       	ldi	r19, 0x00	; 0
    1e32:	f9 01       	movw	r30, r18
    1e34:	20 81       	ld	r18, Z
    1e36:	62 2f       	mov	r22, r18
    1e38:	2a 81       	ldd	r18, Y+2	; 0x02
    1e3a:	42 2f       	mov	r20, r18
    1e3c:	50 e0       	ldi	r21, 0x00	; 0
    1e3e:	20 e2       	ldi	r18, 0x20	; 32
    1e40:	30 e0       	ldi	r19, 0x00	; 0
    1e42:	04 2e       	mov	r0, r20
    1e44:	02 c0       	rjmp	.+4      	; 0x1e4a <GetKeyPressed+0x60>
    1e46:	35 95       	asr	r19
    1e48:	27 95       	ror	r18
    1e4a:	0a 94       	dec	r0
    1e4c:	e2 f7       	brpl	.-8      	; 0x1e46 <GetKeyPressed+0x5c>
    1e4e:	26 2b       	or	r18, r22
    1e50:	fc 01       	movw	r30, r24
    1e52:	20 83       	st	Z, r18
        for(r=0;r<4;r++)
    1e54:	19 82       	std	Y+1, r1	; 0x01
    1e56:	1f c0       	rjmp	.+62     	; 0x1e96 <GetKeyPressed+0xac>
        {
            if(!(KEYPAD_PIN & (0X08>>r)))
    1e58:	89 e2       	ldi	r24, 0x29	; 41
    1e5a:	90 e0       	ldi	r25, 0x00	; 0
    1e5c:	fc 01       	movw	r30, r24
    1e5e:	80 81       	ld	r24, Z
    1e60:	28 2f       	mov	r18, r24
    1e62:	30 e0       	ldi	r19, 0x00	; 0
    1e64:	89 81       	ldd	r24, Y+1	; 0x01
    1e66:	48 2f       	mov	r20, r24
    1e68:	50 e0       	ldi	r21, 0x00	; 0
    1e6a:	88 e0       	ldi	r24, 0x08	; 8
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	04 2e       	mov	r0, r20
    1e70:	02 c0       	rjmp	.+4      	; 0x1e76 <GetKeyPressed+0x8c>
    1e72:	95 95       	asr	r25
    1e74:	87 95       	ror	r24
    1e76:	0a 94       	dec	r0
    1e78:	e2 f7       	brpl	.-8      	; 0x1e72 <GetKeyPressed+0x88>
    1e7a:	82 23       	and	r24, r18
    1e7c:	93 23       	and	r25, r19
    1e7e:	00 97       	sbiw	r24, 0x00	; 0
    1e80:	39 f4       	brne	.+14     	; 0x1e90 <GetKeyPressed+0xa6>
            {
                return r*4+c;
    1e82:	89 81       	ldd	r24, Y+1	; 0x01
    1e84:	98 2f       	mov	r25, r24
    1e86:	99 0f       	add	r25, r25
    1e88:	99 0f       	add	r25, r25
    1e8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e8c:	89 0f       	add	r24, r25
    1e8e:	0e c0       	rjmp	.+28     	; 0x1eac <GetKeyPressed+0xc2>
    for(c=0;c<4;c++)
    {
        KEYPAD_DDRC&=~(0XFF);
        KEYPAD_DDRR&=~(0XFF);
        KEYPAD_DDRC|=(0X20>>c);
        for(r=0;r<4;r++)
    1e90:	89 81       	ldd	r24, Y+1	; 0x01
    1e92:	8f 5f       	subi	r24, 0xFF	; 255
    1e94:	89 83       	std	Y+1, r24	; 0x01
    1e96:	89 81       	ldd	r24, Y+1	; 0x01
    1e98:	84 30       	cpi	r24, 0x04	; 4
    1e9a:	f0 f2       	brcs	.-68     	; 0x1e58 <GetKeyPressed+0x6e>
#define KEYPAD_PIN  PIND
uint8_t  GetKeyPressed()
{
    uint8_t r,c;
    KEYPAD_PORT|= 0X0F;
    for(c=0;c<4;c++)
    1e9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e9e:	8f 5f       	subi	r24, 0xFF	; 255
    1ea0:	8a 83       	std	Y+2, r24	; 0x02
    1ea2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea4:	84 30       	cpi	r24, 0x04	; 4
    1ea6:	08 f4       	brcc	.+2      	; 0x1eaa <GetKeyPressed+0xc0>
    1ea8:	b0 cf       	rjmp	.-160    	; 0x1e0a <GetKeyPressed+0x20>
            {
                return r*4+c;
            }
        }
    }
	return 20;
    1eaa:	84 e1       	ldi	r24, 0x14	; 20
    1eac:	0f 90       	pop	r0
    1eae:	0f 90       	pop	r0
    1eb0:	cf 91       	pop	r28
    1eb2:	df 91       	pop	r29
    1eb4:	08 95       	ret

00001eb6 <StartWaveGeneration>:

// This function generates a wave with specific periodic time and duty cycle
// Param Period : <Input> this parameters defines the periodic time for the required wave in (us)
// Param iDutyPercentage: <Input> this parameters defines the percentage of the High part : restriction range from 1 to 99
void StartWaveGeneration(int Period, int iDutyPercentage)
{
    1eb6:	df 93       	push	r29
    1eb8:	cf 93       	push	r28
    1eba:	00 d0       	rcall	.+0      	; 0x1ebc <StartWaveGeneration+0x6>
    1ebc:	00 d0       	rcall	.+0      	; 0x1ebe <StartWaveGeneration+0x8>
    1ebe:	cd b7       	in	r28, 0x3d	; 61
    1ec0:	de b7       	in	r29, 0x3e	; 62
    1ec2:	9a 83       	std	Y+2, r25	; 0x02
    1ec4:	89 83       	std	Y+1, r24	; 0x01
    1ec6:	7c 83       	std	Y+4, r23	; 0x04
    1ec8:	6b 83       	std	Y+3, r22	; 0x03
	DDRD |= 0b00100000;		// set OC0B as Output pin.
    1eca:	8a e2       	ldi	r24, 0x2A	; 42
    1ecc:	90 e0       	ldi	r25, 0x00	; 0
    1ece:	2a e2       	ldi	r18, 0x2A	; 42
    1ed0:	30 e0       	ldi	r19, 0x00	; 0
    1ed2:	f9 01       	movw	r30, r18
    1ed4:	20 81       	ld	r18, Z
    1ed6:	20 62       	ori	r18, 0x20	; 32
    1ed8:	fc 01       	movw	r30, r24
    1eda:	20 83       	st	Z, r18
	
	TCCR0A = 0b00100011;	// WGM0[2..0] = 7	(fast PWM mode)
    1edc:	84 e4       	ldi	r24, 0x44	; 68
    1ede:	90 e0       	ldi	r25, 0x00	; 0
    1ee0:	23 e2       	ldi	r18, 0x23	; 35
    1ee2:	fc 01       	movw	r30, r24
    1ee4:	20 83       	st	Z, r18
	TCCR0B = 0b00001101;	// CS0[2..0] = 5    (f/1024)
    1ee6:	85 e4       	ldi	r24, 0x45	; 69
    1ee8:	90 e0       	ldi	r25, 0x00	; 0
    1eea:	2d e0       	ldi	r18, 0x0D	; 13
    1eec:	fc 01       	movw	r30, r24
    1eee:	20 83       	st	Z, r18
							// COM0A[1,0] = 0	(do not compare with A)		
							// COM0B[1,0] = 2   (compare with B and clear on match and set on bottom)
	
	// we need to set the proper value for OCR0A now to be half of the Periodic Time
	OCR0A = Period / SingleTimerCycle;
    1ef0:	27 e4       	ldi	r18, 0x47	; 71
    1ef2:	30 e0       	ldi	r19, 0x00	; 0
    1ef4:	89 81       	ldd	r24, Y+1	; 0x01
    1ef6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ef8:	99 23       	and	r25, r25
    1efa:	0c f4       	brge	.+2      	; 0x1efe <StartWaveGeneration+0x48>
    1efc:	cf 96       	adiw	r24, 0x3f	; 63
    1efe:	08 2e       	mov	r0, r24
    1f00:	89 2f       	mov	r24, r25
    1f02:	00 0c       	add	r0, r0
    1f04:	88 1f       	adc	r24, r24
    1f06:	99 0b       	sbc	r25, r25
    1f08:	00 0c       	add	r0, r0
    1f0a:	88 1f       	adc	r24, r24
    1f0c:	99 1f       	adc	r25, r25
    1f0e:	f9 01       	movw	r30, r18
    1f10:	80 83       	st	Z, r24
	OCR0B = OCR0A * iDutyPercentage / 100;
    1f12:	28 e4       	ldi	r18, 0x48	; 72
    1f14:	30 e0       	ldi	r19, 0x00	; 0
    1f16:	87 e4       	ldi	r24, 0x47	; 71
    1f18:	90 e0       	ldi	r25, 0x00	; 0
    1f1a:	fc 01       	movw	r30, r24
    1f1c:	80 81       	ld	r24, Z
    1f1e:	68 2f       	mov	r22, r24
    1f20:	70 e0       	ldi	r23, 0x00	; 0
    1f22:	4b 81       	ldd	r20, Y+3	; 0x03
    1f24:	5c 81       	ldd	r21, Y+4	; 0x04
    1f26:	64 9f       	mul	r22, r20
    1f28:	c0 01       	movw	r24, r0
    1f2a:	65 9f       	mul	r22, r21
    1f2c:	90 0d       	add	r25, r0
    1f2e:	74 9f       	mul	r23, r20
    1f30:	90 0d       	add	r25, r0
    1f32:	11 24       	eor	r1, r1
    1f34:	44 e6       	ldi	r20, 0x64	; 100
    1f36:	50 e0       	ldi	r21, 0x00	; 0
    1f38:	ba 01       	movw	r22, r20
    1f3a:	0e 94 7e 1a 	call	0x34fc	; 0x34fc <__divmodhi4>
    1f3e:	ab 01       	movw	r20, r22
    1f40:	ca 01       	movw	r24, r20
    1f42:	f9 01       	movw	r30, r18
    1f44:	80 83       	st	Z, r24
}
    1f46:	0f 90       	pop	r0
    1f48:	0f 90       	pop	r0
    1f4a:	0f 90       	pop	r0
    1f4c:	0f 90       	pop	r0
    1f4e:	cf 91       	pop	r28
    1f50:	df 91       	pop	r29
    1f52:	08 95       	ret

00001f54 <StopWaveGeneration>:

void StopWaveGeneration()
{
    1f54:	df 93       	push	r29
    1f56:	cf 93       	push	r28
    1f58:	cd b7       	in	r28, 0x3d	; 61
    1f5a:	de b7       	in	r29, 0x3e	; 62
	TCCR0B &= 0xF8;
    1f5c:	85 e4       	ldi	r24, 0x45	; 69
    1f5e:	90 e0       	ldi	r25, 0x00	; 0
    1f60:	25 e4       	ldi	r18, 0x45	; 69
    1f62:	30 e0       	ldi	r19, 0x00	; 0
    1f64:	f9 01       	movw	r30, r18
    1f66:	20 81       	ld	r18, Z
    1f68:	28 7f       	andi	r18, 0xF8	; 248
    1f6a:	fc 01       	movw	r30, r24
    1f6c:	20 83       	st	Z, r18
}
    1f6e:	cf 91       	pop	r28
    1f70:	df 91       	pop	r29
    1f72:	08 95       	ret

00001f74 <PWMInti>:

void PWMInti ()
{	
    1f74:	df 93       	push	r29
    1f76:	cf 93       	push	r28
    1f78:	cd b7       	in	r28, 0x3d	; 61
    1f7a:	de b7       	in	r29, 0x3e	; 62
	 // enable Interrupt 
	   // 3amaten ay interrupt 
		  sei(); 
    1f7c:	78 94       	sei
		  
       // enable Interrupt for timer 1
	   // 3alshan ye5ale timer1 yeb3at interrupt
          TIMSK1 |= (1 << TOIE1);
    1f7e:	8f e6       	ldi	r24, 0x6F	; 111
    1f80:	90 e0       	ldi	r25, 0x00	; 0
    1f82:	2f e6       	ldi	r18, 0x6F	; 111
    1f84:	30 e0       	ldi	r19, 0x00	; 0
    1f86:	f9 01       	movw	r30, r18
    1f88:	20 81       	ld	r18, Z
    1f8a:	21 60       	ori	r18, 0x01	; 1
    1f8c:	fc 01       	movw	r30, r24
    1f8e:	20 83       	st	Z, r18

       // Start timer at Fcpu/16
       // bash3'alo we a7aded el frecunce 
          TCCR1B |= ((1 << CS12) | (1 << CS10)); 
    1f90:	81 e8       	ldi	r24, 0x81	; 129
    1f92:	90 e0       	ldi	r25, 0x00	; 0
    1f94:	21 e8       	ldi	r18, 0x81	; 129
    1f96:	30 e0       	ldi	r19, 0x00	; 0
    1f98:	f9 01       	movw	r30, r18
    1f9a:	20 81       	ld	r18, Z
    1f9c:	25 60       	ori	r18, 0x05	; 5
    1f9e:	fc 01       	movw	r30, r24
    1fa0:	20 83       	st	Z, r18

       //Initialize Counter , 2^ 16 - 16000 = 49536 
	   // 3alshan howa be yo2f uk] max beta3o 2^16
		  TCNT1 = (2^16 - 1000); //0x0000C180; //49536
    1fa2:	84 e8       	ldi	r24, 0x84	; 132
    1fa4:	90 e0       	ldi	r25, 0x00	; 0
    1fa6:	2a e2       	ldi	r18, 0x2A	; 42
    1fa8:	3c ef       	ldi	r19, 0xFC	; 252
    1faa:	fc 01       	movw	r30, r24
    1fac:	31 83       	std	Z+1, r19	; 0x01
    1fae:	20 83       	st	Z, r18
		  
}
    1fb0:	cf 91       	pop	r28
    1fb2:	df 91       	pop	r29
    1fb4:	08 95       	ret

00001fb6 <main>:
// end PWM

void checkpass() ;

int main(void)
{
    1fb6:	0f 93       	push	r16
    1fb8:	1f 93       	push	r17
    1fba:	df 93       	push	r29
    1fbc:	cf 93       	push	r28
    1fbe:	cd b7       	in	r28, 0x3d	; 61
    1fc0:	de b7       	in	r29, 0x3e	; 62
    1fc2:	c4 54       	subi	r28, 0x44	; 68
    1fc4:	d0 40       	sbci	r29, 0x00	; 0
    1fc6:	0f b6       	in	r0, 0x3f	; 63
    1fc8:	f8 94       	cli
    1fca:	de bf       	out	0x3e, r29	; 62
    1fcc:	0f be       	out	0x3f, r0	; 63
    1fce:	cd bf       	out	0x3d, r28	; 61
	uint8_t keys[]="D#0*C987B654A321";
    1fd0:	ce 01       	movw	r24, r28
    1fd2:	c4 96       	adiw	r24, 0x34	; 52
    1fd4:	21 e5       	ldi	r18, 0x51	; 81
    1fd6:	31 e0       	ldi	r19, 0x01	; 1
    1fd8:	41 e1       	ldi	r20, 0x11	; 17
    1fda:	f9 01       	movw	r30, r18
    1fdc:	00 80       	ld	r0, Z
    1fde:	2f 5f       	subi	r18, 0xFF	; 255
    1fe0:	3f 4f       	sbci	r19, 0xFF	; 255
    1fe2:	fc 01       	movw	r30, r24
    1fe4:	00 82       	st	Z, r0
    1fe6:	01 96       	adiw	r24, 0x01	; 1
    1fe8:	41 50       	subi	r20, 0x01	; 1
    1fea:	44 23       	and	r20, r20
    1fec:	b1 f7       	brne	.-20     	; 0x1fda <main+0x24>
	lcd_init_4d();                                 
    1fee:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_init_4d>
	lcd_write_string_4d(pass);
    1ff2:	83 e0       	ldi	r24, 0x03	; 3
    1ff4:	91 e0       	ldi	r25, 0x01	; 1
    1ff6:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <lcd_write_string_4d>
	int countpass = 0 ;	
    1ffa:	1a 82       	std	Y+2, r1	; 0x02
    1ffc:	19 82       	std	Y+1, r1	; 0x01
    1ffe:	01 c0       	rjmp	.+2      	; 0x2002 <main+0x4c>
					countpass = 0;
				}
				//_delay_us(1000000);
				_delay_us(20000);
		}
	}	
    2000:	00 00       	nop
	lcd_init_4d();                                 
	lcd_write_string_4d(pass);
	int countpass = 0 ;	
	while(1)
	{
		uint8_t index =GetKeyPressed();				
    2002:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <GetKeyPressed>
    2006:	8b 83       	std	Y+3, r24	; 0x03
		if(index==12)
    2008:	8b 81       	ldd	r24, Y+3	; 0x03
    200a:	8c 30       	cpi	r24, 0x0C	; 12
    200c:	09 f0       	breq	.+2      	; 0x2010 <main+0x5a>
    200e:	df c0       	rjmp	.+446    	; 0x21ce <main+0x218>
		{
			lcd_write_instruction_4d(lcd_Clear);
    2010:	81 e0       	ldi	r24, 0x01	; 1
    2012:	0e 94 9d 0c 	call	0x193a	; 0x193a <lcd_write_instruction_4d>
			lcd_write_string_4d(pass);
    2016:	83 e0       	ldi	r24, 0x03	; 3
    2018:	91 e0       	ldi	r25, 0x01	; 1
    201a:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <lcd_write_string_4d>
    201e:	80 e0       	ldi	r24, 0x00	; 0
    2020:	90 e4       	ldi	r25, 0x40	; 64
    2022:	ac e9       	ldi	r26, 0x9C	; 156
    2024:	b6 e4       	ldi	r27, 0x46	; 70
    2026:	8c 83       	std	Y+4, r24	; 0x04
    2028:	9d 83       	std	Y+5, r25	; 0x05
    202a:	ae 83       	std	Y+6, r26	; 0x06
    202c:	bf 83       	std	Y+7, r27	; 0x07
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
    202e:	6c 81       	ldd	r22, Y+4	; 0x04
    2030:	7d 81       	ldd	r23, Y+5	; 0x05
    2032:	8e 81       	ldd	r24, Y+6	; 0x06
    2034:	9f 81       	ldd	r25, Y+7	; 0x07
    2036:	2b ea       	ldi	r18, 0xAB	; 171
    2038:	3a ea       	ldi	r19, 0xAA	; 170
    203a:	4a ea       	ldi	r20, 0xAA	; 170
    203c:	50 e4       	ldi	r21, 0x40	; 64
    203e:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <__mulsf3>
    2042:	dc 01       	movw	r26, r24
    2044:	cb 01       	movw	r24, r22
    2046:	88 87       	std	Y+8, r24	; 0x08
    2048:	99 87       	std	Y+9, r25	; 0x09
    204a:	aa 87       	std	Y+10, r26	; 0x0a
    204c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    204e:	11 e0       	ldi	r17, 0x01	; 1
    2050:	68 85       	ldd	r22, Y+8	; 0x08
    2052:	79 85       	ldd	r23, Y+9	; 0x09
    2054:	8a 85       	ldd	r24, Y+10	; 0x0a
    2056:	9b 85       	ldd	r25, Y+11	; 0x0b
    2058:	20 e0       	ldi	r18, 0x00	; 0
    205a:	30 e0       	ldi	r19, 0x00	; 0
    205c:	40 e8       	ldi	r20, 0x80	; 128
    205e:	5f e3       	ldi	r21, 0x3F	; 63
    2060:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <__ltsf2>
    2064:	88 23       	and	r24, r24
    2066:	0c f0       	brlt	.+2      	; 0x206a <main+0xb4>
    2068:	10 e0       	ldi	r17, 0x00	; 0
    206a:	11 23       	and	r17, r17
    206c:	19 f0       	breq	.+6      	; 0x2074 <main+0xbe>
		__ticks = 1;
    206e:	81 e0       	ldi	r24, 0x01	; 1
    2070:	8c 87       	std	Y+12, r24	; 0x0c
    2072:	a3 c0       	rjmp	.+326    	; 0x21ba <main+0x204>
	else if (__tmp > 255)
    2074:	11 e0       	ldi	r17, 0x01	; 1
    2076:	68 85       	ldd	r22, Y+8	; 0x08
    2078:	79 85       	ldd	r23, Y+9	; 0x09
    207a:	8a 85       	ldd	r24, Y+10	; 0x0a
    207c:	9b 85       	ldd	r25, Y+11	; 0x0b
    207e:	20 e0       	ldi	r18, 0x00	; 0
    2080:	30 e0       	ldi	r19, 0x00	; 0
    2082:	4f e7       	ldi	r20, 0x7F	; 127
    2084:	53 e4       	ldi	r21, 0x43	; 67
    2086:	0e 94 0c 18 	call	0x3018	; 0x3018 <__gtsf2>
    208a:	18 16       	cp	r1, r24
    208c:	0c f0       	brlt	.+2      	; 0x2090 <main+0xda>
    208e:	10 e0       	ldi	r17, 0x00	; 0
    2090:	11 23       	and	r17, r17
    2092:	09 f4       	brne	.+2      	; 0x2096 <main+0xe0>
    2094:	89 c0       	rjmp	.+274    	; 0x21a8 <main+0x1f2>
	{
		_delay_ms(__us / 1000.0);
    2096:	6c 81       	ldd	r22, Y+4	; 0x04
    2098:	7d 81       	ldd	r23, Y+5	; 0x05
    209a:	8e 81       	ldd	r24, Y+6	; 0x06
    209c:	9f 81       	ldd	r25, Y+7	; 0x07
    209e:	20 e0       	ldi	r18, 0x00	; 0
    20a0:	30 e0       	ldi	r19, 0x00	; 0
    20a2:	4a e7       	ldi	r20, 0x7A	; 122
    20a4:	54 e4       	ldi	r21, 0x44	; 68
    20a6:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <__divsf3>
    20aa:	dc 01       	movw	r26, r24
    20ac:	cb 01       	movw	r24, r22
    20ae:	8d 87       	std	Y+13, r24	; 0x0d
    20b0:	9e 87       	std	Y+14, r25	; 0x0e
    20b2:	af 87       	std	Y+15, r26	; 0x0f
    20b4:	b8 8b       	std	Y+16, r27	; 0x10
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    20b6:	6d 85       	ldd	r22, Y+13	; 0x0d
    20b8:	7e 85       	ldd	r23, Y+14	; 0x0e
    20ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    20bc:	98 89       	ldd	r25, Y+16	; 0x10
    20be:	20 e0       	ldi	r18, 0x00	; 0
    20c0:	30 e0       	ldi	r19, 0x00	; 0
    20c2:	4a e7       	ldi	r20, 0x7A	; 122
    20c4:	55 e4       	ldi	r21, 0x45	; 69
    20c6:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <__mulsf3>
    20ca:	dc 01       	movw	r26, r24
    20cc:	cb 01       	movw	r24, r22
    20ce:	89 8b       	std	Y+17, r24	; 0x11
    20d0:	9a 8b       	std	Y+18, r25	; 0x12
    20d2:	ab 8b       	std	Y+19, r26	; 0x13
    20d4:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    20d6:	11 e0       	ldi	r17, 0x01	; 1
    20d8:	69 89       	ldd	r22, Y+17	; 0x11
    20da:	7a 89       	ldd	r23, Y+18	; 0x12
    20dc:	8b 89       	ldd	r24, Y+19	; 0x13
    20de:	9c 89       	ldd	r25, Y+20	; 0x14
    20e0:	20 e0       	ldi	r18, 0x00	; 0
    20e2:	30 e0       	ldi	r19, 0x00	; 0
    20e4:	40 e8       	ldi	r20, 0x80	; 128
    20e6:	5f e3       	ldi	r21, 0x3F	; 63
    20e8:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <__ltsf2>
    20ec:	88 23       	and	r24, r24
    20ee:	0c f0       	brlt	.+2      	; 0x20f2 <main+0x13c>
    20f0:	10 e0       	ldi	r17, 0x00	; 0
    20f2:	11 23       	and	r17, r17
    20f4:	29 f0       	breq	.+10     	; 0x2100 <main+0x14a>
		__ticks = 1;
    20f6:	81 e0       	ldi	r24, 0x01	; 1
    20f8:	90 e0       	ldi	r25, 0x00	; 0
    20fa:	9e 8b       	std	Y+22, r25	; 0x16
    20fc:	8d 8b       	std	Y+21, r24	; 0x15
    20fe:	46 c0       	rjmp	.+140    	; 0x218c <main+0x1d6>
	else if (__tmp > 65535)
    2100:	11 e0       	ldi	r17, 0x01	; 1
    2102:	69 89       	ldd	r22, Y+17	; 0x11
    2104:	7a 89       	ldd	r23, Y+18	; 0x12
    2106:	8b 89       	ldd	r24, Y+19	; 0x13
    2108:	9c 89       	ldd	r25, Y+20	; 0x14
    210a:	20 e0       	ldi	r18, 0x00	; 0
    210c:	3f ef       	ldi	r19, 0xFF	; 255
    210e:	4f e7       	ldi	r20, 0x7F	; 127
    2110:	57 e4       	ldi	r21, 0x47	; 71
    2112:	0e 94 0c 18 	call	0x3018	; 0x3018 <__gtsf2>
    2116:	18 16       	cp	r1, r24
    2118:	0c f0       	brlt	.+2      	; 0x211c <main+0x166>
    211a:	10 e0       	ldi	r17, 0x00	; 0
    211c:	11 23       	and	r17, r17
    211e:	61 f1       	breq	.+88     	; 0x2178 <main+0x1c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2120:	6d 85       	ldd	r22, Y+13	; 0x0d
    2122:	7e 85       	ldd	r23, Y+14	; 0x0e
    2124:	8f 85       	ldd	r24, Y+15	; 0x0f
    2126:	98 89       	ldd	r25, Y+16	; 0x10
    2128:	20 e0       	ldi	r18, 0x00	; 0
    212a:	30 e0       	ldi	r19, 0x00	; 0
    212c:	40 e2       	ldi	r20, 0x20	; 32
    212e:	51 e4       	ldi	r21, 0x41	; 65
    2130:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <__mulsf3>
    2134:	dc 01       	movw	r26, r24
    2136:	cb 01       	movw	r24, r22
    2138:	bc 01       	movw	r22, r24
    213a:	cd 01       	movw	r24, r26
    213c:	0e 94 90 14 	call	0x2920	; 0x2920 <__fixunssfsi>
    2140:	dc 01       	movw	r26, r24
    2142:	cb 01       	movw	r24, r22
    2144:	9e 8b       	std	Y+22, r25	; 0x16
    2146:	8d 8b       	std	Y+21, r24	; 0x15
    2148:	12 c0       	rjmp	.+36     	; 0x216e <main+0x1b8>
    214a:	80 e9       	ldi	r24, 0x90	; 144
    214c:	91 e0       	ldi	r25, 0x01	; 1
    214e:	98 8f       	std	Y+24, r25	; 0x18
    2150:	8f 8b       	std	Y+23, r24	; 0x17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2152:	8f 89       	ldd	r24, Y+23	; 0x17
    2154:	98 8d       	ldd	r25, Y+24	; 0x18
    2156:	8c 01       	movw	r16, r24
    2158:	c8 01       	movw	r24, r16
    215a:	01 97       	sbiw	r24, 0x01	; 1
    215c:	f1 f7       	brne	.-4      	; 0x215a <main+0x1a4>
    215e:	8c 01       	movw	r16, r24
    2160:	18 8f       	std	Y+24, r17	; 0x18
    2162:	0f 8b       	std	Y+23, r16	; 0x17
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2164:	8d 89       	ldd	r24, Y+21	; 0x15
    2166:	9e 89       	ldd	r25, Y+22	; 0x16
    2168:	01 97       	sbiw	r24, 0x01	; 1
    216a:	9e 8b       	std	Y+22, r25	; 0x16
    216c:	8d 8b       	std	Y+21, r24	; 0x15
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    216e:	8d 89       	ldd	r24, Y+21	; 0x15
    2170:	9e 89       	ldd	r25, Y+22	; 0x16
    2172:	00 97       	sbiw	r24, 0x00	; 0
    2174:	51 f7       	brne	.-44     	; 0x214a <main+0x194>
    2176:	28 c0       	rjmp	.+80     	; 0x21c8 <main+0x212>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2178:	69 89       	ldd	r22, Y+17	; 0x11
    217a:	7a 89       	ldd	r23, Y+18	; 0x12
    217c:	8b 89       	ldd	r24, Y+19	; 0x13
    217e:	9c 89       	ldd	r25, Y+20	; 0x14
    2180:	0e 94 90 14 	call	0x2920	; 0x2920 <__fixunssfsi>
    2184:	dc 01       	movw	r26, r24
    2186:	cb 01       	movw	r24, r22
    2188:	9e 8b       	std	Y+22, r25	; 0x16
    218a:	8d 8b       	std	Y+21, r24	; 0x15
    218c:	8d 89       	ldd	r24, Y+21	; 0x15
    218e:	9e 89       	ldd	r25, Y+22	; 0x16
    2190:	9a 8f       	std	Y+26, r25	; 0x1a
    2192:	89 8f       	std	Y+25, r24	; 0x19
    2194:	89 8d       	ldd	r24, Y+25	; 0x19
    2196:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2198:	8c 01       	movw	r16, r24
    219a:	f8 01       	movw	r30, r16
    219c:	31 97       	sbiw	r30, 0x01	; 1
    219e:	f1 f7       	brne	.-4      	; 0x219c <main+0x1e6>
    21a0:	8f 01       	movw	r16, r30
    21a2:	1a 8f       	std	Y+26, r17	; 0x1a
    21a4:	09 8f       	std	Y+25, r16	; 0x19
    21a6:	10 c0       	rjmp	.+32     	; 0x21c8 <main+0x212>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    21a8:	68 85       	ldd	r22, Y+8	; 0x08
    21aa:	79 85       	ldd	r23, Y+9	; 0x09
    21ac:	8a 85       	ldd	r24, Y+10	; 0x0a
    21ae:	9b 85       	ldd	r25, Y+11	; 0x0b
    21b0:	0e 94 90 14 	call	0x2920	; 0x2920 <__fixunssfsi>
    21b4:	dc 01       	movw	r26, r24
    21b6:	cb 01       	movw	r24, r22
    21b8:	8c 87       	std	Y+12, r24	; 0x0c
    21ba:	8c 85       	ldd	r24, Y+12	; 0x0c
    21bc:	8b 8f       	std	Y+27, r24	; 0x1b
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    21be:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21c0:	18 2f       	mov	r17, r24
    21c2:	1a 95       	dec	r17
    21c4:	f1 f7       	brne	.-4      	; 0x21c2 <main+0x20c>
    21c6:	1b 8f       	std	Y+27, r17	; 0x1b
			_delay_us(20000);
			countpass = 0;
    21c8:	1a 82       	std	Y+2, r1	; 0x02
    21ca:	19 82       	std	Y+1, r1	; 0x01
					countpass = 0;
				}
				//_delay_us(1000000);
				_delay_us(20000);
		}
	}	
    21cc:	1a cf       	rjmp	.-460    	; 0x2002 <main+0x4c>
			lcd_write_instruction_4d(lcd_Clear);
			lcd_write_string_4d(pass);
			_delay_us(20000);
			countpass = 0;
		}
		else if(index!=20)
    21ce:	8b 81       	ldd	r24, Y+3	; 0x03
    21d0:	84 31       	cpi	r24, 0x14	; 20
    21d2:	09 f4       	brne	.+2      	; 0x21d6 <main+0x220>
    21d4:	15 cf       	rjmp	.-470    	; 0x2000 <main+0x4a>
		{
				lcd_write_character_4d( keys[3]);
    21d6:	8f a9       	ldd	r24, Y+55	; 0x37
    21d8:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <lcd_write_character_4d>
				Userpassword[countpass] = keys[index] ;
    21dc:	8b 81       	ldd	r24, Y+3	; 0x03
    21de:	88 2f       	mov	r24, r24
    21e0:	90 e0       	ldi	r25, 0x00	; 0
    21e2:	9e 01       	movw	r18, r28
    21e4:	2c 5c       	subi	r18, 0xCC	; 204
    21e6:	3f 4f       	sbci	r19, 0xFF	; 255
    21e8:	82 0f       	add	r24, r18
    21ea:	93 1f       	adc	r25, r19
    21ec:	fc 01       	movw	r30, r24
    21ee:	20 81       	ld	r18, Z
    21f0:	89 81       	ldd	r24, Y+1	; 0x01
    21f2:	9a 81       	ldd	r25, Y+2	; 0x02
    21f4:	84 59       	subi	r24, 0x94	; 148
    21f6:	9e 4f       	sbci	r25, 0xFE	; 254
    21f8:	fc 01       	movw	r30, r24
    21fa:	20 83       	st	Z, r18
				countpass = countpass +1;
    21fc:	89 81       	ldd	r24, Y+1	; 0x01
    21fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2200:	01 96       	adiw	r24, 0x01	; 1
    2202:	9a 83       	std	Y+2, r25	; 0x02
    2204:	89 83       	std	Y+1, r24	; 0x01
				if (countpass == 3)
    2206:	89 81       	ldd	r24, Y+1	; 0x01
    2208:	9a 81       	ldd	r25, Y+2	; 0x02
    220a:	83 30       	cpi	r24, 0x03	; 3
    220c:	91 05       	cpc	r25, r1
    220e:	21 f4       	brne	.+8      	; 0x2218 <main+0x262>
				{
					checkpass();
    2210:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <checkpass>
					countpass = 0;
    2214:	1a 82       	std	Y+2, r1	; 0x02
    2216:	19 82       	std	Y+1, r1	; 0x01
    2218:	80 e0       	ldi	r24, 0x00	; 0
    221a:	90 e4       	ldi	r25, 0x40	; 64
    221c:	ac e9       	ldi	r26, 0x9C	; 156
    221e:	b6 e4       	ldi	r27, 0x46	; 70
    2220:	8c 8f       	std	Y+28, r24	; 0x1c
    2222:	9d 8f       	std	Y+29, r25	; 0x1d
    2224:	ae 8f       	std	Y+30, r26	; 0x1e
    2226:	bf 8f       	std	Y+31, r27	; 0x1f
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
    2228:	6c 8d       	ldd	r22, Y+28	; 0x1c
    222a:	7d 8d       	ldd	r23, Y+29	; 0x1d
    222c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    222e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2230:	2b ea       	ldi	r18, 0xAB	; 171
    2232:	3a ea       	ldi	r19, 0xAA	; 170
    2234:	4a ea       	ldi	r20, 0xAA	; 170
    2236:	50 e4       	ldi	r21, 0x40	; 64
    2238:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <__mulsf3>
    223c:	dc 01       	movw	r26, r24
    223e:	cb 01       	movw	r24, r22
    2240:	88 a3       	std	Y+32, r24	; 0x20
    2242:	99 a3       	std	Y+33, r25	; 0x21
    2244:	aa a3       	std	Y+34, r26	; 0x22
    2246:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2248:	11 e0       	ldi	r17, 0x01	; 1
    224a:	68 a1       	ldd	r22, Y+32	; 0x20
    224c:	79 a1       	ldd	r23, Y+33	; 0x21
    224e:	8a a1       	ldd	r24, Y+34	; 0x22
    2250:	9b a1       	ldd	r25, Y+35	; 0x23
    2252:	20 e0       	ldi	r18, 0x00	; 0
    2254:	30 e0       	ldi	r19, 0x00	; 0
    2256:	40 e8       	ldi	r20, 0x80	; 128
    2258:	5f e3       	ldi	r21, 0x3F	; 63
    225a:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <__ltsf2>
    225e:	88 23       	and	r24, r24
    2260:	0c f0       	brlt	.+2      	; 0x2264 <main+0x2ae>
    2262:	10 e0       	ldi	r17, 0x00	; 0
    2264:	11 23       	and	r17, r17
    2266:	19 f0       	breq	.+6      	; 0x226e <main+0x2b8>
		__ticks = 1;
    2268:	81 e0       	ldi	r24, 0x01	; 1
    226a:	8c a3       	std	Y+36, r24	; 0x24
    226c:	a3 c0       	rjmp	.+326    	; 0x23b4 <main+0x3fe>
	else if (__tmp > 255)
    226e:	11 e0       	ldi	r17, 0x01	; 1
    2270:	68 a1       	ldd	r22, Y+32	; 0x20
    2272:	79 a1       	ldd	r23, Y+33	; 0x21
    2274:	8a a1       	ldd	r24, Y+34	; 0x22
    2276:	9b a1       	ldd	r25, Y+35	; 0x23
    2278:	20 e0       	ldi	r18, 0x00	; 0
    227a:	30 e0       	ldi	r19, 0x00	; 0
    227c:	4f e7       	ldi	r20, 0x7F	; 127
    227e:	53 e4       	ldi	r21, 0x43	; 67
    2280:	0e 94 0c 18 	call	0x3018	; 0x3018 <__gtsf2>
    2284:	18 16       	cp	r1, r24
    2286:	0c f0       	brlt	.+2      	; 0x228a <main+0x2d4>
    2288:	10 e0       	ldi	r17, 0x00	; 0
    228a:	11 23       	and	r17, r17
    228c:	09 f4       	brne	.+2      	; 0x2290 <main+0x2da>
    228e:	89 c0       	rjmp	.+274    	; 0x23a2 <main+0x3ec>
	{
		_delay_ms(__us / 1000.0);
    2290:	6c 8d       	ldd	r22, Y+28	; 0x1c
    2292:	7d 8d       	ldd	r23, Y+29	; 0x1d
    2294:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2296:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2298:	20 e0       	ldi	r18, 0x00	; 0
    229a:	30 e0       	ldi	r19, 0x00	; 0
    229c:	4a e7       	ldi	r20, 0x7A	; 122
    229e:	54 e4       	ldi	r21, 0x44	; 68
    22a0:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <__divsf3>
    22a4:	dc 01       	movw	r26, r24
    22a6:	cb 01       	movw	r24, r22
    22a8:	8d a3       	std	Y+37, r24	; 0x25
    22aa:	9e a3       	std	Y+38, r25	; 0x26
    22ac:	af a3       	std	Y+39, r26	; 0x27
    22ae:	b8 a7       	std	Y+40, r27	; 0x28
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    22b0:	6d a1       	ldd	r22, Y+37	; 0x25
    22b2:	7e a1       	ldd	r23, Y+38	; 0x26
    22b4:	8f a1       	ldd	r24, Y+39	; 0x27
    22b6:	98 a5       	ldd	r25, Y+40	; 0x28
    22b8:	20 e0       	ldi	r18, 0x00	; 0
    22ba:	30 e0       	ldi	r19, 0x00	; 0
    22bc:	4a e7       	ldi	r20, 0x7A	; 122
    22be:	55 e4       	ldi	r21, 0x45	; 69
    22c0:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <__mulsf3>
    22c4:	dc 01       	movw	r26, r24
    22c6:	cb 01       	movw	r24, r22
    22c8:	89 a7       	std	Y+41, r24	; 0x29
    22ca:	9a a7       	std	Y+42, r25	; 0x2a
    22cc:	ab a7       	std	Y+43, r26	; 0x2b
    22ce:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    22d0:	11 e0       	ldi	r17, 0x01	; 1
    22d2:	69 a5       	ldd	r22, Y+41	; 0x29
    22d4:	7a a5       	ldd	r23, Y+42	; 0x2a
    22d6:	8b a5       	ldd	r24, Y+43	; 0x2b
    22d8:	9c a5       	ldd	r25, Y+44	; 0x2c
    22da:	20 e0       	ldi	r18, 0x00	; 0
    22dc:	30 e0       	ldi	r19, 0x00	; 0
    22de:	40 e8       	ldi	r20, 0x80	; 128
    22e0:	5f e3       	ldi	r21, 0x3F	; 63
    22e2:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <__ltsf2>
    22e6:	88 23       	and	r24, r24
    22e8:	0c f0       	brlt	.+2      	; 0x22ec <main+0x336>
    22ea:	10 e0       	ldi	r17, 0x00	; 0
    22ec:	11 23       	and	r17, r17
    22ee:	29 f0       	breq	.+10     	; 0x22fa <main+0x344>
		__ticks = 1;
    22f0:	81 e0       	ldi	r24, 0x01	; 1
    22f2:	90 e0       	ldi	r25, 0x00	; 0
    22f4:	9e a7       	std	Y+46, r25	; 0x2e
    22f6:	8d a7       	std	Y+45, r24	; 0x2d
    22f8:	46 c0       	rjmp	.+140    	; 0x2386 <main+0x3d0>
	else if (__tmp > 65535)
    22fa:	11 e0       	ldi	r17, 0x01	; 1
    22fc:	69 a5       	ldd	r22, Y+41	; 0x29
    22fe:	7a a5       	ldd	r23, Y+42	; 0x2a
    2300:	8b a5       	ldd	r24, Y+43	; 0x2b
    2302:	9c a5       	ldd	r25, Y+44	; 0x2c
    2304:	20 e0       	ldi	r18, 0x00	; 0
    2306:	3f ef       	ldi	r19, 0xFF	; 255
    2308:	4f e7       	ldi	r20, 0x7F	; 127
    230a:	57 e4       	ldi	r21, 0x47	; 71
    230c:	0e 94 0c 18 	call	0x3018	; 0x3018 <__gtsf2>
    2310:	18 16       	cp	r1, r24
    2312:	0c f0       	brlt	.+2      	; 0x2316 <main+0x360>
    2314:	10 e0       	ldi	r17, 0x00	; 0
    2316:	11 23       	and	r17, r17
    2318:	61 f1       	breq	.+88     	; 0x2372 <main+0x3bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    231a:	6d a1       	ldd	r22, Y+37	; 0x25
    231c:	7e a1       	ldd	r23, Y+38	; 0x26
    231e:	8f a1       	ldd	r24, Y+39	; 0x27
    2320:	98 a5       	ldd	r25, Y+40	; 0x28
    2322:	20 e0       	ldi	r18, 0x00	; 0
    2324:	30 e0       	ldi	r19, 0x00	; 0
    2326:	40 e2       	ldi	r20, 0x20	; 32
    2328:	51 e4       	ldi	r21, 0x41	; 65
    232a:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <__mulsf3>
    232e:	dc 01       	movw	r26, r24
    2330:	cb 01       	movw	r24, r22
    2332:	bc 01       	movw	r22, r24
    2334:	cd 01       	movw	r24, r26
    2336:	0e 94 90 14 	call	0x2920	; 0x2920 <__fixunssfsi>
    233a:	dc 01       	movw	r26, r24
    233c:	cb 01       	movw	r24, r22
    233e:	9e a7       	std	Y+46, r25	; 0x2e
    2340:	8d a7       	std	Y+45, r24	; 0x2d
    2342:	12 c0       	rjmp	.+36     	; 0x2368 <main+0x3b2>
    2344:	80 e9       	ldi	r24, 0x90	; 144
    2346:	91 e0       	ldi	r25, 0x01	; 1
    2348:	98 ab       	std	Y+48, r25	; 0x30
    234a:	8f a7       	std	Y+47, r24	; 0x2f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    234c:	8f a5       	ldd	r24, Y+47	; 0x2f
    234e:	98 a9       	ldd	r25, Y+48	; 0x30
    2350:	8c 01       	movw	r16, r24
    2352:	c8 01       	movw	r24, r16
    2354:	01 97       	sbiw	r24, 0x01	; 1
    2356:	f1 f7       	brne	.-4      	; 0x2354 <main+0x39e>
    2358:	8c 01       	movw	r16, r24
    235a:	18 ab       	std	Y+48, r17	; 0x30
    235c:	0f a7       	std	Y+47, r16	; 0x2f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    235e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2360:	9e a5       	ldd	r25, Y+46	; 0x2e
    2362:	01 97       	sbiw	r24, 0x01	; 1
    2364:	9e a7       	std	Y+46, r25	; 0x2e
    2366:	8d a7       	std	Y+45, r24	; 0x2d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2368:	8d a5       	ldd	r24, Y+45	; 0x2d
    236a:	9e a5       	ldd	r25, Y+46	; 0x2e
    236c:	00 97       	sbiw	r24, 0x00	; 0
    236e:	51 f7       	brne	.-44     	; 0x2344 <main+0x38e>
				}
				//_delay_us(1000000);
				_delay_us(20000);
		}
	}	
    2370:	48 ce       	rjmp	.-880    	; 0x2002 <main+0x4c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2372:	69 a5       	ldd	r22, Y+41	; 0x29
    2374:	7a a5       	ldd	r23, Y+42	; 0x2a
    2376:	8b a5       	ldd	r24, Y+43	; 0x2b
    2378:	9c a5       	ldd	r25, Y+44	; 0x2c
    237a:	0e 94 90 14 	call	0x2920	; 0x2920 <__fixunssfsi>
    237e:	dc 01       	movw	r26, r24
    2380:	cb 01       	movw	r24, r22
    2382:	9e a7       	std	Y+46, r25	; 0x2e
    2384:	8d a7       	std	Y+45, r24	; 0x2d
    2386:	8d a5       	ldd	r24, Y+45	; 0x2d
    2388:	9e a5       	ldd	r25, Y+46	; 0x2e
    238a:	9a ab       	std	Y+50, r25	; 0x32
    238c:	89 ab       	std	Y+49, r24	; 0x31
    238e:	89 a9       	ldd	r24, Y+49	; 0x31
    2390:	9a a9       	ldd	r25, Y+50	; 0x32
    2392:	8c 01       	movw	r16, r24
    2394:	f8 01       	movw	r30, r16
    2396:	31 97       	sbiw	r30, 0x01	; 1
    2398:	f1 f7       	brne	.-4      	; 0x2396 <main+0x3e0>
    239a:	8f 01       	movw	r16, r30
    239c:	1a ab       	std	Y+50, r17	; 0x32
    239e:	09 ab       	std	Y+49, r16	; 0x31
    23a0:	30 ce       	rjmp	.-928    	; 0x2002 <main+0x4c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    23a2:	68 a1       	ldd	r22, Y+32	; 0x20
    23a4:	79 a1       	ldd	r23, Y+33	; 0x21
    23a6:	8a a1       	ldd	r24, Y+34	; 0x22
    23a8:	9b a1       	ldd	r25, Y+35	; 0x23
    23aa:	0e 94 90 14 	call	0x2920	; 0x2920 <__fixunssfsi>
    23ae:	dc 01       	movw	r26, r24
    23b0:	cb 01       	movw	r24, r22
    23b2:	8c a3       	std	Y+36, r24	; 0x24
    23b4:	8c a1       	ldd	r24, Y+36	; 0x24
    23b6:	8b ab       	std	Y+51, r24	; 0x33
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    23b8:	8b a9       	ldd	r24, Y+51	; 0x33
    23ba:	18 2f       	mov	r17, r24
    23bc:	1a 95       	dec	r17
    23be:	f1 f7       	brne	.-4      	; 0x23bc <main+0x406>
    23c0:	1b ab       	std	Y+51, r17	; 0x33
    23c2:	1f ce       	rjmp	.-962    	; 0x2002 <main+0x4c>

000023c4 <checkpass>:
	_delay_us(80);   
	return 0;
}

void checkpass() 
{
    23c4:	0f 93       	push	r16
    23c6:	1f 93       	push	r17
    23c8:	df 93       	push	r29
    23ca:	cf 93       	push	r28
    23cc:	cd b7       	in	r28, 0x3d	; 61
    23ce:	de b7       	in	r29, 0x3e	; 62
    23d0:	e4 97       	sbiw	r28, 0x34	; 52
    23d2:	0f b6       	in	r0, 0x3f	; 63
    23d4:	f8 94       	cli
    23d6:	de bf       	out	0x3e, r29	; 62
    23d8:	0f be       	out	0x3f, r0	; 63
    23da:	cd bf       	out	0x3d, r28	; 61
	lcd_write_instruction_4d(lcd_Clear);
    23dc:	81 e0       	ldi	r24, 0x01	; 1
    23de:	0e 94 9d 0c 	call	0x193a	; 0x193a <lcd_write_instruction_4d>
			
			
			int p , boolen = 1 ;
    23e2:	81 e0       	ldi	r24, 0x01	; 1
    23e4:	90 e0       	ldi	r25, 0x00	; 0
    23e6:	9c 83       	std	Y+4, r25	; 0x04
    23e8:	8b 83       	std	Y+3, r24	; 0x03
			for( p = 0 ; p < 3 ; ++ p )
    23ea:	1a 82       	std	Y+2, r1	; 0x02
    23ec:	19 82       	std	Y+1, r1	; 0x01
    23ee:	15 c0       	rjmp	.+42     	; 0x241a <checkpass+0x56>
			{
				if(Userpassword[p] != SysPASSWORD[p] )
    23f0:	89 81       	ldd	r24, Y+1	; 0x01
    23f2:	9a 81       	ldd	r25, Y+2	; 0x02
    23f4:	84 59       	subi	r24, 0x94	; 148
    23f6:	9e 4f       	sbci	r25, 0xFE	; 254
    23f8:	fc 01       	movw	r30, r24
    23fa:	20 81       	ld	r18, Z
    23fc:	89 81       	ldd	r24, Y+1	; 0x01
    23fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2400:	80 50       	subi	r24, 0x00	; 0
    2402:	9f 4f       	sbci	r25, 0xFF	; 255
    2404:	fc 01       	movw	r30, r24
    2406:	80 81       	ld	r24, Z
    2408:	28 17       	cp	r18, r24
    240a:	11 f0       	breq	.+4      	; 0x2410 <checkpass+0x4c>
					boolen = 0 ;
    240c:	1c 82       	std	Y+4, r1	; 0x04
    240e:	1b 82       	std	Y+3, r1	; 0x03
{
	lcd_write_instruction_4d(lcd_Clear);
			
			
			int p , boolen = 1 ;
			for( p = 0 ; p < 3 ; ++ p )
    2410:	89 81       	ldd	r24, Y+1	; 0x01
    2412:	9a 81       	ldd	r25, Y+2	; 0x02
    2414:	01 96       	adiw	r24, 0x01	; 1
    2416:	9a 83       	std	Y+2, r25	; 0x02
    2418:	89 83       	std	Y+1, r24	; 0x01
    241a:	89 81       	ldd	r24, Y+1	; 0x01
    241c:	9a 81       	ldd	r25, Y+2	; 0x02
    241e:	83 30       	cpi	r24, 0x03	; 3
    2420:	91 05       	cpc	r25, r1
    2422:	34 f3       	brlt	.-52     	; 0x23f0 <checkpass+0x2c>
			{
				if(Userpassword[p] != SysPASSWORD[p] )
					boolen = 0 ;
			}
			
			if (boolen)
    2424:	8b 81       	ldd	r24, Y+3	; 0x03
    2426:	9c 81       	ldd	r25, Y+4	; 0x04
    2428:	00 97       	sbiw	r24, 0x00	; 0
    242a:	09 f4       	brne	.+2      	; 0x242e <checkpass+0x6a>
    242c:	26 c1       	rjmp	.+588    	; 0x267a <checkpass+0x2b6>
			{
				PWMInti();
    242e:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <PWMInti>
				DDRB |= 0b000011 ;
    2432:	84 e2       	ldi	r24, 0x24	; 36
    2434:	90 e0       	ldi	r25, 0x00	; 0
    2436:	24 e2       	ldi	r18, 0x24	; 36
    2438:	30 e0       	ldi	r19, 0x00	; 0
    243a:	f9 01       	movw	r30, r18
    243c:	20 81       	ld	r18, Z
    243e:	23 60       	ori	r18, 0x03	; 3
    2440:	fc 01       	movw	r30, r24
    2442:	20 83       	st	Z, r18
				DDRD |= 0b00110000 ;
    2444:	8a e2       	ldi	r24, 0x2A	; 42
    2446:	90 e0       	ldi	r25, 0x00	; 0
    2448:	2a e2       	ldi	r18, 0x2A	; 42
    244a:	30 e0       	ldi	r19, 0x00	; 0
    244c:	f9 01       	movw	r30, r18
    244e:	20 81       	ld	r18, Z
    2450:	20 63       	ori	r18, 0x30	; 48
    2452:	fc 01       	movw	r30, r24
    2454:	20 83       	st	Z, r18
				
				PORTB &= 0b111101 ;
    2456:	85 e2       	ldi	r24, 0x25	; 37
    2458:	90 e0       	ldi	r25, 0x00	; 0
    245a:	25 e2       	ldi	r18, 0x25	; 37
    245c:	30 e0       	ldi	r19, 0x00	; 0
    245e:	f9 01       	movw	r30, r18
    2460:	20 81       	ld	r18, Z
    2462:	2d 73       	andi	r18, 0x3D	; 61
    2464:	fc 01       	movw	r30, r24
    2466:	20 83       	st	Z, r18
				PORTB |= 0b000001 ;
    2468:	85 e2       	ldi	r24, 0x25	; 37
    246a:	90 e0       	ldi	r25, 0x00	; 0
    246c:	25 e2       	ldi	r18, 0x25	; 37
    246e:	30 e0       	ldi	r19, 0x00	; 0
    2470:	f9 01       	movw	r30, r18
    2472:	20 81       	ld	r18, Z
    2474:	21 60       	ori	r18, 0x01	; 1
    2476:	fc 01       	movw	r30, r24
    2478:	20 83       	st	Z, r18
				PORTD |= 0b00010000 ;
    247a:	8b e2       	ldi	r24, 0x2B	; 43
    247c:	90 e0       	ldi	r25, 0x00	; 0
    247e:	2b e2       	ldi	r18, 0x2B	; 43
    2480:	30 e0       	ldi	r19, 0x00	; 0
    2482:	f9 01       	movw	r30, r18
    2484:	20 81       	ld	r18, Z
    2486:	20 61       	ori	r18, 0x10	; 16
    2488:	fc 01       	movw	r30, r24
    248a:	20 83       	st	Z, r18
				
				while( i!= MAX_COUNT-1 )
    248c:	e6 c0       	rjmp	.+460    	; 0x265a <checkpass+0x296>
				{
				StartWaveGeneration(melody[i], 50);
    248e:	80 91 6a 01 	lds	r24, 0x016A
    2492:	90 91 6b 01 	lds	r25, 0x016B
    2496:	88 0f       	add	r24, r24
    2498:	99 1f       	adc	r25, r25
    249a:	87 5e       	subi	r24, 0xE7	; 231
    249c:	9e 4f       	sbci	r25, 0xFE	; 254
    249e:	fc 01       	movw	r30, r24
    24a0:	80 81       	ld	r24, Z
    24a2:	91 81       	ldd	r25, Z+1	; 0x01
    24a4:	62 e3       	ldi	r22, 0x32	; 50
    24a6:	70 e0       	ldi	r23, 0x00	; 0
    24a8:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <StartWaveGeneration>
    24ac:	80 e0       	ldi	r24, 0x00	; 0
    24ae:	90 e4       	ldi	r25, 0x40	; 64
    24b0:	ac e1       	ldi	r26, 0x1C	; 28
    24b2:	b6 e4       	ldi	r27, 0x46	; 70
    24b4:	8d 83       	std	Y+5, r24	; 0x05
    24b6:	9e 83       	std	Y+6, r25	; 0x06
    24b8:	af 83       	std	Y+7, r26	; 0x07
    24ba:	b8 87       	std	Y+8, r27	; 0x08
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
    24bc:	6d 81       	ldd	r22, Y+5	; 0x05
    24be:	7e 81       	ldd	r23, Y+6	; 0x06
    24c0:	8f 81       	ldd	r24, Y+7	; 0x07
    24c2:	98 85       	ldd	r25, Y+8	; 0x08
    24c4:	2b ea       	ldi	r18, 0xAB	; 171
    24c6:	3a ea       	ldi	r19, 0xAA	; 170
    24c8:	4a ea       	ldi	r20, 0xAA	; 170
    24ca:	50 e4       	ldi	r21, 0x40	; 64
    24cc:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <__mulsf3>
    24d0:	dc 01       	movw	r26, r24
    24d2:	cb 01       	movw	r24, r22
    24d4:	89 87       	std	Y+9, r24	; 0x09
    24d6:	9a 87       	std	Y+10, r25	; 0x0a
    24d8:	ab 87       	std	Y+11, r26	; 0x0b
    24da:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
    24dc:	11 e0       	ldi	r17, 0x01	; 1
    24de:	69 85       	ldd	r22, Y+9	; 0x09
    24e0:	7a 85       	ldd	r23, Y+10	; 0x0a
    24e2:	8b 85       	ldd	r24, Y+11	; 0x0b
    24e4:	9c 85       	ldd	r25, Y+12	; 0x0c
    24e6:	20 e0       	ldi	r18, 0x00	; 0
    24e8:	30 e0       	ldi	r19, 0x00	; 0
    24ea:	40 e8       	ldi	r20, 0x80	; 128
    24ec:	5f e3       	ldi	r21, 0x3F	; 63
    24ee:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <__ltsf2>
    24f2:	88 23       	and	r24, r24
    24f4:	0c f0       	brlt	.+2      	; 0x24f8 <checkpass+0x134>
    24f6:	10 e0       	ldi	r17, 0x00	; 0
    24f8:	11 23       	and	r17, r17
    24fa:	19 f0       	breq	.+6      	; 0x2502 <checkpass+0x13e>
		__ticks = 1;
    24fc:	81 e0       	ldi	r24, 0x01	; 1
    24fe:	8d 87       	std	Y+13, r24	; 0x0d
    2500:	a3 c0       	rjmp	.+326    	; 0x2648 <checkpass+0x284>
	else if (__tmp > 255)
    2502:	11 e0       	ldi	r17, 0x01	; 1
    2504:	69 85       	ldd	r22, Y+9	; 0x09
    2506:	7a 85       	ldd	r23, Y+10	; 0x0a
    2508:	8b 85       	ldd	r24, Y+11	; 0x0b
    250a:	9c 85       	ldd	r25, Y+12	; 0x0c
    250c:	20 e0       	ldi	r18, 0x00	; 0
    250e:	30 e0       	ldi	r19, 0x00	; 0
    2510:	4f e7       	ldi	r20, 0x7F	; 127
    2512:	53 e4       	ldi	r21, 0x43	; 67
    2514:	0e 94 0c 18 	call	0x3018	; 0x3018 <__gtsf2>
    2518:	18 16       	cp	r1, r24
    251a:	0c f0       	brlt	.+2      	; 0x251e <checkpass+0x15a>
    251c:	10 e0       	ldi	r17, 0x00	; 0
    251e:	11 23       	and	r17, r17
    2520:	09 f4       	brne	.+2      	; 0x2524 <checkpass+0x160>
    2522:	89 c0       	rjmp	.+274    	; 0x2636 <checkpass+0x272>
	{
		_delay_ms(__us / 1000.0);
    2524:	6d 81       	ldd	r22, Y+5	; 0x05
    2526:	7e 81       	ldd	r23, Y+6	; 0x06
    2528:	8f 81       	ldd	r24, Y+7	; 0x07
    252a:	98 85       	ldd	r25, Y+8	; 0x08
    252c:	20 e0       	ldi	r18, 0x00	; 0
    252e:	30 e0       	ldi	r19, 0x00	; 0
    2530:	4a e7       	ldi	r20, 0x7A	; 122
    2532:	54 e4       	ldi	r21, 0x44	; 68
    2534:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <__divsf3>
    2538:	dc 01       	movw	r26, r24
    253a:	cb 01       	movw	r24, r22
    253c:	8e 87       	std	Y+14, r24	; 0x0e
    253e:	9f 87       	std	Y+15, r25	; 0x0f
    2540:	a8 8b       	std	Y+16, r26	; 0x10
    2542:	b9 8b       	std	Y+17, r27	; 0x11
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    2544:	6e 85       	ldd	r22, Y+14	; 0x0e
    2546:	7f 85       	ldd	r23, Y+15	; 0x0f
    2548:	88 89       	ldd	r24, Y+16	; 0x10
    254a:	99 89       	ldd	r25, Y+17	; 0x11
    254c:	20 e0       	ldi	r18, 0x00	; 0
    254e:	30 e0       	ldi	r19, 0x00	; 0
    2550:	4a e7       	ldi	r20, 0x7A	; 122
    2552:	55 e4       	ldi	r21, 0x45	; 69
    2554:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <__mulsf3>
    2558:	dc 01       	movw	r26, r24
    255a:	cb 01       	movw	r24, r22
    255c:	8a 8b       	std	Y+18, r24	; 0x12
    255e:	9b 8b       	std	Y+19, r25	; 0x13
    2560:	ac 8b       	std	Y+20, r26	; 0x14
    2562:	bd 8b       	std	Y+21, r27	; 0x15
	if (__tmp < 1.0)
    2564:	11 e0       	ldi	r17, 0x01	; 1
    2566:	6a 89       	ldd	r22, Y+18	; 0x12
    2568:	7b 89       	ldd	r23, Y+19	; 0x13
    256a:	8c 89       	ldd	r24, Y+20	; 0x14
    256c:	9d 89       	ldd	r25, Y+21	; 0x15
    256e:	20 e0       	ldi	r18, 0x00	; 0
    2570:	30 e0       	ldi	r19, 0x00	; 0
    2572:	40 e8       	ldi	r20, 0x80	; 128
    2574:	5f e3       	ldi	r21, 0x3F	; 63
    2576:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <__ltsf2>
    257a:	88 23       	and	r24, r24
    257c:	0c f0       	brlt	.+2      	; 0x2580 <checkpass+0x1bc>
    257e:	10 e0       	ldi	r17, 0x00	; 0
    2580:	11 23       	and	r17, r17
    2582:	29 f0       	breq	.+10     	; 0x258e <checkpass+0x1ca>
		__ticks = 1;
    2584:	81 e0       	ldi	r24, 0x01	; 1
    2586:	90 e0       	ldi	r25, 0x00	; 0
    2588:	9f 8b       	std	Y+23, r25	; 0x17
    258a:	8e 8b       	std	Y+22, r24	; 0x16
    258c:	46 c0       	rjmp	.+140    	; 0x261a <checkpass+0x256>
	else if (__tmp > 65535)
    258e:	11 e0       	ldi	r17, 0x01	; 1
    2590:	6a 89       	ldd	r22, Y+18	; 0x12
    2592:	7b 89       	ldd	r23, Y+19	; 0x13
    2594:	8c 89       	ldd	r24, Y+20	; 0x14
    2596:	9d 89       	ldd	r25, Y+21	; 0x15
    2598:	20 e0       	ldi	r18, 0x00	; 0
    259a:	3f ef       	ldi	r19, 0xFF	; 255
    259c:	4f e7       	ldi	r20, 0x7F	; 127
    259e:	57 e4       	ldi	r21, 0x47	; 71
    25a0:	0e 94 0c 18 	call	0x3018	; 0x3018 <__gtsf2>
    25a4:	18 16       	cp	r1, r24
    25a6:	0c f0       	brlt	.+2      	; 0x25aa <checkpass+0x1e6>
    25a8:	10 e0       	ldi	r17, 0x00	; 0
    25aa:	11 23       	and	r17, r17
    25ac:	61 f1       	breq	.+88     	; 0x2606 <checkpass+0x242>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25ae:	6e 85       	ldd	r22, Y+14	; 0x0e
    25b0:	7f 85       	ldd	r23, Y+15	; 0x0f
    25b2:	88 89       	ldd	r24, Y+16	; 0x10
    25b4:	99 89       	ldd	r25, Y+17	; 0x11
    25b6:	20 e0       	ldi	r18, 0x00	; 0
    25b8:	30 e0       	ldi	r19, 0x00	; 0
    25ba:	40 e2       	ldi	r20, 0x20	; 32
    25bc:	51 e4       	ldi	r21, 0x41	; 65
    25be:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <__mulsf3>
    25c2:	dc 01       	movw	r26, r24
    25c4:	cb 01       	movw	r24, r22
    25c6:	bc 01       	movw	r22, r24
    25c8:	cd 01       	movw	r24, r26
    25ca:	0e 94 90 14 	call	0x2920	; 0x2920 <__fixunssfsi>
    25ce:	dc 01       	movw	r26, r24
    25d0:	cb 01       	movw	r24, r22
    25d2:	9f 8b       	std	Y+23, r25	; 0x17
    25d4:	8e 8b       	std	Y+22, r24	; 0x16
    25d6:	12 c0       	rjmp	.+36     	; 0x25fc <checkpass+0x238>
    25d8:	80 e9       	ldi	r24, 0x90	; 144
    25da:	91 e0       	ldi	r25, 0x01	; 1
    25dc:	99 8f       	std	Y+25, r25	; 0x19
    25de:	88 8f       	std	Y+24, r24	; 0x18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    25e0:	88 8d       	ldd	r24, Y+24	; 0x18
    25e2:	99 8d       	ldd	r25, Y+25	; 0x19
    25e4:	8c 01       	movw	r16, r24
    25e6:	c8 01       	movw	r24, r16
    25e8:	01 97       	sbiw	r24, 0x01	; 1
    25ea:	f1 f7       	brne	.-4      	; 0x25e8 <checkpass+0x224>
    25ec:	8c 01       	movw	r16, r24
    25ee:	19 8f       	std	Y+25, r17	; 0x19
    25f0:	08 8f       	std	Y+24, r16	; 0x18
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25f2:	8e 89       	ldd	r24, Y+22	; 0x16
    25f4:	9f 89       	ldd	r25, Y+23	; 0x17
    25f6:	01 97       	sbiw	r24, 0x01	; 1
    25f8:	9f 8b       	std	Y+23, r25	; 0x17
    25fa:	8e 8b       	std	Y+22, r24	; 0x16
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25fc:	8e 89       	ldd	r24, Y+22	; 0x16
    25fe:	9f 89       	ldd	r25, Y+23	; 0x17
    2600:	00 97       	sbiw	r24, 0x00	; 0
    2602:	51 f7       	brne	.-44     	; 0x25d8 <checkpass+0x214>
    2604:	28 c0       	rjmp	.+80     	; 0x2656 <checkpass+0x292>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2606:	6a 89       	ldd	r22, Y+18	; 0x12
    2608:	7b 89       	ldd	r23, Y+19	; 0x13
    260a:	8c 89       	ldd	r24, Y+20	; 0x14
    260c:	9d 89       	ldd	r25, Y+21	; 0x15
    260e:	0e 94 90 14 	call	0x2920	; 0x2920 <__fixunssfsi>
    2612:	dc 01       	movw	r26, r24
    2614:	cb 01       	movw	r24, r22
    2616:	9f 8b       	std	Y+23, r25	; 0x17
    2618:	8e 8b       	std	Y+22, r24	; 0x16
    261a:	8e 89       	ldd	r24, Y+22	; 0x16
    261c:	9f 89       	ldd	r25, Y+23	; 0x17
    261e:	9b 8f       	std	Y+27, r25	; 0x1b
    2620:	8a 8f       	std	Y+26, r24	; 0x1a
    2622:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2624:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2626:	8c 01       	movw	r16, r24
    2628:	f8 01       	movw	r30, r16
    262a:	31 97       	sbiw	r30, 0x01	; 1
    262c:	f1 f7       	brne	.-4      	; 0x262a <checkpass+0x266>
    262e:	8f 01       	movw	r16, r30
    2630:	1b 8f       	std	Y+27, r17	; 0x1b
    2632:	0a 8f       	std	Y+26, r16	; 0x1a
    2634:	10 c0       	rjmp	.+32     	; 0x2656 <checkpass+0x292>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2636:	69 85       	ldd	r22, Y+9	; 0x09
    2638:	7a 85       	ldd	r23, Y+10	; 0x0a
    263a:	8b 85       	ldd	r24, Y+11	; 0x0b
    263c:	9c 85       	ldd	r25, Y+12	; 0x0c
    263e:	0e 94 90 14 	call	0x2920	; 0x2920 <__fixunssfsi>
    2642:	dc 01       	movw	r26, r24
    2644:	cb 01       	movw	r24, r22
    2646:	8d 87       	std	Y+13, r24	; 0x0d
    2648:	8d 85       	ldd	r24, Y+13	; 0x0d
    264a:	8c 8f       	std	Y+28, r24	; 0x1c
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    264c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    264e:	18 2f       	mov	r17, r24
    2650:	1a 95       	dec	r17
    2652:	f1 f7       	brne	.-4      	; 0x2650 <checkpass+0x28c>
    2654:	1c 8f       	std	Y+28, r17	; 0x1c
				_delay_us(10000);
	            StopWaveGeneration();
    2656:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <StopWaveGeneration>
				
				PORTB &= 0b111101 ;
				PORTB |= 0b000001 ;
				PORTD |= 0b00010000 ;
				
				while( i!= MAX_COUNT-1 )
    265a:	80 91 49 01 	lds	r24, 0x0149
    265e:	90 91 4a 01 	lds	r25, 0x014A
    2662:	9c 01       	movw	r18, r24
    2664:	21 50       	subi	r18, 0x01	; 1
    2666:	30 40       	sbci	r19, 0x00	; 0
    2668:	80 91 6a 01 	lds	r24, 0x016A
    266c:	90 91 6b 01 	lds	r25, 0x016B
    2670:	28 17       	cp	r18, r24
    2672:	39 07       	cpc	r19, r25
    2674:	09 f0       	breq	.+2      	; 0x2678 <checkpass+0x2b4>
    2676:	0b cf       	rjmp	.-490    	; 0x248e <checkpass+0xca>
    2678:	06 c1       	rjmp	.+524    	; 0x2886 <checkpass+0x4c2>
				}		
				
			}
			else
			{
				lcd_write_string_4d(wpass);
    267a:	89 e0       	ldi	r24, 0x09	; 9
    267c:	91 e0       	ldi	r25, 0x01	; 1
    267e:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <lcd_write_string_4d>
    2682:	80 e0       	ldi	r24, 0x00	; 0
    2684:	90 e4       	ldi	r25, 0x40	; 64
    2686:	ac e1       	ldi	r26, 0x1C	; 28
    2688:	b6 e4       	ldi	r27, 0x46	; 70
    268a:	8d 8f       	std	Y+29, r24	; 0x1d
    268c:	9e 8f       	std	Y+30, r25	; 0x1e
    268e:	af 8f       	std	Y+31, r26	; 0x1f
    2690:	b8 a3       	std	Y+32, r27	; 0x20
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
    2692:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2694:	7e 8d       	ldd	r23, Y+30	; 0x1e
    2696:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2698:	98 a1       	ldd	r25, Y+32	; 0x20
    269a:	2b ea       	ldi	r18, 0xAB	; 171
    269c:	3a ea       	ldi	r19, 0xAA	; 170
    269e:	4a ea       	ldi	r20, 0xAA	; 170
    26a0:	50 e4       	ldi	r21, 0x40	; 64
    26a2:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <__mulsf3>
    26a6:	dc 01       	movw	r26, r24
    26a8:	cb 01       	movw	r24, r22
    26aa:	89 a3       	std	Y+33, r24	; 0x21
    26ac:	9a a3       	std	Y+34, r25	; 0x22
    26ae:	ab a3       	std	Y+35, r26	; 0x23
    26b0:	bc a3       	std	Y+36, r27	; 0x24
	if (__tmp < 1.0)
    26b2:	11 e0       	ldi	r17, 0x01	; 1
    26b4:	69 a1       	ldd	r22, Y+33	; 0x21
    26b6:	7a a1       	ldd	r23, Y+34	; 0x22
    26b8:	8b a1       	ldd	r24, Y+35	; 0x23
    26ba:	9c a1       	ldd	r25, Y+36	; 0x24
    26bc:	20 e0       	ldi	r18, 0x00	; 0
    26be:	30 e0       	ldi	r19, 0x00	; 0
    26c0:	40 e8       	ldi	r20, 0x80	; 128
    26c2:	5f e3       	ldi	r21, 0x3F	; 63
    26c4:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <__ltsf2>
    26c8:	88 23       	and	r24, r24
    26ca:	0c f0       	brlt	.+2      	; 0x26ce <checkpass+0x30a>
    26cc:	10 e0       	ldi	r17, 0x00	; 0
    26ce:	11 23       	and	r17, r17
    26d0:	19 f0       	breq	.+6      	; 0x26d8 <checkpass+0x314>
		__ticks = 1;
    26d2:	81 e0       	ldi	r24, 0x01	; 1
    26d4:	8d a3       	std	Y+37, r24	; 0x25
    26d6:	a3 c0       	rjmp	.+326    	; 0x281e <checkpass+0x45a>
	else if (__tmp > 255)
    26d8:	11 e0       	ldi	r17, 0x01	; 1
    26da:	69 a1       	ldd	r22, Y+33	; 0x21
    26dc:	7a a1       	ldd	r23, Y+34	; 0x22
    26de:	8b a1       	ldd	r24, Y+35	; 0x23
    26e0:	9c a1       	ldd	r25, Y+36	; 0x24
    26e2:	20 e0       	ldi	r18, 0x00	; 0
    26e4:	30 e0       	ldi	r19, 0x00	; 0
    26e6:	4f e7       	ldi	r20, 0x7F	; 127
    26e8:	53 e4       	ldi	r21, 0x43	; 67
    26ea:	0e 94 0c 18 	call	0x3018	; 0x3018 <__gtsf2>
    26ee:	18 16       	cp	r1, r24
    26f0:	0c f0       	brlt	.+2      	; 0x26f4 <checkpass+0x330>
    26f2:	10 e0       	ldi	r17, 0x00	; 0
    26f4:	11 23       	and	r17, r17
    26f6:	09 f4       	brne	.+2      	; 0x26fa <checkpass+0x336>
    26f8:	89 c0       	rjmp	.+274    	; 0x280c <checkpass+0x448>
	{
		_delay_ms(__us / 1000.0);
    26fa:	6d 8d       	ldd	r22, Y+29	; 0x1d
    26fc:	7e 8d       	ldd	r23, Y+30	; 0x1e
    26fe:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2700:	98 a1       	ldd	r25, Y+32	; 0x20
    2702:	20 e0       	ldi	r18, 0x00	; 0
    2704:	30 e0       	ldi	r19, 0x00	; 0
    2706:	4a e7       	ldi	r20, 0x7A	; 122
    2708:	54 e4       	ldi	r21, 0x44	; 68
    270a:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <__divsf3>
    270e:	dc 01       	movw	r26, r24
    2710:	cb 01       	movw	r24, r22
    2712:	8e a3       	std	Y+38, r24	; 0x26
    2714:	9f a3       	std	Y+39, r25	; 0x27
    2716:	a8 a7       	std	Y+40, r26	; 0x28
    2718:	b9 a7       	std	Y+41, r27	; 0x29
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    271a:	6e a1       	ldd	r22, Y+38	; 0x26
    271c:	7f a1       	ldd	r23, Y+39	; 0x27
    271e:	88 a5       	ldd	r24, Y+40	; 0x28
    2720:	99 a5       	ldd	r25, Y+41	; 0x29
    2722:	20 e0       	ldi	r18, 0x00	; 0
    2724:	30 e0       	ldi	r19, 0x00	; 0
    2726:	4a e7       	ldi	r20, 0x7A	; 122
    2728:	55 e4       	ldi	r21, 0x45	; 69
    272a:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <__mulsf3>
    272e:	dc 01       	movw	r26, r24
    2730:	cb 01       	movw	r24, r22
    2732:	8a a7       	std	Y+42, r24	; 0x2a
    2734:	9b a7       	std	Y+43, r25	; 0x2b
    2736:	ac a7       	std	Y+44, r26	; 0x2c
    2738:	bd a7       	std	Y+45, r27	; 0x2d
	if (__tmp < 1.0)
    273a:	11 e0       	ldi	r17, 0x01	; 1
    273c:	6a a5       	ldd	r22, Y+42	; 0x2a
    273e:	7b a5       	ldd	r23, Y+43	; 0x2b
    2740:	8c a5       	ldd	r24, Y+44	; 0x2c
    2742:	9d a5       	ldd	r25, Y+45	; 0x2d
    2744:	20 e0       	ldi	r18, 0x00	; 0
    2746:	30 e0       	ldi	r19, 0x00	; 0
    2748:	40 e8       	ldi	r20, 0x80	; 128
    274a:	5f e3       	ldi	r21, 0x3F	; 63
    274c:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <__ltsf2>
    2750:	88 23       	and	r24, r24
    2752:	0c f0       	brlt	.+2      	; 0x2756 <checkpass+0x392>
    2754:	10 e0       	ldi	r17, 0x00	; 0
    2756:	11 23       	and	r17, r17
    2758:	29 f0       	breq	.+10     	; 0x2764 <checkpass+0x3a0>
		__ticks = 1;
    275a:	81 e0       	ldi	r24, 0x01	; 1
    275c:	90 e0       	ldi	r25, 0x00	; 0
    275e:	9f a7       	std	Y+47, r25	; 0x2f
    2760:	8e a7       	std	Y+46, r24	; 0x2e
    2762:	46 c0       	rjmp	.+140    	; 0x27f0 <checkpass+0x42c>
	else if (__tmp > 65535)
    2764:	11 e0       	ldi	r17, 0x01	; 1
    2766:	6a a5       	ldd	r22, Y+42	; 0x2a
    2768:	7b a5       	ldd	r23, Y+43	; 0x2b
    276a:	8c a5       	ldd	r24, Y+44	; 0x2c
    276c:	9d a5       	ldd	r25, Y+45	; 0x2d
    276e:	20 e0       	ldi	r18, 0x00	; 0
    2770:	3f ef       	ldi	r19, 0xFF	; 255
    2772:	4f e7       	ldi	r20, 0x7F	; 127
    2774:	57 e4       	ldi	r21, 0x47	; 71
    2776:	0e 94 0c 18 	call	0x3018	; 0x3018 <__gtsf2>
    277a:	18 16       	cp	r1, r24
    277c:	0c f0       	brlt	.+2      	; 0x2780 <checkpass+0x3bc>
    277e:	10 e0       	ldi	r17, 0x00	; 0
    2780:	11 23       	and	r17, r17
    2782:	61 f1       	breq	.+88     	; 0x27dc <checkpass+0x418>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2784:	6e a1       	ldd	r22, Y+38	; 0x26
    2786:	7f a1       	ldd	r23, Y+39	; 0x27
    2788:	88 a5       	ldd	r24, Y+40	; 0x28
    278a:	99 a5       	ldd	r25, Y+41	; 0x29
    278c:	20 e0       	ldi	r18, 0x00	; 0
    278e:	30 e0       	ldi	r19, 0x00	; 0
    2790:	40 e2       	ldi	r20, 0x20	; 32
    2792:	51 e4       	ldi	r21, 0x41	; 65
    2794:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <__mulsf3>
    2798:	dc 01       	movw	r26, r24
    279a:	cb 01       	movw	r24, r22
    279c:	bc 01       	movw	r22, r24
    279e:	cd 01       	movw	r24, r26
    27a0:	0e 94 90 14 	call	0x2920	; 0x2920 <__fixunssfsi>
    27a4:	dc 01       	movw	r26, r24
    27a6:	cb 01       	movw	r24, r22
    27a8:	9f a7       	std	Y+47, r25	; 0x2f
    27aa:	8e a7       	std	Y+46, r24	; 0x2e
    27ac:	12 c0       	rjmp	.+36     	; 0x27d2 <checkpass+0x40e>
    27ae:	80 e9       	ldi	r24, 0x90	; 144
    27b0:	91 e0       	ldi	r25, 0x01	; 1
    27b2:	99 ab       	std	Y+49, r25	; 0x31
    27b4:	88 ab       	std	Y+48, r24	; 0x30
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    27b6:	88 a9       	ldd	r24, Y+48	; 0x30
    27b8:	99 a9       	ldd	r25, Y+49	; 0x31
    27ba:	8c 01       	movw	r16, r24
    27bc:	c8 01       	movw	r24, r16
    27be:	01 97       	sbiw	r24, 0x01	; 1
    27c0:	f1 f7       	brne	.-4      	; 0x27be <checkpass+0x3fa>
    27c2:	8c 01       	movw	r16, r24
    27c4:	19 ab       	std	Y+49, r17	; 0x31
    27c6:	08 ab       	std	Y+48, r16	; 0x30
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27c8:	8e a5       	ldd	r24, Y+46	; 0x2e
    27ca:	9f a5       	ldd	r25, Y+47	; 0x2f
    27cc:	01 97       	sbiw	r24, 0x01	; 1
    27ce:	9f a7       	std	Y+47, r25	; 0x2f
    27d0:	8e a7       	std	Y+46, r24	; 0x2e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27d2:	8e a5       	ldd	r24, Y+46	; 0x2e
    27d4:	9f a5       	ldd	r25, Y+47	; 0x2f
    27d6:	00 97       	sbiw	r24, 0x00	; 0
    27d8:	51 f7       	brne	.-44     	; 0x27ae <checkpass+0x3ea>
    27da:	28 c0       	rjmp	.+80     	; 0x282c <checkpass+0x468>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27dc:	6a a5       	ldd	r22, Y+42	; 0x2a
    27de:	7b a5       	ldd	r23, Y+43	; 0x2b
    27e0:	8c a5       	ldd	r24, Y+44	; 0x2c
    27e2:	9d a5       	ldd	r25, Y+45	; 0x2d
    27e4:	0e 94 90 14 	call	0x2920	; 0x2920 <__fixunssfsi>
    27e8:	dc 01       	movw	r26, r24
    27ea:	cb 01       	movw	r24, r22
    27ec:	9f a7       	std	Y+47, r25	; 0x2f
    27ee:	8e a7       	std	Y+46, r24	; 0x2e
    27f0:	8e a5       	ldd	r24, Y+46	; 0x2e
    27f2:	9f a5       	ldd	r25, Y+47	; 0x2f
    27f4:	9b ab       	std	Y+51, r25	; 0x33
    27f6:	8a ab       	std	Y+50, r24	; 0x32
    27f8:	8a a9       	ldd	r24, Y+50	; 0x32
    27fa:	9b a9       	ldd	r25, Y+51	; 0x33
    27fc:	8c 01       	movw	r16, r24
    27fe:	f8 01       	movw	r30, r16
    2800:	31 97       	sbiw	r30, 0x01	; 1
    2802:	f1 f7       	brne	.-4      	; 0x2800 <checkpass+0x43c>
    2804:	8f 01       	movw	r16, r30
    2806:	1b ab       	std	Y+51, r17	; 0x33
    2808:	0a ab       	std	Y+50, r16	; 0x32
    280a:	10 c0       	rjmp	.+32     	; 0x282c <checkpass+0x468>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    280c:	69 a1       	ldd	r22, Y+33	; 0x21
    280e:	7a a1       	ldd	r23, Y+34	; 0x22
    2810:	8b a1       	ldd	r24, Y+35	; 0x23
    2812:	9c a1       	ldd	r25, Y+36	; 0x24
    2814:	0e 94 90 14 	call	0x2920	; 0x2920 <__fixunssfsi>
    2818:	dc 01       	movw	r26, r24
    281a:	cb 01       	movw	r24, r22
    281c:	8d a3       	std	Y+37, r24	; 0x25
    281e:	8d a1       	ldd	r24, Y+37	; 0x25
    2820:	8c ab       	std	Y+52, r24	; 0x34
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2822:	8c a9       	ldd	r24, Y+52	; 0x34
    2824:	18 2f       	mov	r17, r24
    2826:	1a 95       	dec	r17
    2828:	f1 f7       	brne	.-4      	; 0x2826 <checkpass+0x462>
    282a:	1c ab       	std	Y+52, r17	; 0x34
				_delay_us(10000);
				//_delay_us(1000);
				//lcd_write_string_4d(pass);
				DDRB |= 0b000011 ;
    282c:	84 e2       	ldi	r24, 0x24	; 36
    282e:	90 e0       	ldi	r25, 0x00	; 0
    2830:	24 e2       	ldi	r18, 0x24	; 36
    2832:	30 e0       	ldi	r19, 0x00	; 0
    2834:	f9 01       	movw	r30, r18
    2836:	20 81       	ld	r18, Z
    2838:	23 60       	ori	r18, 0x03	; 3
    283a:	fc 01       	movw	r30, r24
    283c:	20 83       	st	Z, r18
				DDRD |= 0b01010000 ;
    283e:	8a e2       	ldi	r24, 0x2A	; 42
    2840:	90 e0       	ldi	r25, 0x00	; 0
    2842:	2a e2       	ldi	r18, 0x2A	; 42
    2844:	30 e0       	ldi	r19, 0x00	; 0
    2846:	f9 01       	movw	r30, r18
    2848:	20 81       	ld	r18, Z
    284a:	20 65       	ori	r18, 0x50	; 80
    284c:	fc 01       	movw	r30, r24
    284e:	20 83       	st	Z, r18
				
				PORTB &= 0b111110 ;
    2850:	85 e2       	ldi	r24, 0x25	; 37
    2852:	90 e0       	ldi	r25, 0x00	; 0
    2854:	25 e2       	ldi	r18, 0x25	; 37
    2856:	30 e0       	ldi	r19, 0x00	; 0
    2858:	f9 01       	movw	r30, r18
    285a:	20 81       	ld	r18, Z
    285c:	2e 73       	andi	r18, 0x3E	; 62
    285e:	fc 01       	movw	r30, r24
    2860:	20 83       	st	Z, r18
				PORTB |= 0b000010 ;
    2862:	85 e2       	ldi	r24, 0x25	; 37
    2864:	90 e0       	ldi	r25, 0x00	; 0
    2866:	25 e2       	ldi	r18, 0x25	; 37
    2868:	30 e0       	ldi	r19, 0x00	; 0
    286a:	f9 01       	movw	r30, r18
    286c:	20 81       	ld	r18, Z
    286e:	22 60       	ori	r18, 0x02	; 2
    2870:	fc 01       	movw	r30, r24
    2872:	20 83       	st	Z, r18
				PORTD |= 0b01010000 ;
    2874:	8b e2       	ldi	r24, 0x2B	; 43
    2876:	90 e0       	ldi	r25, 0x00	; 0
    2878:	2b e2       	ldi	r18, 0x2B	; 43
    287a:	30 e0       	ldi	r19, 0x00	; 0
    287c:	f9 01       	movw	r30, r18
    287e:	20 81       	ld	r18, Z
    2880:	20 65       	ori	r18, 0x50	; 80
    2882:	fc 01       	movw	r30, r24
    2884:	20 83       	st	Z, r18
				//PORTD6 = 1; // for buzeel 
				
			}
			lcd_write_instruction_4d(lcd_Clear);
    2886:	81 e0       	ldi	r24, 0x01	; 1
    2888:	0e 94 9d 0c 	call	0x193a	; 0x193a <lcd_write_instruction_4d>
				lcd_write_string_4d(pass);
    288c:	83 e0       	ldi	r24, 0x03	; 3
    288e:	91 e0       	ldi	r25, 0x01	; 1
    2890:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <lcd_write_string_4d>
	
}
    2894:	e4 96       	adiw	r28, 0x34	; 52
    2896:	0f b6       	in	r0, 0x3f	; 63
    2898:	f8 94       	cli
    289a:	de bf       	out	0x3e, r29	; 62
    289c:	0f be       	out	0x3f, r0	; 63
    289e:	cd bf       	out	0x3d, r28	; 61
    28a0:	cf 91       	pop	r28
    28a2:	df 91       	pop	r29
    28a4:	1f 91       	pop	r17
    28a6:	0f 91       	pop	r16
    28a8:	08 95       	ret

000028aa <__vector_13>:


ISR(TIMER1_OVF_vect)
{
    28aa:	1f 92       	push	r1
    28ac:	0f 92       	push	r0
    28ae:	0f b6       	in	r0, 0x3f	; 63
    28b0:	0f 92       	push	r0
    28b2:	11 24       	eor	r1, r1
    28b4:	2f 93       	push	r18
    28b6:	3f 93       	push	r19
    28b8:	8f 93       	push	r24
    28ba:	9f 93       	push	r25
    28bc:	ef 93       	push	r30
    28be:	ff 93       	push	r31
    28c0:	df 93       	push	r29
    28c2:	cf 93       	push	r28
    28c4:	cd b7       	in	r28, 0x3d	; 61
    28c6:	de b7       	in	r29, 0x3e	; 62
    TCNT1 = (2^16 - 1000) ; //0x0000C180;
    28c8:	84 e8       	ldi	r24, 0x84	; 132
    28ca:	90 e0       	ldi	r25, 0x00	; 0
    28cc:	2a e2       	ldi	r18, 0x2A	; 42
    28ce:	3c ef       	ldi	r19, 0xFC	; 252
    28d0:	fc 01       	movw	r30, r24
    28d2:	31 83       	std	Z+1, r19	; 0x01
    28d4:	20 83       	st	Z, r18
	i++ ;
    28d6:	80 91 6a 01 	lds	r24, 0x016A
    28da:	90 91 6b 01 	lds	r25, 0x016B
    28de:	01 96       	adiw	r24, 0x01	; 1
    28e0:	90 93 6b 01 	sts	0x016B, r25
    28e4:	80 93 6a 01 	sts	0x016A, r24
	if( i == MAX_COUNT )
    28e8:	20 91 6a 01 	lds	r18, 0x016A
    28ec:	30 91 6b 01 	lds	r19, 0x016B
    28f0:	80 91 49 01 	lds	r24, 0x0149
    28f4:	90 91 4a 01 	lds	r25, 0x014A
    28f8:	28 17       	cp	r18, r24
    28fa:	39 07       	cpc	r19, r25
    28fc:	21 f4       	brne	.+8      	; 0x2906 <__vector_13+0x5c>
	    i=0;		
    28fe:	10 92 6b 01 	sts	0x016B, r1
    2902:	10 92 6a 01 	sts	0x016A, r1
		
    2906:	cf 91       	pop	r28
    2908:	df 91       	pop	r29
    290a:	ff 91       	pop	r31
    290c:	ef 91       	pop	r30
    290e:	9f 91       	pop	r25
    2910:	8f 91       	pop	r24
    2912:	3f 91       	pop	r19
    2914:	2f 91       	pop	r18
    2916:	0f 90       	pop	r0
    2918:	0f be       	out	0x3f, r0	; 63
    291a:	0f 90       	pop	r0
    291c:	1f 90       	pop	r1
    291e:	18 95       	reti

00002920 <__fixunssfsi>:
    2920:	ef 92       	push	r14
    2922:	ff 92       	push	r15
    2924:	0f 93       	push	r16
    2926:	1f 93       	push	r17
    2928:	7b 01       	movw	r14, r22
    292a:	8c 01       	movw	r16, r24
    292c:	20 e0       	ldi	r18, 0x00	; 0
    292e:	30 e0       	ldi	r19, 0x00	; 0
    2930:	40 e0       	ldi	r20, 0x00	; 0
    2932:	5f e4       	ldi	r21, 0x4F	; 79
    2934:	0e 94 3c 18 	call	0x3078	; 0x3078 <__gesf2>
    2938:	87 fd       	sbrc	r24, 7
    293a:	11 c0       	rjmp	.+34     	; 0x295e <__fixunssfsi+0x3e>
    293c:	c8 01       	movw	r24, r16
    293e:	b7 01       	movw	r22, r14
    2940:	20 e0       	ldi	r18, 0x00	; 0
    2942:	30 e0       	ldi	r19, 0x00	; 0
    2944:	40 e0       	ldi	r20, 0x00	; 0
    2946:	5f e4       	ldi	r21, 0x4F	; 79
    2948:	0e 94 33 16 	call	0x2c66	; 0x2c66 <__subsf3>
    294c:	0e 94 9c 18 	call	0x3138	; 0x3138 <__fixsfsi>
    2950:	9b 01       	movw	r18, r22
    2952:	ac 01       	movw	r20, r24
    2954:	20 50       	subi	r18, 0x00	; 0
    2956:	30 40       	sbci	r19, 0x00	; 0
    2958:	40 40       	sbci	r20, 0x00	; 0
    295a:	50 48       	sbci	r21, 0x80	; 128
    295c:	06 c0       	rjmp	.+12     	; 0x296a <__fixunssfsi+0x4a>
    295e:	c8 01       	movw	r24, r16
    2960:	b7 01       	movw	r22, r14
    2962:	0e 94 9c 18 	call	0x3138	; 0x3138 <__fixsfsi>
    2966:	9b 01       	movw	r18, r22
    2968:	ac 01       	movw	r20, r24
    296a:	b9 01       	movw	r22, r18
    296c:	ca 01       	movw	r24, r20
    296e:	1f 91       	pop	r17
    2970:	0f 91       	pop	r16
    2972:	ff 90       	pop	r15
    2974:	ef 90       	pop	r14
    2976:	08 95       	ret

00002978 <_fpadd_parts>:
    2978:	a0 e0       	ldi	r26, 0x00	; 0
    297a:	b0 e0       	ldi	r27, 0x00	; 0
    297c:	e2 ec       	ldi	r30, 0xC2	; 194
    297e:	f4 e1       	ldi	r31, 0x14	; 20
    2980:	0c 94 a9 1a 	jmp	0x3552	; 0x3552 <__prologue_saves__+0x8>
    2984:	fc 01       	movw	r30, r24
    2986:	ea 01       	movw	r28, r20
    2988:	80 81       	ld	r24, Z
    298a:	82 30       	cpi	r24, 0x02	; 2
    298c:	08 f4       	brcc	.+2      	; 0x2990 <_fpadd_parts+0x18>
    298e:	38 c1       	rjmp	.+624    	; 0x2c00 <_fpadd_parts+0x288>
    2990:	db 01       	movw	r26, r22
    2992:	9c 91       	ld	r25, X
    2994:	92 30       	cpi	r25, 0x02	; 2
    2996:	08 f4       	brcc	.+2      	; 0x299a <_fpadd_parts+0x22>
    2998:	30 c1       	rjmp	.+608    	; 0x2bfa <_fpadd_parts+0x282>
    299a:	84 30       	cpi	r24, 0x04	; 4
    299c:	59 f4       	brne	.+22     	; 0x29b4 <_fpadd_parts+0x3c>
    299e:	94 30       	cpi	r25, 0x04	; 4
    29a0:	09 f0       	breq	.+2      	; 0x29a4 <_fpadd_parts+0x2c>
    29a2:	2e c1       	rjmp	.+604    	; 0x2c00 <_fpadd_parts+0x288>
    29a4:	91 81       	ldd	r25, Z+1	; 0x01
    29a6:	11 96       	adiw	r26, 0x01	; 1
    29a8:	8c 91       	ld	r24, X
    29aa:	11 97       	sbiw	r26, 0x01	; 1
    29ac:	98 17       	cp	r25, r24
    29ae:	09 f0       	breq	.+2      	; 0x29b2 <_fpadd_parts+0x3a>
    29b0:	21 c1       	rjmp	.+578    	; 0x2bf4 <_fpadd_parts+0x27c>
    29b2:	26 c1       	rjmp	.+588    	; 0x2c00 <_fpadd_parts+0x288>
    29b4:	94 30       	cpi	r25, 0x04	; 4
    29b6:	09 f4       	brne	.+2      	; 0x29ba <_fpadd_parts+0x42>
    29b8:	20 c1       	rjmp	.+576    	; 0x2bfa <_fpadd_parts+0x282>
    29ba:	92 30       	cpi	r25, 0x02	; 2
    29bc:	b1 f4       	brne	.+44     	; 0x29ea <_fpadd_parts+0x72>
    29be:	82 30       	cpi	r24, 0x02	; 2
    29c0:	09 f0       	breq	.+2      	; 0x29c4 <_fpadd_parts+0x4c>
    29c2:	1e c1       	rjmp	.+572    	; 0x2c00 <_fpadd_parts+0x288>
    29c4:	ca 01       	movw	r24, r20
    29c6:	af 01       	movw	r20, r30
    29c8:	28 e0       	ldi	r18, 0x08	; 8
    29ca:	da 01       	movw	r26, r20
    29cc:	0d 90       	ld	r0, X+
    29ce:	ad 01       	movw	r20, r26
    29d0:	dc 01       	movw	r26, r24
    29d2:	0d 92       	st	X+, r0
    29d4:	cd 01       	movw	r24, r26
    29d6:	21 50       	subi	r18, 0x01	; 1
    29d8:	c1 f7       	brne	.-16     	; 0x29ca <_fpadd_parts+0x52>
    29da:	db 01       	movw	r26, r22
    29dc:	11 96       	adiw	r26, 0x01	; 1
    29de:	8c 91       	ld	r24, X
    29e0:	11 97       	sbiw	r26, 0x01	; 1
    29e2:	91 81       	ldd	r25, Z+1	; 0x01
    29e4:	89 23       	and	r24, r25
    29e6:	89 83       	std	Y+1, r24	; 0x01
    29e8:	0a c1       	rjmp	.+532    	; 0x2bfe <_fpadd_parts+0x286>
    29ea:	82 30       	cpi	r24, 0x02	; 2
    29ec:	09 f4       	brne	.+2      	; 0x29f0 <_fpadd_parts+0x78>
    29ee:	05 c1       	rjmp	.+522    	; 0x2bfa <_fpadd_parts+0x282>
    29f0:	c2 80       	ldd	r12, Z+2	; 0x02
    29f2:	d3 80       	ldd	r13, Z+3	; 0x03
    29f4:	db 01       	movw	r26, r22
    29f6:	12 96       	adiw	r26, 0x02	; 2
    29f8:	6d 90       	ld	r6, X+
    29fa:	7c 90       	ld	r7, X
    29fc:	13 97       	sbiw	r26, 0x03	; 3
    29fe:	24 81       	ldd	r18, Z+4	; 0x04
    2a00:	35 81       	ldd	r19, Z+5	; 0x05
    2a02:	46 81       	ldd	r20, Z+6	; 0x06
    2a04:	57 81       	ldd	r21, Z+7	; 0x07
    2a06:	14 96       	adiw	r26, 0x04	; 4
    2a08:	ed 90       	ld	r14, X+
    2a0a:	fd 90       	ld	r15, X+
    2a0c:	0d 91       	ld	r16, X+
    2a0e:	1c 91       	ld	r17, X
    2a10:	17 97       	sbiw	r26, 0x07	; 7
    2a12:	c6 01       	movw	r24, r12
    2a14:	86 19       	sub	r24, r6
    2a16:	97 09       	sbc	r25, r7
    2a18:	5c 01       	movw	r10, r24
    2a1a:	97 ff       	sbrs	r25, 7
    2a1c:	04 c0       	rjmp	.+8      	; 0x2a26 <_fpadd_parts+0xae>
    2a1e:	aa 24       	eor	r10, r10
    2a20:	bb 24       	eor	r11, r11
    2a22:	a8 1a       	sub	r10, r24
    2a24:	b9 0a       	sbc	r11, r25
    2a26:	b0 e2       	ldi	r27, 0x20	; 32
    2a28:	ab 16       	cp	r10, r27
    2a2a:	b1 04       	cpc	r11, r1
    2a2c:	0c f0       	brlt	.+2      	; 0x2a30 <_fpadd_parts+0xb8>
    2a2e:	61 c0       	rjmp	.+194    	; 0x2af2 <_fpadd_parts+0x17a>
    2a30:	18 16       	cp	r1, r24
    2a32:	19 06       	cpc	r1, r25
    2a34:	6c f5       	brge	.+90     	; 0x2a90 <_fpadd_parts+0x118>
    2a36:	37 01       	movw	r6, r14
    2a38:	48 01       	movw	r8, r16
    2a3a:	0a 2c       	mov	r0, r10
    2a3c:	04 c0       	rjmp	.+8      	; 0x2a46 <_fpadd_parts+0xce>
    2a3e:	96 94       	lsr	r9
    2a40:	87 94       	ror	r8
    2a42:	77 94       	ror	r7
    2a44:	67 94       	ror	r6
    2a46:	0a 94       	dec	r0
    2a48:	d2 f7       	brpl	.-12     	; 0x2a3e <_fpadd_parts+0xc6>
    2a4a:	81 e0       	ldi	r24, 0x01	; 1
    2a4c:	90 e0       	ldi	r25, 0x00	; 0
    2a4e:	a0 e0       	ldi	r26, 0x00	; 0
    2a50:	b0 e0       	ldi	r27, 0x00	; 0
    2a52:	0a 2c       	mov	r0, r10
    2a54:	04 c0       	rjmp	.+8      	; 0x2a5e <_fpadd_parts+0xe6>
    2a56:	88 0f       	add	r24, r24
    2a58:	99 1f       	adc	r25, r25
    2a5a:	aa 1f       	adc	r26, r26
    2a5c:	bb 1f       	adc	r27, r27
    2a5e:	0a 94       	dec	r0
    2a60:	d2 f7       	brpl	.-12     	; 0x2a56 <_fpadd_parts+0xde>
    2a62:	01 97       	sbiw	r24, 0x01	; 1
    2a64:	a1 09       	sbc	r26, r1
    2a66:	b1 09       	sbc	r27, r1
    2a68:	8e 21       	and	r24, r14
    2a6a:	9f 21       	and	r25, r15
    2a6c:	a0 23       	and	r26, r16
    2a6e:	b1 23       	and	r27, r17
    2a70:	ee 24       	eor	r14, r14
    2a72:	ff 24       	eor	r15, r15
    2a74:	87 01       	movw	r16, r14
    2a76:	e3 94       	inc	r14
    2a78:	00 97       	sbiw	r24, 0x00	; 0
    2a7a:	a1 05       	cpc	r26, r1
    2a7c:	b1 05       	cpc	r27, r1
    2a7e:	19 f4       	brne	.+6      	; 0x2a86 <_fpadd_parts+0x10e>
    2a80:	ee 24       	eor	r14, r14
    2a82:	ff 24       	eor	r15, r15
    2a84:	87 01       	movw	r16, r14
    2a86:	e6 28       	or	r14, r6
    2a88:	f7 28       	or	r15, r7
    2a8a:	08 29       	or	r16, r8
    2a8c:	19 29       	or	r17, r9
    2a8e:	3c c0       	rjmp	.+120    	; 0x2b08 <_fpadd_parts+0x190>
    2a90:	00 97       	sbiw	r24, 0x00	; 0
    2a92:	d1 f1       	breq	.+116    	; 0x2b08 <_fpadd_parts+0x190>
    2a94:	ca 0c       	add	r12, r10
    2a96:	db 1c       	adc	r13, r11
    2a98:	39 01       	movw	r6, r18
    2a9a:	4a 01       	movw	r8, r20
    2a9c:	0a 2c       	mov	r0, r10
    2a9e:	04 c0       	rjmp	.+8      	; 0x2aa8 <_fpadd_parts+0x130>
    2aa0:	96 94       	lsr	r9
    2aa2:	87 94       	ror	r8
    2aa4:	77 94       	ror	r7
    2aa6:	67 94       	ror	r6
    2aa8:	0a 94       	dec	r0
    2aaa:	d2 f7       	brpl	.-12     	; 0x2aa0 <_fpadd_parts+0x128>
    2aac:	81 e0       	ldi	r24, 0x01	; 1
    2aae:	90 e0       	ldi	r25, 0x00	; 0
    2ab0:	a0 e0       	ldi	r26, 0x00	; 0
    2ab2:	b0 e0       	ldi	r27, 0x00	; 0
    2ab4:	0a 2c       	mov	r0, r10
    2ab6:	04 c0       	rjmp	.+8      	; 0x2ac0 <_fpadd_parts+0x148>
    2ab8:	88 0f       	add	r24, r24
    2aba:	99 1f       	adc	r25, r25
    2abc:	aa 1f       	adc	r26, r26
    2abe:	bb 1f       	adc	r27, r27
    2ac0:	0a 94       	dec	r0
    2ac2:	d2 f7       	brpl	.-12     	; 0x2ab8 <_fpadd_parts+0x140>
    2ac4:	01 97       	sbiw	r24, 0x01	; 1
    2ac6:	a1 09       	sbc	r26, r1
    2ac8:	b1 09       	sbc	r27, r1
    2aca:	82 23       	and	r24, r18
    2acc:	93 23       	and	r25, r19
    2ace:	a4 23       	and	r26, r20
    2ad0:	b5 23       	and	r27, r21
    2ad2:	21 e0       	ldi	r18, 0x01	; 1
    2ad4:	30 e0       	ldi	r19, 0x00	; 0
    2ad6:	40 e0       	ldi	r20, 0x00	; 0
    2ad8:	50 e0       	ldi	r21, 0x00	; 0
    2ada:	00 97       	sbiw	r24, 0x00	; 0
    2adc:	a1 05       	cpc	r26, r1
    2ade:	b1 05       	cpc	r27, r1
    2ae0:	19 f4       	brne	.+6      	; 0x2ae8 <_fpadd_parts+0x170>
    2ae2:	20 e0       	ldi	r18, 0x00	; 0
    2ae4:	30 e0       	ldi	r19, 0x00	; 0
    2ae6:	a9 01       	movw	r20, r18
    2ae8:	26 29       	or	r18, r6
    2aea:	37 29       	or	r19, r7
    2aec:	48 29       	or	r20, r8
    2aee:	59 29       	or	r21, r9
    2af0:	0b c0       	rjmp	.+22     	; 0x2b08 <_fpadd_parts+0x190>
    2af2:	6c 14       	cp	r6, r12
    2af4:	7d 04       	cpc	r7, r13
    2af6:	24 f4       	brge	.+8      	; 0x2b00 <_fpadd_parts+0x188>
    2af8:	ee 24       	eor	r14, r14
    2afa:	ff 24       	eor	r15, r15
    2afc:	87 01       	movw	r16, r14
    2afe:	04 c0       	rjmp	.+8      	; 0x2b08 <_fpadd_parts+0x190>
    2b00:	63 01       	movw	r12, r6
    2b02:	20 e0       	ldi	r18, 0x00	; 0
    2b04:	30 e0       	ldi	r19, 0x00	; 0
    2b06:	a9 01       	movw	r20, r18
    2b08:	81 81       	ldd	r24, Z+1	; 0x01
    2b0a:	fb 01       	movw	r30, r22
    2b0c:	91 81       	ldd	r25, Z+1	; 0x01
    2b0e:	89 17       	cp	r24, r25
    2b10:	09 f4       	brne	.+2      	; 0x2b14 <_fpadd_parts+0x19c>
    2b12:	45 c0       	rjmp	.+138    	; 0x2b9e <_fpadd_parts+0x226>
    2b14:	88 23       	and	r24, r24
    2b16:	49 f0       	breq	.+18     	; 0x2b2a <_fpadd_parts+0x1b2>
    2b18:	d8 01       	movw	r26, r16
    2b1a:	c7 01       	movw	r24, r14
    2b1c:	82 1b       	sub	r24, r18
    2b1e:	93 0b       	sbc	r25, r19
    2b20:	a4 0b       	sbc	r26, r20
    2b22:	b5 0b       	sbc	r27, r21
    2b24:	9c 01       	movw	r18, r24
    2b26:	ad 01       	movw	r20, r26
    2b28:	04 c0       	rjmp	.+8      	; 0x2b32 <_fpadd_parts+0x1ba>
    2b2a:	2e 19       	sub	r18, r14
    2b2c:	3f 09       	sbc	r19, r15
    2b2e:	40 0b       	sbc	r20, r16
    2b30:	51 0b       	sbc	r21, r17
    2b32:	57 fd       	sbrc	r21, 7
    2b34:	04 c0       	rjmp	.+8      	; 0x2b3e <_fpadd_parts+0x1c6>
    2b36:	19 82       	std	Y+1, r1	; 0x01
    2b38:	db 82       	std	Y+3, r13	; 0x03
    2b3a:	ca 82       	std	Y+2, r12	; 0x02
    2b3c:	0b c0       	rjmp	.+22     	; 0x2b54 <_fpadd_parts+0x1dc>
    2b3e:	81 e0       	ldi	r24, 0x01	; 1
    2b40:	89 83       	std	Y+1, r24	; 0x01
    2b42:	db 82       	std	Y+3, r13	; 0x03
    2b44:	ca 82       	std	Y+2, r12	; 0x02
    2b46:	50 95       	com	r21
    2b48:	40 95       	com	r20
    2b4a:	30 95       	com	r19
    2b4c:	21 95       	neg	r18
    2b4e:	3f 4f       	sbci	r19, 0xFF	; 255
    2b50:	4f 4f       	sbci	r20, 0xFF	; 255
    2b52:	5f 4f       	sbci	r21, 0xFF	; 255
    2b54:	2c 83       	std	Y+4, r18	; 0x04
    2b56:	3d 83       	std	Y+5, r19	; 0x05
    2b58:	4e 83       	std	Y+6, r20	; 0x06
    2b5a:	5f 83       	std	Y+7, r21	; 0x07
    2b5c:	0d c0       	rjmp	.+26     	; 0x2b78 <_fpadd_parts+0x200>
    2b5e:	88 0f       	add	r24, r24
    2b60:	99 1f       	adc	r25, r25
    2b62:	aa 1f       	adc	r26, r26
    2b64:	bb 1f       	adc	r27, r27
    2b66:	8c 83       	std	Y+4, r24	; 0x04
    2b68:	9d 83       	std	Y+5, r25	; 0x05
    2b6a:	ae 83       	std	Y+6, r26	; 0x06
    2b6c:	bf 83       	std	Y+7, r27	; 0x07
    2b6e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b70:	9b 81       	ldd	r25, Y+3	; 0x03
    2b72:	01 97       	sbiw	r24, 0x01	; 1
    2b74:	9b 83       	std	Y+3, r25	; 0x03
    2b76:	8a 83       	std	Y+2, r24	; 0x02
    2b78:	8c 81       	ldd	r24, Y+4	; 0x04
    2b7a:	9d 81       	ldd	r25, Y+5	; 0x05
    2b7c:	ae 81       	ldd	r26, Y+6	; 0x06
    2b7e:	bf 81       	ldd	r27, Y+7	; 0x07
    2b80:	9c 01       	movw	r18, r24
    2b82:	ad 01       	movw	r20, r26
    2b84:	21 50       	subi	r18, 0x01	; 1
    2b86:	30 40       	sbci	r19, 0x00	; 0
    2b88:	40 40       	sbci	r20, 0x00	; 0
    2b8a:	50 40       	sbci	r21, 0x00	; 0
    2b8c:	2f 3f       	cpi	r18, 0xFF	; 255
    2b8e:	ef ef       	ldi	r30, 0xFF	; 255
    2b90:	3e 07       	cpc	r19, r30
    2b92:	ef ef       	ldi	r30, 0xFF	; 255
    2b94:	4e 07       	cpc	r20, r30
    2b96:	ef e3       	ldi	r30, 0x3F	; 63
    2b98:	5e 07       	cpc	r21, r30
    2b9a:	08 f3       	brcs	.-62     	; 0x2b5e <_fpadd_parts+0x1e6>
    2b9c:	0b c0       	rjmp	.+22     	; 0x2bb4 <_fpadd_parts+0x23c>
    2b9e:	89 83       	std	Y+1, r24	; 0x01
    2ba0:	db 82       	std	Y+3, r13	; 0x03
    2ba2:	ca 82       	std	Y+2, r12	; 0x02
    2ba4:	2e 0d       	add	r18, r14
    2ba6:	3f 1d       	adc	r19, r15
    2ba8:	40 1f       	adc	r20, r16
    2baa:	51 1f       	adc	r21, r17
    2bac:	2c 83       	std	Y+4, r18	; 0x04
    2bae:	3d 83       	std	Y+5, r19	; 0x05
    2bb0:	4e 83       	std	Y+6, r20	; 0x06
    2bb2:	5f 83       	std	Y+7, r21	; 0x07
    2bb4:	83 e0       	ldi	r24, 0x03	; 3
    2bb6:	88 83       	st	Y, r24
    2bb8:	2c 81       	ldd	r18, Y+4	; 0x04
    2bba:	3d 81       	ldd	r19, Y+5	; 0x05
    2bbc:	4e 81       	ldd	r20, Y+6	; 0x06
    2bbe:	5f 81       	ldd	r21, Y+7	; 0x07
    2bc0:	57 ff       	sbrs	r21, 7
    2bc2:	1d c0       	rjmp	.+58     	; 0x2bfe <_fpadd_parts+0x286>
    2bc4:	da 01       	movw	r26, r20
    2bc6:	c9 01       	movw	r24, r18
    2bc8:	81 70       	andi	r24, 0x01	; 1
    2bca:	90 70       	andi	r25, 0x00	; 0
    2bcc:	a0 70       	andi	r26, 0x00	; 0
    2bce:	b0 70       	andi	r27, 0x00	; 0
    2bd0:	56 95       	lsr	r21
    2bd2:	47 95       	ror	r20
    2bd4:	37 95       	ror	r19
    2bd6:	27 95       	ror	r18
    2bd8:	82 2b       	or	r24, r18
    2bda:	93 2b       	or	r25, r19
    2bdc:	a4 2b       	or	r26, r20
    2bde:	b5 2b       	or	r27, r21
    2be0:	8c 83       	std	Y+4, r24	; 0x04
    2be2:	9d 83       	std	Y+5, r25	; 0x05
    2be4:	ae 83       	std	Y+6, r26	; 0x06
    2be6:	bf 83       	std	Y+7, r27	; 0x07
    2be8:	8a 81       	ldd	r24, Y+2	; 0x02
    2bea:	9b 81       	ldd	r25, Y+3	; 0x03
    2bec:	01 96       	adiw	r24, 0x01	; 1
    2bee:	9b 83       	std	Y+3, r25	; 0x03
    2bf0:	8a 83       	std	Y+2, r24	; 0x02
    2bf2:	05 c0       	rjmp	.+10     	; 0x2bfe <_fpadd_parts+0x286>
    2bf4:	e2 e6       	ldi	r30, 0x62	; 98
    2bf6:	f1 e0       	ldi	r31, 0x01	; 1
    2bf8:	03 c0       	rjmp	.+6      	; 0x2c00 <_fpadd_parts+0x288>
    2bfa:	fb 01       	movw	r30, r22
    2bfc:	01 c0       	rjmp	.+2      	; 0x2c00 <_fpadd_parts+0x288>
    2bfe:	fe 01       	movw	r30, r28
    2c00:	cf 01       	movw	r24, r30
    2c02:	cd b7       	in	r28, 0x3d	; 61
    2c04:	de b7       	in	r29, 0x3e	; 62
    2c06:	ee e0       	ldi	r30, 0x0E	; 14
    2c08:	0c 94 c5 1a 	jmp	0x358a	; 0x358a <__epilogue_restores__+0x8>

00002c0c <__addsf3>:
    2c0c:	a0 e2       	ldi	r26, 0x20	; 32
    2c0e:	b0 e0       	ldi	r27, 0x00	; 0
    2c10:	ec e0       	ldi	r30, 0x0C	; 12
    2c12:	f6 e1       	ldi	r31, 0x16	; 22
    2c14:	0c 94 b1 1a 	jmp	0x3562	; 0x3562 <__prologue_saves__+0x18>
    2c18:	69 83       	std	Y+1, r22	; 0x01
    2c1a:	7a 83       	std	Y+2, r23	; 0x02
    2c1c:	8b 83       	std	Y+3, r24	; 0x03
    2c1e:	9c 83       	std	Y+4, r25	; 0x04
    2c20:	2d 83       	std	Y+5, r18	; 0x05
    2c22:	3e 83       	std	Y+6, r19	; 0x06
    2c24:	4f 83       	std	Y+7, r20	; 0x07
    2c26:	58 87       	std	Y+8, r21	; 0x08
    2c28:	89 e0       	ldi	r24, 0x09	; 9
    2c2a:	e8 2e       	mov	r14, r24
    2c2c:	f1 2c       	mov	r15, r1
    2c2e:	ec 0e       	add	r14, r28
    2c30:	fd 1e       	adc	r15, r29
    2c32:	ce 01       	movw	r24, r28
    2c34:	01 96       	adiw	r24, 0x01	; 1
    2c36:	b7 01       	movw	r22, r14
    2c38:	0e 94 bc 19 	call	0x3378	; 0x3378 <__unpack_f>
    2c3c:	8e 01       	movw	r16, r28
    2c3e:	0f 5e       	subi	r16, 0xEF	; 239
    2c40:	1f 4f       	sbci	r17, 0xFF	; 255
    2c42:	ce 01       	movw	r24, r28
    2c44:	05 96       	adiw	r24, 0x05	; 5
    2c46:	b8 01       	movw	r22, r16
    2c48:	0e 94 bc 19 	call	0x3378	; 0x3378 <__unpack_f>
    2c4c:	c7 01       	movw	r24, r14
    2c4e:	b8 01       	movw	r22, r16
    2c50:	ae 01       	movw	r20, r28
    2c52:	47 5e       	subi	r20, 0xE7	; 231
    2c54:	5f 4f       	sbci	r21, 0xFF	; 255
    2c56:	0e 94 bc 14 	call	0x2978	; 0x2978 <_fpadd_parts>
    2c5a:	0e 94 ee 18 	call	0x31dc	; 0x31dc <__pack_f>
    2c5e:	a0 96       	adiw	r28, 0x20	; 32
    2c60:	e6 e0       	ldi	r30, 0x06	; 6
    2c62:	0c 94 cd 1a 	jmp	0x359a	; 0x359a <__epilogue_restores__+0x18>

00002c66 <__subsf3>:
    2c66:	a0 e2       	ldi	r26, 0x20	; 32
    2c68:	b0 e0       	ldi	r27, 0x00	; 0
    2c6a:	e9 e3       	ldi	r30, 0x39	; 57
    2c6c:	f6 e1       	ldi	r31, 0x16	; 22
    2c6e:	0c 94 b1 1a 	jmp	0x3562	; 0x3562 <__prologue_saves__+0x18>
    2c72:	69 83       	std	Y+1, r22	; 0x01
    2c74:	7a 83       	std	Y+2, r23	; 0x02
    2c76:	8b 83       	std	Y+3, r24	; 0x03
    2c78:	9c 83       	std	Y+4, r25	; 0x04
    2c7a:	2d 83       	std	Y+5, r18	; 0x05
    2c7c:	3e 83       	std	Y+6, r19	; 0x06
    2c7e:	4f 83       	std	Y+7, r20	; 0x07
    2c80:	58 87       	std	Y+8, r21	; 0x08
    2c82:	8e 01       	movw	r16, r28
    2c84:	07 5f       	subi	r16, 0xF7	; 247
    2c86:	1f 4f       	sbci	r17, 0xFF	; 255
    2c88:	ce 01       	movw	r24, r28
    2c8a:	01 96       	adiw	r24, 0x01	; 1
    2c8c:	b8 01       	movw	r22, r16
    2c8e:	0e 94 bc 19 	call	0x3378	; 0x3378 <__unpack_f>
    2c92:	91 e1       	ldi	r25, 0x11	; 17
    2c94:	e9 2e       	mov	r14, r25
    2c96:	f1 2c       	mov	r15, r1
    2c98:	ec 0e       	add	r14, r28
    2c9a:	fd 1e       	adc	r15, r29
    2c9c:	ce 01       	movw	r24, r28
    2c9e:	05 96       	adiw	r24, 0x05	; 5
    2ca0:	b7 01       	movw	r22, r14
    2ca2:	0e 94 bc 19 	call	0x3378	; 0x3378 <__unpack_f>
    2ca6:	8a 89       	ldd	r24, Y+18	; 0x12
    2ca8:	91 e0       	ldi	r25, 0x01	; 1
    2caa:	89 27       	eor	r24, r25
    2cac:	8a 8b       	std	Y+18, r24	; 0x12
    2cae:	c8 01       	movw	r24, r16
    2cb0:	b7 01       	movw	r22, r14
    2cb2:	ae 01       	movw	r20, r28
    2cb4:	47 5e       	subi	r20, 0xE7	; 231
    2cb6:	5f 4f       	sbci	r21, 0xFF	; 255
    2cb8:	0e 94 bc 14 	call	0x2978	; 0x2978 <_fpadd_parts>
    2cbc:	0e 94 ee 18 	call	0x31dc	; 0x31dc <__pack_f>
    2cc0:	a0 96       	adiw	r28, 0x20	; 32
    2cc2:	e6 e0       	ldi	r30, 0x06	; 6
    2cc4:	0c 94 cd 1a 	jmp	0x359a	; 0x359a <__epilogue_restores__+0x18>

00002cc8 <__mulsf3>:
    2cc8:	a0 e2       	ldi	r26, 0x20	; 32
    2cca:	b0 e0       	ldi	r27, 0x00	; 0
    2ccc:	ea e6       	ldi	r30, 0x6A	; 106
    2cce:	f6 e1       	ldi	r31, 0x16	; 22
    2cd0:	0c 94 a5 1a 	jmp	0x354a	; 0x354a <__prologue_saves__>
    2cd4:	69 83       	std	Y+1, r22	; 0x01
    2cd6:	7a 83       	std	Y+2, r23	; 0x02
    2cd8:	8b 83       	std	Y+3, r24	; 0x03
    2cda:	9c 83       	std	Y+4, r25	; 0x04
    2cdc:	2d 83       	std	Y+5, r18	; 0x05
    2cde:	3e 83       	std	Y+6, r19	; 0x06
    2ce0:	4f 83       	std	Y+7, r20	; 0x07
    2ce2:	58 87       	std	Y+8, r21	; 0x08
    2ce4:	ce 01       	movw	r24, r28
    2ce6:	01 96       	adiw	r24, 0x01	; 1
    2ce8:	be 01       	movw	r22, r28
    2cea:	67 5f       	subi	r22, 0xF7	; 247
    2cec:	7f 4f       	sbci	r23, 0xFF	; 255
    2cee:	0e 94 bc 19 	call	0x3378	; 0x3378 <__unpack_f>
    2cf2:	ce 01       	movw	r24, r28
    2cf4:	05 96       	adiw	r24, 0x05	; 5
    2cf6:	be 01       	movw	r22, r28
    2cf8:	6f 5e       	subi	r22, 0xEF	; 239
    2cfa:	7f 4f       	sbci	r23, 0xFF	; 255
    2cfc:	0e 94 bc 19 	call	0x3378	; 0x3378 <__unpack_f>
    2d00:	99 85       	ldd	r25, Y+9	; 0x09
    2d02:	92 30       	cpi	r25, 0x02	; 2
    2d04:	78 f0       	brcs	.+30     	; 0x2d24 <__mulsf3+0x5c>
    2d06:	89 89       	ldd	r24, Y+17	; 0x11
    2d08:	82 30       	cpi	r24, 0x02	; 2
    2d0a:	c0 f0       	brcs	.+48     	; 0x2d3c <__mulsf3+0x74>
    2d0c:	94 30       	cpi	r25, 0x04	; 4
    2d0e:	19 f4       	brne	.+6      	; 0x2d16 <__mulsf3+0x4e>
    2d10:	82 30       	cpi	r24, 0x02	; 2
    2d12:	41 f4       	brne	.+16     	; 0x2d24 <__mulsf3+0x5c>
    2d14:	cb c0       	rjmp	.+406    	; 0x2eac <__mulsf3+0x1e4>
    2d16:	84 30       	cpi	r24, 0x04	; 4
    2d18:	19 f4       	brne	.+6      	; 0x2d20 <__mulsf3+0x58>
    2d1a:	92 30       	cpi	r25, 0x02	; 2
    2d1c:	79 f4       	brne	.+30     	; 0x2d3c <__mulsf3+0x74>
    2d1e:	c6 c0       	rjmp	.+396    	; 0x2eac <__mulsf3+0x1e4>
    2d20:	92 30       	cpi	r25, 0x02	; 2
    2d22:	51 f4       	brne	.+20     	; 0x2d38 <__mulsf3+0x70>
    2d24:	81 e0       	ldi	r24, 0x01	; 1
    2d26:	2a 85       	ldd	r18, Y+10	; 0x0a
    2d28:	9a 89       	ldd	r25, Y+18	; 0x12
    2d2a:	29 17       	cp	r18, r25
    2d2c:	09 f4       	brne	.+2      	; 0x2d30 <__mulsf3+0x68>
    2d2e:	80 e0       	ldi	r24, 0x00	; 0
    2d30:	8a 87       	std	Y+10, r24	; 0x0a
    2d32:	ce 01       	movw	r24, r28
    2d34:	09 96       	adiw	r24, 0x09	; 9
    2d36:	bc c0       	rjmp	.+376    	; 0x2eb0 <__mulsf3+0x1e8>
    2d38:	82 30       	cpi	r24, 0x02	; 2
    2d3a:	51 f4       	brne	.+20     	; 0x2d50 <__mulsf3+0x88>
    2d3c:	81 e0       	ldi	r24, 0x01	; 1
    2d3e:	2a 85       	ldd	r18, Y+10	; 0x0a
    2d40:	9a 89       	ldd	r25, Y+18	; 0x12
    2d42:	29 17       	cp	r18, r25
    2d44:	09 f4       	brne	.+2      	; 0x2d48 <__mulsf3+0x80>
    2d46:	80 e0       	ldi	r24, 0x00	; 0
    2d48:	8a 8b       	std	Y+18, r24	; 0x12
    2d4a:	ce 01       	movw	r24, r28
    2d4c:	41 96       	adiw	r24, 0x11	; 17
    2d4e:	b0 c0       	rjmp	.+352    	; 0x2eb0 <__mulsf3+0x1e8>
    2d50:	6d 84       	ldd	r6, Y+13	; 0x0d
    2d52:	7e 84       	ldd	r7, Y+14	; 0x0e
    2d54:	8f 84       	ldd	r8, Y+15	; 0x0f
    2d56:	98 88       	ldd	r9, Y+16	; 0x10
    2d58:	ed 88       	ldd	r14, Y+21	; 0x15
    2d5a:	fe 88       	ldd	r15, Y+22	; 0x16
    2d5c:	0f 89       	ldd	r16, Y+23	; 0x17
    2d5e:	18 8d       	ldd	r17, Y+24	; 0x18
    2d60:	e0 e2       	ldi	r30, 0x20	; 32
    2d62:	f0 e0       	ldi	r31, 0x00	; 0
    2d64:	80 e0       	ldi	r24, 0x00	; 0
    2d66:	90 e0       	ldi	r25, 0x00	; 0
    2d68:	dc 01       	movw	r26, r24
    2d6a:	aa 24       	eor	r10, r10
    2d6c:	bb 24       	eor	r11, r11
    2d6e:	65 01       	movw	r12, r10
    2d70:	20 e0       	ldi	r18, 0x00	; 0
    2d72:	30 e0       	ldi	r19, 0x00	; 0
    2d74:	a9 01       	movw	r20, r18
    2d76:	b3 01       	movw	r22, r6
    2d78:	61 70       	andi	r22, 0x01	; 1
    2d7a:	70 70       	andi	r23, 0x00	; 0
    2d7c:	61 15       	cp	r22, r1
    2d7e:	71 05       	cpc	r23, r1
    2d80:	d1 f0       	breq	.+52     	; 0x2db6 <__mulsf3+0xee>
    2d82:	2e 0d       	add	r18, r14
    2d84:	3f 1d       	adc	r19, r15
    2d86:	40 1f       	adc	r20, r16
    2d88:	51 1f       	adc	r21, r17
    2d8a:	15 01       	movw	r2, r10
    2d8c:	26 01       	movw	r4, r12
    2d8e:	28 0e       	add	r2, r24
    2d90:	39 1e       	adc	r3, r25
    2d92:	4a 1e       	adc	r4, r26
    2d94:	5b 1e       	adc	r5, r27
    2d96:	81 e0       	ldi	r24, 0x01	; 1
    2d98:	90 e0       	ldi	r25, 0x00	; 0
    2d9a:	a0 e0       	ldi	r26, 0x00	; 0
    2d9c:	b0 e0       	ldi	r27, 0x00	; 0
    2d9e:	2e 15       	cp	r18, r14
    2da0:	3f 05       	cpc	r19, r15
    2da2:	40 07       	cpc	r20, r16
    2da4:	51 07       	cpc	r21, r17
    2da6:	18 f0       	brcs	.+6      	; 0x2dae <__mulsf3+0xe6>
    2da8:	80 e0       	ldi	r24, 0x00	; 0
    2daa:	90 e0       	ldi	r25, 0x00	; 0
    2dac:	dc 01       	movw	r26, r24
    2dae:	82 0d       	add	r24, r2
    2db0:	93 1d       	adc	r25, r3
    2db2:	a4 1d       	adc	r26, r4
    2db4:	b5 1d       	adc	r27, r5
    2db6:	aa 0c       	add	r10, r10
    2db8:	bb 1c       	adc	r11, r11
    2dba:	cc 1c       	adc	r12, r12
    2dbc:	dd 1c       	adc	r13, r13
    2dbe:	17 ff       	sbrs	r17, 7
    2dc0:	09 c0       	rjmp	.+18     	; 0x2dd4 <__mulsf3+0x10c>
    2dc2:	61 e0       	ldi	r22, 0x01	; 1
    2dc4:	26 2e       	mov	r2, r22
    2dc6:	31 2c       	mov	r3, r1
    2dc8:	41 2c       	mov	r4, r1
    2dca:	51 2c       	mov	r5, r1
    2dcc:	a2 28       	or	r10, r2
    2dce:	b3 28       	or	r11, r3
    2dd0:	c4 28       	or	r12, r4
    2dd2:	d5 28       	or	r13, r5
    2dd4:	31 97       	sbiw	r30, 0x01	; 1
    2dd6:	49 f0       	breq	.+18     	; 0x2dea <__mulsf3+0x122>
    2dd8:	ee 0c       	add	r14, r14
    2dda:	ff 1c       	adc	r15, r15
    2ddc:	00 1f       	adc	r16, r16
    2dde:	11 1f       	adc	r17, r17
    2de0:	96 94       	lsr	r9
    2de2:	87 94       	ror	r8
    2de4:	77 94       	ror	r7
    2de6:	67 94       	ror	r6
    2de8:	c6 cf       	rjmp	.-116    	; 0x2d76 <__mulsf3+0xae>
    2dea:	6b 89       	ldd	r22, Y+19	; 0x13
    2dec:	7c 89       	ldd	r23, Y+20	; 0x14
    2dee:	eb 85       	ldd	r30, Y+11	; 0x0b
    2df0:	fc 85       	ldd	r31, Y+12	; 0x0c
    2df2:	6e 0f       	add	r22, r30
    2df4:	7f 1f       	adc	r23, r31
    2df6:	6e 5f       	subi	r22, 0xFE	; 254
    2df8:	7f 4f       	sbci	r23, 0xFF	; 255
    2dfa:	7c 8f       	std	Y+28, r23	; 0x1c
    2dfc:	6b 8f       	std	Y+27, r22	; 0x1b
    2dfe:	61 e0       	ldi	r22, 0x01	; 1
    2e00:	ea 85       	ldd	r30, Y+10	; 0x0a
    2e02:	7a 89       	ldd	r23, Y+18	; 0x12
    2e04:	e7 17       	cp	r30, r23
    2e06:	09 f4       	brne	.+2      	; 0x2e0a <__mulsf3+0x142>
    2e08:	60 e0       	ldi	r22, 0x00	; 0
    2e0a:	6a 8f       	std	Y+26, r22	; 0x1a
    2e0c:	6b 8d       	ldd	r22, Y+27	; 0x1b
    2e0e:	7c 8d       	ldd	r23, Y+28	; 0x1c
    2e10:	10 c0       	rjmp	.+32     	; 0x2e32 <__mulsf3+0x16a>
    2e12:	fc 01       	movw	r30, r24
    2e14:	e1 70       	andi	r30, 0x01	; 1
    2e16:	f0 70       	andi	r31, 0x00	; 0
    2e18:	30 97       	sbiw	r30, 0x00	; 0
    2e1a:	29 f0       	breq	.+10     	; 0x2e26 <__mulsf3+0x15e>
    2e1c:	56 95       	lsr	r21
    2e1e:	47 95       	ror	r20
    2e20:	37 95       	ror	r19
    2e22:	27 95       	ror	r18
    2e24:	50 68       	ori	r21, 0x80	; 128
    2e26:	b6 95       	lsr	r27
    2e28:	a7 95       	ror	r26
    2e2a:	97 95       	ror	r25
    2e2c:	87 95       	ror	r24
    2e2e:	6f 5f       	subi	r22, 0xFF	; 255
    2e30:	7f 4f       	sbci	r23, 0xFF	; 255
    2e32:	b7 fd       	sbrc	r27, 7
    2e34:	ee cf       	rjmp	.-36     	; 0x2e12 <__mulsf3+0x14a>
    2e36:	0c c0       	rjmp	.+24     	; 0x2e50 <__mulsf3+0x188>
    2e38:	88 0f       	add	r24, r24
    2e3a:	99 1f       	adc	r25, r25
    2e3c:	aa 1f       	adc	r26, r26
    2e3e:	bb 1f       	adc	r27, r27
    2e40:	57 fd       	sbrc	r21, 7
    2e42:	81 60       	ori	r24, 0x01	; 1
    2e44:	22 0f       	add	r18, r18
    2e46:	33 1f       	adc	r19, r19
    2e48:	44 1f       	adc	r20, r20
    2e4a:	55 1f       	adc	r21, r21
    2e4c:	61 50       	subi	r22, 0x01	; 1
    2e4e:	70 40       	sbci	r23, 0x00	; 0
    2e50:	80 30       	cpi	r24, 0x00	; 0
    2e52:	e0 e0       	ldi	r30, 0x00	; 0
    2e54:	9e 07       	cpc	r25, r30
    2e56:	e0 e0       	ldi	r30, 0x00	; 0
    2e58:	ae 07       	cpc	r26, r30
    2e5a:	e0 e4       	ldi	r30, 0x40	; 64
    2e5c:	be 07       	cpc	r27, r30
    2e5e:	60 f3       	brcs	.-40     	; 0x2e38 <__mulsf3+0x170>
    2e60:	6b 8f       	std	Y+27, r22	; 0x1b
    2e62:	7c 8f       	std	Y+28, r23	; 0x1c
    2e64:	6f e7       	ldi	r22, 0x7F	; 127
    2e66:	e6 2e       	mov	r14, r22
    2e68:	f1 2c       	mov	r15, r1
    2e6a:	01 2d       	mov	r16, r1
    2e6c:	11 2d       	mov	r17, r1
    2e6e:	e8 22       	and	r14, r24
    2e70:	f9 22       	and	r15, r25
    2e72:	0a 23       	and	r16, r26
    2e74:	1b 23       	and	r17, r27
    2e76:	60 e4       	ldi	r22, 0x40	; 64
    2e78:	e6 16       	cp	r14, r22
    2e7a:	f1 04       	cpc	r15, r1
    2e7c:	01 05       	cpc	r16, r1
    2e7e:	11 05       	cpc	r17, r1
    2e80:	61 f4       	brne	.+24     	; 0x2e9a <__mulsf3+0x1d2>
    2e82:	87 fd       	sbrc	r24, 7
    2e84:	0a c0       	rjmp	.+20     	; 0x2e9a <__mulsf3+0x1d2>
    2e86:	21 15       	cp	r18, r1
    2e88:	31 05       	cpc	r19, r1
    2e8a:	41 05       	cpc	r20, r1
    2e8c:	51 05       	cpc	r21, r1
    2e8e:	29 f0       	breq	.+10     	; 0x2e9a <__mulsf3+0x1d2>
    2e90:	80 5c       	subi	r24, 0xC0	; 192
    2e92:	9f 4f       	sbci	r25, 0xFF	; 255
    2e94:	af 4f       	sbci	r26, 0xFF	; 255
    2e96:	bf 4f       	sbci	r27, 0xFF	; 255
    2e98:	80 78       	andi	r24, 0x80	; 128
    2e9a:	8d 8f       	std	Y+29, r24	; 0x1d
    2e9c:	9e 8f       	std	Y+30, r25	; 0x1e
    2e9e:	af 8f       	std	Y+31, r26	; 0x1f
    2ea0:	b8 a3       	std	Y+32, r27	; 0x20
    2ea2:	83 e0       	ldi	r24, 0x03	; 3
    2ea4:	89 8f       	std	Y+25, r24	; 0x19
    2ea6:	ce 01       	movw	r24, r28
    2ea8:	49 96       	adiw	r24, 0x19	; 25
    2eaa:	02 c0       	rjmp	.+4      	; 0x2eb0 <__mulsf3+0x1e8>
    2eac:	82 e6       	ldi	r24, 0x62	; 98
    2eae:	91 e0       	ldi	r25, 0x01	; 1
    2eb0:	0e 94 ee 18 	call	0x31dc	; 0x31dc <__pack_f>
    2eb4:	a0 96       	adiw	r28, 0x20	; 32
    2eb6:	e2 e1       	ldi	r30, 0x12	; 18
    2eb8:	0c 94 c1 1a 	jmp	0x3582	; 0x3582 <__epilogue_restores__>

00002ebc <__divsf3>:
    2ebc:	a8 e1       	ldi	r26, 0x18	; 24
    2ebe:	b0 e0       	ldi	r27, 0x00	; 0
    2ec0:	e4 e6       	ldi	r30, 0x64	; 100
    2ec2:	f7 e1       	ldi	r31, 0x17	; 23
    2ec4:	0c 94 ad 1a 	jmp	0x355a	; 0x355a <__prologue_saves__+0x10>
    2ec8:	69 83       	std	Y+1, r22	; 0x01
    2eca:	7a 83       	std	Y+2, r23	; 0x02
    2ecc:	8b 83       	std	Y+3, r24	; 0x03
    2ece:	9c 83       	std	Y+4, r25	; 0x04
    2ed0:	2d 83       	std	Y+5, r18	; 0x05
    2ed2:	3e 83       	std	Y+6, r19	; 0x06
    2ed4:	4f 83       	std	Y+7, r20	; 0x07
    2ed6:	58 87       	std	Y+8, r21	; 0x08
    2ed8:	8e 01       	movw	r16, r28
    2eda:	07 5f       	subi	r16, 0xF7	; 247
    2edc:	1f 4f       	sbci	r17, 0xFF	; 255
    2ede:	ce 01       	movw	r24, r28
    2ee0:	01 96       	adiw	r24, 0x01	; 1
    2ee2:	b8 01       	movw	r22, r16
    2ee4:	0e 94 bc 19 	call	0x3378	; 0x3378 <__unpack_f>
    2ee8:	81 e1       	ldi	r24, 0x11	; 17
    2eea:	e8 2e       	mov	r14, r24
    2eec:	f1 2c       	mov	r15, r1
    2eee:	ec 0e       	add	r14, r28
    2ef0:	fd 1e       	adc	r15, r29
    2ef2:	ce 01       	movw	r24, r28
    2ef4:	05 96       	adiw	r24, 0x05	; 5
    2ef6:	b7 01       	movw	r22, r14
    2ef8:	0e 94 bc 19 	call	0x3378	; 0x3378 <__unpack_f>
    2efc:	99 85       	ldd	r25, Y+9	; 0x09
    2efe:	92 30       	cpi	r25, 0x02	; 2
    2f00:	08 f4       	brcc	.+2      	; 0x2f04 <__divsf3+0x48>
    2f02:	83 c0       	rjmp	.+262    	; 0x300a <__divsf3+0x14e>
    2f04:	89 89       	ldd	r24, Y+17	; 0x11
    2f06:	82 30       	cpi	r24, 0x02	; 2
    2f08:	08 f4       	brcc	.+2      	; 0x2f0c <__divsf3+0x50>
    2f0a:	7b c0       	rjmp	.+246    	; 0x3002 <__divsf3+0x146>
    2f0c:	2a 85       	ldd	r18, Y+10	; 0x0a
    2f0e:	3a 89       	ldd	r19, Y+18	; 0x12
    2f10:	23 27       	eor	r18, r19
    2f12:	2a 87       	std	Y+10, r18	; 0x0a
    2f14:	94 30       	cpi	r25, 0x04	; 4
    2f16:	11 f0       	breq	.+4      	; 0x2f1c <__divsf3+0x60>
    2f18:	92 30       	cpi	r25, 0x02	; 2
    2f1a:	21 f4       	brne	.+8      	; 0x2f24 <__divsf3+0x68>
    2f1c:	98 17       	cp	r25, r24
    2f1e:	09 f0       	breq	.+2      	; 0x2f22 <__divsf3+0x66>
    2f20:	6c c0       	rjmp	.+216    	; 0x2ffa <__divsf3+0x13e>
    2f22:	71 c0       	rjmp	.+226    	; 0x3006 <__divsf3+0x14a>
    2f24:	84 30       	cpi	r24, 0x04	; 4
    2f26:	39 f4       	brne	.+14     	; 0x2f36 <__divsf3+0x7a>
    2f28:	1d 86       	std	Y+13, r1	; 0x0d
    2f2a:	1e 86       	std	Y+14, r1	; 0x0e
    2f2c:	1f 86       	std	Y+15, r1	; 0x0f
    2f2e:	18 8a       	std	Y+16, r1	; 0x10
    2f30:	1c 86       	std	Y+12, r1	; 0x0c
    2f32:	1b 86       	std	Y+11, r1	; 0x0b
    2f34:	6a c0       	rjmp	.+212    	; 0x300a <__divsf3+0x14e>
    2f36:	82 30       	cpi	r24, 0x02	; 2
    2f38:	19 f4       	brne	.+6      	; 0x2f40 <__divsf3+0x84>
    2f3a:	84 e0       	ldi	r24, 0x04	; 4
    2f3c:	89 87       	std	Y+9, r24	; 0x09
    2f3e:	65 c0       	rjmp	.+202    	; 0x300a <__divsf3+0x14e>
    2f40:	8b 85       	ldd	r24, Y+11	; 0x0b
    2f42:	9c 85       	ldd	r25, Y+12	; 0x0c
    2f44:	2b 89       	ldd	r18, Y+19	; 0x13
    2f46:	3c 89       	ldd	r19, Y+20	; 0x14
    2f48:	82 1b       	sub	r24, r18
    2f4a:	93 0b       	sbc	r25, r19
    2f4c:	9c 87       	std	Y+12, r25	; 0x0c
    2f4e:	8b 87       	std	Y+11, r24	; 0x0b
    2f50:	2d 85       	ldd	r18, Y+13	; 0x0d
    2f52:	3e 85       	ldd	r19, Y+14	; 0x0e
    2f54:	4f 85       	ldd	r20, Y+15	; 0x0f
    2f56:	58 89       	ldd	r21, Y+16	; 0x10
    2f58:	ed 88       	ldd	r14, Y+21	; 0x15
    2f5a:	fe 88       	ldd	r15, Y+22	; 0x16
    2f5c:	0f 89       	ldd	r16, Y+23	; 0x17
    2f5e:	18 8d       	ldd	r17, Y+24	; 0x18
    2f60:	2e 15       	cp	r18, r14
    2f62:	3f 05       	cpc	r19, r15
    2f64:	40 07       	cpc	r20, r16
    2f66:	51 07       	cpc	r21, r17
    2f68:	38 f4       	brcc	.+14     	; 0x2f78 <__divsf3+0xbc>
    2f6a:	22 0f       	add	r18, r18
    2f6c:	33 1f       	adc	r19, r19
    2f6e:	44 1f       	adc	r20, r20
    2f70:	55 1f       	adc	r21, r21
    2f72:	01 97       	sbiw	r24, 0x01	; 1
    2f74:	9c 87       	std	Y+12, r25	; 0x0c
    2f76:	8b 87       	std	Y+11, r24	; 0x0b
    2f78:	6f e1       	ldi	r22, 0x1F	; 31
    2f7a:	70 e0       	ldi	r23, 0x00	; 0
    2f7c:	a1 2c       	mov	r10, r1
    2f7e:	b1 2c       	mov	r11, r1
    2f80:	c1 2c       	mov	r12, r1
    2f82:	a0 e4       	ldi	r26, 0x40	; 64
    2f84:	da 2e       	mov	r13, r26
    2f86:	80 e0       	ldi	r24, 0x00	; 0
    2f88:	90 e0       	ldi	r25, 0x00	; 0
    2f8a:	dc 01       	movw	r26, r24
    2f8c:	2e 15       	cp	r18, r14
    2f8e:	3f 05       	cpc	r19, r15
    2f90:	40 07       	cpc	r20, r16
    2f92:	51 07       	cpc	r21, r17
    2f94:	40 f0       	brcs	.+16     	; 0x2fa6 <__divsf3+0xea>
    2f96:	8a 29       	or	r24, r10
    2f98:	9b 29       	or	r25, r11
    2f9a:	ac 29       	or	r26, r12
    2f9c:	bd 29       	or	r27, r13
    2f9e:	2e 19       	sub	r18, r14
    2fa0:	3f 09       	sbc	r19, r15
    2fa2:	40 0b       	sbc	r20, r16
    2fa4:	51 0b       	sbc	r21, r17
    2fa6:	d6 94       	lsr	r13
    2fa8:	c7 94       	ror	r12
    2faa:	b7 94       	ror	r11
    2fac:	a7 94       	ror	r10
    2fae:	22 0f       	add	r18, r18
    2fb0:	33 1f       	adc	r19, r19
    2fb2:	44 1f       	adc	r20, r20
    2fb4:	55 1f       	adc	r21, r21
    2fb6:	61 50       	subi	r22, 0x01	; 1
    2fb8:	70 40       	sbci	r23, 0x00	; 0
    2fba:	41 f7       	brne	.-48     	; 0x2f8c <__divsf3+0xd0>
    2fbc:	6f e7       	ldi	r22, 0x7F	; 127
    2fbe:	e6 2e       	mov	r14, r22
    2fc0:	f1 2c       	mov	r15, r1
    2fc2:	01 2d       	mov	r16, r1
    2fc4:	11 2d       	mov	r17, r1
    2fc6:	e8 22       	and	r14, r24
    2fc8:	f9 22       	and	r15, r25
    2fca:	0a 23       	and	r16, r26
    2fcc:	1b 23       	and	r17, r27
    2fce:	60 e4       	ldi	r22, 0x40	; 64
    2fd0:	e6 16       	cp	r14, r22
    2fd2:	f1 04       	cpc	r15, r1
    2fd4:	01 05       	cpc	r16, r1
    2fd6:	11 05       	cpc	r17, r1
    2fd8:	61 f4       	brne	.+24     	; 0x2ff2 <__divsf3+0x136>
    2fda:	87 fd       	sbrc	r24, 7
    2fdc:	0a c0       	rjmp	.+20     	; 0x2ff2 <__divsf3+0x136>
    2fde:	21 15       	cp	r18, r1
    2fe0:	31 05       	cpc	r19, r1
    2fe2:	41 05       	cpc	r20, r1
    2fe4:	51 05       	cpc	r21, r1
    2fe6:	29 f0       	breq	.+10     	; 0x2ff2 <__divsf3+0x136>
    2fe8:	80 5c       	subi	r24, 0xC0	; 192
    2fea:	9f 4f       	sbci	r25, 0xFF	; 255
    2fec:	af 4f       	sbci	r26, 0xFF	; 255
    2fee:	bf 4f       	sbci	r27, 0xFF	; 255
    2ff0:	80 78       	andi	r24, 0x80	; 128
    2ff2:	8d 87       	std	Y+13, r24	; 0x0d
    2ff4:	9e 87       	std	Y+14, r25	; 0x0e
    2ff6:	af 87       	std	Y+15, r26	; 0x0f
    2ff8:	b8 8b       	std	Y+16, r27	; 0x10
    2ffa:	8e 01       	movw	r16, r28
    2ffc:	07 5f       	subi	r16, 0xF7	; 247
    2ffe:	1f 4f       	sbci	r17, 0xFF	; 255
    3000:	04 c0       	rjmp	.+8      	; 0x300a <__divsf3+0x14e>
    3002:	87 01       	movw	r16, r14
    3004:	02 c0       	rjmp	.+4      	; 0x300a <__divsf3+0x14e>
    3006:	02 e6       	ldi	r16, 0x62	; 98
    3008:	11 e0       	ldi	r17, 0x01	; 1
    300a:	c8 01       	movw	r24, r16
    300c:	0e 94 ee 18 	call	0x31dc	; 0x31dc <__pack_f>
    3010:	68 96       	adiw	r28, 0x18	; 24
    3012:	ea e0       	ldi	r30, 0x0A	; 10
    3014:	0c 94 c9 1a 	jmp	0x3592	; 0x3592 <__epilogue_restores__+0x10>

00003018 <__gtsf2>:
    3018:	a8 e1       	ldi	r26, 0x18	; 24
    301a:	b0 e0       	ldi	r27, 0x00	; 0
    301c:	e2 e1       	ldi	r30, 0x12	; 18
    301e:	f8 e1       	ldi	r31, 0x18	; 24
    3020:	0c 94 b1 1a 	jmp	0x3562	; 0x3562 <__prologue_saves__+0x18>
    3024:	69 83       	std	Y+1, r22	; 0x01
    3026:	7a 83       	std	Y+2, r23	; 0x02
    3028:	8b 83       	std	Y+3, r24	; 0x03
    302a:	9c 83       	std	Y+4, r25	; 0x04
    302c:	2d 83       	std	Y+5, r18	; 0x05
    302e:	3e 83       	std	Y+6, r19	; 0x06
    3030:	4f 83       	std	Y+7, r20	; 0x07
    3032:	58 87       	std	Y+8, r21	; 0x08
    3034:	8e 01       	movw	r16, r28
    3036:	07 5f       	subi	r16, 0xF7	; 247
    3038:	1f 4f       	sbci	r17, 0xFF	; 255
    303a:	ce 01       	movw	r24, r28
    303c:	01 96       	adiw	r24, 0x01	; 1
    303e:	b8 01       	movw	r22, r16
    3040:	0e 94 bc 19 	call	0x3378	; 0x3378 <__unpack_f>
    3044:	81 e1       	ldi	r24, 0x11	; 17
    3046:	e8 2e       	mov	r14, r24
    3048:	f1 2c       	mov	r15, r1
    304a:	ec 0e       	add	r14, r28
    304c:	fd 1e       	adc	r15, r29
    304e:	ce 01       	movw	r24, r28
    3050:	05 96       	adiw	r24, 0x05	; 5
    3052:	b7 01       	movw	r22, r14
    3054:	0e 94 bc 19 	call	0x3378	; 0x3378 <__unpack_f>
    3058:	89 85       	ldd	r24, Y+9	; 0x09
    305a:	82 30       	cpi	r24, 0x02	; 2
    305c:	40 f0       	brcs	.+16     	; 0x306e <__gtsf2+0x56>
    305e:	89 89       	ldd	r24, Y+17	; 0x11
    3060:	82 30       	cpi	r24, 0x02	; 2
    3062:	28 f0       	brcs	.+10     	; 0x306e <__gtsf2+0x56>
    3064:	c8 01       	movw	r24, r16
    3066:	b7 01       	movw	r22, r14
    3068:	0e 94 25 1a 	call	0x344a	; 0x344a <__fpcmp_parts_f>
    306c:	01 c0       	rjmp	.+2      	; 0x3070 <__gtsf2+0x58>
    306e:	8f ef       	ldi	r24, 0xFF	; 255
    3070:	68 96       	adiw	r28, 0x18	; 24
    3072:	e6 e0       	ldi	r30, 0x06	; 6
    3074:	0c 94 cd 1a 	jmp	0x359a	; 0x359a <__epilogue_restores__+0x18>

00003078 <__gesf2>:
    3078:	a8 e1       	ldi	r26, 0x18	; 24
    307a:	b0 e0       	ldi	r27, 0x00	; 0
    307c:	e2 e4       	ldi	r30, 0x42	; 66
    307e:	f8 e1       	ldi	r31, 0x18	; 24
    3080:	0c 94 b1 1a 	jmp	0x3562	; 0x3562 <__prologue_saves__+0x18>
    3084:	69 83       	std	Y+1, r22	; 0x01
    3086:	7a 83       	std	Y+2, r23	; 0x02
    3088:	8b 83       	std	Y+3, r24	; 0x03
    308a:	9c 83       	std	Y+4, r25	; 0x04
    308c:	2d 83       	std	Y+5, r18	; 0x05
    308e:	3e 83       	std	Y+6, r19	; 0x06
    3090:	4f 83       	std	Y+7, r20	; 0x07
    3092:	58 87       	std	Y+8, r21	; 0x08
    3094:	8e 01       	movw	r16, r28
    3096:	07 5f       	subi	r16, 0xF7	; 247
    3098:	1f 4f       	sbci	r17, 0xFF	; 255
    309a:	ce 01       	movw	r24, r28
    309c:	01 96       	adiw	r24, 0x01	; 1
    309e:	b8 01       	movw	r22, r16
    30a0:	0e 94 bc 19 	call	0x3378	; 0x3378 <__unpack_f>
    30a4:	81 e1       	ldi	r24, 0x11	; 17
    30a6:	e8 2e       	mov	r14, r24
    30a8:	f1 2c       	mov	r15, r1
    30aa:	ec 0e       	add	r14, r28
    30ac:	fd 1e       	adc	r15, r29
    30ae:	ce 01       	movw	r24, r28
    30b0:	05 96       	adiw	r24, 0x05	; 5
    30b2:	b7 01       	movw	r22, r14
    30b4:	0e 94 bc 19 	call	0x3378	; 0x3378 <__unpack_f>
    30b8:	89 85       	ldd	r24, Y+9	; 0x09
    30ba:	82 30       	cpi	r24, 0x02	; 2
    30bc:	40 f0       	brcs	.+16     	; 0x30ce <__gesf2+0x56>
    30be:	89 89       	ldd	r24, Y+17	; 0x11
    30c0:	82 30       	cpi	r24, 0x02	; 2
    30c2:	28 f0       	brcs	.+10     	; 0x30ce <__gesf2+0x56>
    30c4:	c8 01       	movw	r24, r16
    30c6:	b7 01       	movw	r22, r14
    30c8:	0e 94 25 1a 	call	0x344a	; 0x344a <__fpcmp_parts_f>
    30cc:	01 c0       	rjmp	.+2      	; 0x30d0 <__gesf2+0x58>
    30ce:	8f ef       	ldi	r24, 0xFF	; 255
    30d0:	68 96       	adiw	r28, 0x18	; 24
    30d2:	e6 e0       	ldi	r30, 0x06	; 6
    30d4:	0c 94 cd 1a 	jmp	0x359a	; 0x359a <__epilogue_restores__+0x18>

000030d8 <__ltsf2>:
    30d8:	a8 e1       	ldi	r26, 0x18	; 24
    30da:	b0 e0       	ldi	r27, 0x00	; 0
    30dc:	e2 e7       	ldi	r30, 0x72	; 114
    30de:	f8 e1       	ldi	r31, 0x18	; 24
    30e0:	0c 94 b1 1a 	jmp	0x3562	; 0x3562 <__prologue_saves__+0x18>
    30e4:	69 83       	std	Y+1, r22	; 0x01
    30e6:	7a 83       	std	Y+2, r23	; 0x02
    30e8:	8b 83       	std	Y+3, r24	; 0x03
    30ea:	9c 83       	std	Y+4, r25	; 0x04
    30ec:	2d 83       	std	Y+5, r18	; 0x05
    30ee:	3e 83       	std	Y+6, r19	; 0x06
    30f0:	4f 83       	std	Y+7, r20	; 0x07
    30f2:	58 87       	std	Y+8, r21	; 0x08
    30f4:	8e 01       	movw	r16, r28
    30f6:	07 5f       	subi	r16, 0xF7	; 247
    30f8:	1f 4f       	sbci	r17, 0xFF	; 255
    30fa:	ce 01       	movw	r24, r28
    30fc:	01 96       	adiw	r24, 0x01	; 1
    30fe:	b8 01       	movw	r22, r16
    3100:	0e 94 bc 19 	call	0x3378	; 0x3378 <__unpack_f>
    3104:	81 e1       	ldi	r24, 0x11	; 17
    3106:	e8 2e       	mov	r14, r24
    3108:	f1 2c       	mov	r15, r1
    310a:	ec 0e       	add	r14, r28
    310c:	fd 1e       	adc	r15, r29
    310e:	ce 01       	movw	r24, r28
    3110:	05 96       	adiw	r24, 0x05	; 5
    3112:	b7 01       	movw	r22, r14
    3114:	0e 94 bc 19 	call	0x3378	; 0x3378 <__unpack_f>
    3118:	89 85       	ldd	r24, Y+9	; 0x09
    311a:	82 30       	cpi	r24, 0x02	; 2
    311c:	40 f0       	brcs	.+16     	; 0x312e <__ltsf2+0x56>
    311e:	89 89       	ldd	r24, Y+17	; 0x11
    3120:	82 30       	cpi	r24, 0x02	; 2
    3122:	28 f0       	brcs	.+10     	; 0x312e <__ltsf2+0x56>
    3124:	c8 01       	movw	r24, r16
    3126:	b7 01       	movw	r22, r14
    3128:	0e 94 25 1a 	call	0x344a	; 0x344a <__fpcmp_parts_f>
    312c:	01 c0       	rjmp	.+2      	; 0x3130 <__ltsf2+0x58>
    312e:	81 e0       	ldi	r24, 0x01	; 1
    3130:	68 96       	adiw	r28, 0x18	; 24
    3132:	e6 e0       	ldi	r30, 0x06	; 6
    3134:	0c 94 cd 1a 	jmp	0x359a	; 0x359a <__epilogue_restores__+0x18>

00003138 <__fixsfsi>:
    3138:	ac e0       	ldi	r26, 0x0C	; 12
    313a:	b0 e0       	ldi	r27, 0x00	; 0
    313c:	e2 ea       	ldi	r30, 0xA2	; 162
    313e:	f8 e1       	ldi	r31, 0x18	; 24
    3140:	0c 94 b5 1a 	jmp	0x356a	; 0x356a <__prologue_saves__+0x20>
    3144:	69 83       	std	Y+1, r22	; 0x01
    3146:	7a 83       	std	Y+2, r23	; 0x02
    3148:	8b 83       	std	Y+3, r24	; 0x03
    314a:	9c 83       	std	Y+4, r25	; 0x04
    314c:	ce 01       	movw	r24, r28
    314e:	01 96       	adiw	r24, 0x01	; 1
    3150:	be 01       	movw	r22, r28
    3152:	6b 5f       	subi	r22, 0xFB	; 251
    3154:	7f 4f       	sbci	r23, 0xFF	; 255
    3156:	0e 94 bc 19 	call	0x3378	; 0x3378 <__unpack_f>
    315a:	8d 81       	ldd	r24, Y+5	; 0x05
    315c:	82 30       	cpi	r24, 0x02	; 2
    315e:	81 f1       	breq	.+96     	; 0x31c0 <__fixsfsi+0x88>
    3160:	82 30       	cpi	r24, 0x02	; 2
    3162:	70 f1       	brcs	.+92     	; 0x31c0 <__fixsfsi+0x88>
    3164:	84 30       	cpi	r24, 0x04	; 4
    3166:	21 f4       	brne	.+8      	; 0x3170 <__fixsfsi+0x38>
    3168:	8e 81       	ldd	r24, Y+6	; 0x06
    316a:	88 23       	and	r24, r24
    316c:	69 f1       	breq	.+90     	; 0x31c8 <__fixsfsi+0x90>
    316e:	0a c0       	rjmp	.+20     	; 0x3184 <__fixsfsi+0x4c>
    3170:	2f 81       	ldd	r18, Y+7	; 0x07
    3172:	38 85       	ldd	r19, Y+8	; 0x08
    3174:	37 fd       	sbrc	r19, 7
    3176:	24 c0       	rjmp	.+72     	; 0x31c0 <__fixsfsi+0x88>
    3178:	6e 81       	ldd	r22, Y+6	; 0x06
    317a:	2f 31       	cpi	r18, 0x1F	; 31
    317c:	31 05       	cpc	r19, r1
    317e:	3c f0       	brlt	.+14     	; 0x318e <__fixsfsi+0x56>
    3180:	66 23       	and	r22, r22
    3182:	11 f1       	breq	.+68     	; 0x31c8 <__fixsfsi+0x90>
    3184:	20 e0       	ldi	r18, 0x00	; 0
    3186:	30 e0       	ldi	r19, 0x00	; 0
    3188:	40 e0       	ldi	r20, 0x00	; 0
    318a:	50 e8       	ldi	r21, 0x80	; 128
    318c:	21 c0       	rjmp	.+66     	; 0x31d0 <__fixsfsi+0x98>
    318e:	8e e1       	ldi	r24, 0x1E	; 30
    3190:	90 e0       	ldi	r25, 0x00	; 0
    3192:	82 1b       	sub	r24, r18
    3194:	93 0b       	sbc	r25, r19
    3196:	29 85       	ldd	r18, Y+9	; 0x09
    3198:	3a 85       	ldd	r19, Y+10	; 0x0a
    319a:	4b 85       	ldd	r20, Y+11	; 0x0b
    319c:	5c 85       	ldd	r21, Y+12	; 0x0c
    319e:	04 c0       	rjmp	.+8      	; 0x31a8 <__fixsfsi+0x70>
    31a0:	56 95       	lsr	r21
    31a2:	47 95       	ror	r20
    31a4:	37 95       	ror	r19
    31a6:	27 95       	ror	r18
    31a8:	8a 95       	dec	r24
    31aa:	d2 f7       	brpl	.-12     	; 0x31a0 <__fixsfsi+0x68>
    31ac:	66 23       	and	r22, r22
    31ae:	81 f0       	breq	.+32     	; 0x31d0 <__fixsfsi+0x98>
    31b0:	50 95       	com	r21
    31b2:	40 95       	com	r20
    31b4:	30 95       	com	r19
    31b6:	21 95       	neg	r18
    31b8:	3f 4f       	sbci	r19, 0xFF	; 255
    31ba:	4f 4f       	sbci	r20, 0xFF	; 255
    31bc:	5f 4f       	sbci	r21, 0xFF	; 255
    31be:	08 c0       	rjmp	.+16     	; 0x31d0 <__fixsfsi+0x98>
    31c0:	20 e0       	ldi	r18, 0x00	; 0
    31c2:	30 e0       	ldi	r19, 0x00	; 0
    31c4:	a9 01       	movw	r20, r18
    31c6:	04 c0       	rjmp	.+8      	; 0x31d0 <__fixsfsi+0x98>
    31c8:	2f ef       	ldi	r18, 0xFF	; 255
    31ca:	3f ef       	ldi	r19, 0xFF	; 255
    31cc:	4f ef       	ldi	r20, 0xFF	; 255
    31ce:	5f e7       	ldi	r21, 0x7F	; 127
    31d0:	b9 01       	movw	r22, r18
    31d2:	ca 01       	movw	r24, r20
    31d4:	2c 96       	adiw	r28, 0x0c	; 12
    31d6:	e2 e0       	ldi	r30, 0x02	; 2
    31d8:	0c 94 d1 1a 	jmp	0x35a2	; 0x35a2 <__epilogue_restores__+0x20>

000031dc <__pack_f>:
    31dc:	ef 92       	push	r14
    31de:	ff 92       	push	r15
    31e0:	0f 93       	push	r16
    31e2:	1f 93       	push	r17
    31e4:	cf 93       	push	r28
    31e6:	df 93       	push	r29
    31e8:	fc 01       	movw	r30, r24
    31ea:	24 81       	ldd	r18, Z+4	; 0x04
    31ec:	35 81       	ldd	r19, Z+5	; 0x05
    31ee:	46 81       	ldd	r20, Z+6	; 0x06
    31f0:	57 81       	ldd	r21, Z+7	; 0x07
    31f2:	61 81       	ldd	r22, Z+1	; 0x01
    31f4:	80 81       	ld	r24, Z
    31f6:	82 30       	cpi	r24, 0x02	; 2
    31f8:	20 f4       	brcc	.+8      	; 0x3202 <__pack_f+0x26>
    31fa:	40 61       	ori	r20, 0x10	; 16
    31fc:	ef ef       	ldi	r30, 0xFF	; 255
    31fe:	f0 e0       	ldi	r31, 0x00	; 0
    3200:	a3 c0       	rjmp	.+326    	; 0x3348 <__pack_f+0x16c>
    3202:	84 30       	cpi	r24, 0x04	; 4
    3204:	09 f4       	brne	.+2      	; 0x3208 <__pack_f+0x2c>
    3206:	9b c0       	rjmp	.+310    	; 0x333e <__pack_f+0x162>
    3208:	82 30       	cpi	r24, 0x02	; 2
    320a:	09 f4       	brne	.+2      	; 0x320e <__pack_f+0x32>
    320c:	92 c0       	rjmp	.+292    	; 0x3332 <__pack_f+0x156>
    320e:	21 15       	cp	r18, r1
    3210:	31 05       	cpc	r19, r1
    3212:	41 05       	cpc	r20, r1
    3214:	51 05       	cpc	r21, r1
    3216:	09 f4       	brne	.+2      	; 0x321a <__pack_f+0x3e>
    3218:	8f c0       	rjmp	.+286    	; 0x3338 <__pack_f+0x15c>
    321a:	02 80       	ldd	r0, Z+2	; 0x02
    321c:	f3 81       	ldd	r31, Z+3	; 0x03
    321e:	e0 2d       	mov	r30, r0
    3220:	8f ef       	ldi	r24, 0xFF	; 255
    3222:	e2 38       	cpi	r30, 0x82	; 130
    3224:	f8 07       	cpc	r31, r24
    3226:	0c f0       	brlt	.+2      	; 0x322a <__pack_f+0x4e>
    3228:	5a c0       	rjmp	.+180    	; 0x32de <__pack_f+0x102>
    322a:	c2 e8       	ldi	r28, 0x82	; 130
    322c:	df ef       	ldi	r29, 0xFF	; 255
    322e:	ce 1b       	sub	r28, r30
    3230:	df 0b       	sbc	r29, r31
    3232:	ca 31       	cpi	r28, 0x1A	; 26
    3234:	d1 05       	cpc	r29, r1
    3236:	6c f5       	brge	.+90     	; 0x3292 <__pack_f+0xb6>
    3238:	79 01       	movw	r14, r18
    323a:	8a 01       	movw	r16, r20
    323c:	0c 2e       	mov	r0, r28
    323e:	04 c0       	rjmp	.+8      	; 0x3248 <__pack_f+0x6c>
    3240:	16 95       	lsr	r17
    3242:	07 95       	ror	r16
    3244:	f7 94       	ror	r15
    3246:	e7 94       	ror	r14
    3248:	0a 94       	dec	r0
    324a:	d2 f7       	brpl	.-12     	; 0x3240 <__pack_f+0x64>
    324c:	81 e0       	ldi	r24, 0x01	; 1
    324e:	90 e0       	ldi	r25, 0x00	; 0
    3250:	a0 e0       	ldi	r26, 0x00	; 0
    3252:	b0 e0       	ldi	r27, 0x00	; 0
    3254:	0c 2e       	mov	r0, r28
    3256:	04 c0       	rjmp	.+8      	; 0x3260 <__pack_f+0x84>
    3258:	88 0f       	add	r24, r24
    325a:	99 1f       	adc	r25, r25
    325c:	aa 1f       	adc	r26, r26
    325e:	bb 1f       	adc	r27, r27
    3260:	0a 94       	dec	r0
    3262:	d2 f7       	brpl	.-12     	; 0x3258 <__pack_f+0x7c>
    3264:	01 97       	sbiw	r24, 0x01	; 1
    3266:	a1 09       	sbc	r26, r1
    3268:	b1 09       	sbc	r27, r1
    326a:	82 23       	and	r24, r18
    326c:	93 23       	and	r25, r19
    326e:	a4 23       	and	r26, r20
    3270:	b5 23       	and	r27, r21
    3272:	21 e0       	ldi	r18, 0x01	; 1
    3274:	30 e0       	ldi	r19, 0x00	; 0
    3276:	40 e0       	ldi	r20, 0x00	; 0
    3278:	50 e0       	ldi	r21, 0x00	; 0
    327a:	00 97       	sbiw	r24, 0x00	; 0
    327c:	a1 05       	cpc	r26, r1
    327e:	b1 05       	cpc	r27, r1
    3280:	19 f4       	brne	.+6      	; 0x3288 <__pack_f+0xac>
    3282:	20 e0       	ldi	r18, 0x00	; 0
    3284:	30 e0       	ldi	r19, 0x00	; 0
    3286:	a9 01       	movw	r20, r18
    3288:	2e 29       	or	r18, r14
    328a:	3f 29       	or	r19, r15
    328c:	40 2b       	or	r20, r16
    328e:	51 2b       	or	r21, r17
    3290:	03 c0       	rjmp	.+6      	; 0x3298 <__pack_f+0xbc>
    3292:	20 e0       	ldi	r18, 0x00	; 0
    3294:	30 e0       	ldi	r19, 0x00	; 0
    3296:	a9 01       	movw	r20, r18
    3298:	da 01       	movw	r26, r20
    329a:	c9 01       	movw	r24, r18
    329c:	8f 77       	andi	r24, 0x7F	; 127
    329e:	90 70       	andi	r25, 0x00	; 0
    32a0:	a0 70       	andi	r26, 0x00	; 0
    32a2:	b0 70       	andi	r27, 0x00	; 0
    32a4:	80 34       	cpi	r24, 0x40	; 64
    32a6:	91 05       	cpc	r25, r1
    32a8:	a1 05       	cpc	r26, r1
    32aa:	b1 05       	cpc	r27, r1
    32ac:	39 f4       	brne	.+14     	; 0x32bc <__pack_f+0xe0>
    32ae:	27 ff       	sbrs	r18, 7
    32b0:	09 c0       	rjmp	.+18     	; 0x32c4 <__pack_f+0xe8>
    32b2:	20 5c       	subi	r18, 0xC0	; 192
    32b4:	3f 4f       	sbci	r19, 0xFF	; 255
    32b6:	4f 4f       	sbci	r20, 0xFF	; 255
    32b8:	5f 4f       	sbci	r21, 0xFF	; 255
    32ba:	04 c0       	rjmp	.+8      	; 0x32c4 <__pack_f+0xe8>
    32bc:	21 5c       	subi	r18, 0xC1	; 193
    32be:	3f 4f       	sbci	r19, 0xFF	; 255
    32c0:	4f 4f       	sbci	r20, 0xFF	; 255
    32c2:	5f 4f       	sbci	r21, 0xFF	; 255
    32c4:	e1 e0       	ldi	r30, 0x01	; 1
    32c6:	f0 e0       	ldi	r31, 0x00	; 0
    32c8:	20 30       	cpi	r18, 0x00	; 0
    32ca:	80 e0       	ldi	r24, 0x00	; 0
    32cc:	38 07       	cpc	r19, r24
    32ce:	80 e0       	ldi	r24, 0x00	; 0
    32d0:	48 07       	cpc	r20, r24
    32d2:	80 e4       	ldi	r24, 0x40	; 64
    32d4:	58 07       	cpc	r21, r24
    32d6:	28 f5       	brcc	.+74     	; 0x3322 <__pack_f+0x146>
    32d8:	e0 e0       	ldi	r30, 0x00	; 0
    32da:	f0 e0       	ldi	r31, 0x00	; 0
    32dc:	22 c0       	rjmp	.+68     	; 0x3322 <__pack_f+0x146>
    32de:	e0 38       	cpi	r30, 0x80	; 128
    32e0:	f1 05       	cpc	r31, r1
    32e2:	6c f5       	brge	.+90     	; 0x333e <__pack_f+0x162>
    32e4:	e1 58       	subi	r30, 0x81	; 129
    32e6:	ff 4f       	sbci	r31, 0xFF	; 255
    32e8:	da 01       	movw	r26, r20
    32ea:	c9 01       	movw	r24, r18
    32ec:	8f 77       	andi	r24, 0x7F	; 127
    32ee:	90 70       	andi	r25, 0x00	; 0
    32f0:	a0 70       	andi	r26, 0x00	; 0
    32f2:	b0 70       	andi	r27, 0x00	; 0
    32f4:	80 34       	cpi	r24, 0x40	; 64
    32f6:	91 05       	cpc	r25, r1
    32f8:	a1 05       	cpc	r26, r1
    32fa:	b1 05       	cpc	r27, r1
    32fc:	39 f4       	brne	.+14     	; 0x330c <__pack_f+0x130>
    32fe:	27 ff       	sbrs	r18, 7
    3300:	09 c0       	rjmp	.+18     	; 0x3314 <__pack_f+0x138>
    3302:	20 5c       	subi	r18, 0xC0	; 192
    3304:	3f 4f       	sbci	r19, 0xFF	; 255
    3306:	4f 4f       	sbci	r20, 0xFF	; 255
    3308:	5f 4f       	sbci	r21, 0xFF	; 255
    330a:	04 c0       	rjmp	.+8      	; 0x3314 <__pack_f+0x138>
    330c:	21 5c       	subi	r18, 0xC1	; 193
    330e:	3f 4f       	sbci	r19, 0xFF	; 255
    3310:	4f 4f       	sbci	r20, 0xFF	; 255
    3312:	5f 4f       	sbci	r21, 0xFF	; 255
    3314:	57 ff       	sbrs	r21, 7
    3316:	05 c0       	rjmp	.+10     	; 0x3322 <__pack_f+0x146>
    3318:	56 95       	lsr	r21
    331a:	47 95       	ror	r20
    331c:	37 95       	ror	r19
    331e:	27 95       	ror	r18
    3320:	31 96       	adiw	r30, 0x01	; 1
    3322:	87 e0       	ldi	r24, 0x07	; 7
    3324:	56 95       	lsr	r21
    3326:	47 95       	ror	r20
    3328:	37 95       	ror	r19
    332a:	27 95       	ror	r18
    332c:	8a 95       	dec	r24
    332e:	d1 f7       	brne	.-12     	; 0x3324 <__pack_f+0x148>
    3330:	0b c0       	rjmp	.+22     	; 0x3348 <__pack_f+0x16c>
    3332:	e0 e0       	ldi	r30, 0x00	; 0
    3334:	f0 e0       	ldi	r31, 0x00	; 0
    3336:	05 c0       	rjmp	.+10     	; 0x3342 <__pack_f+0x166>
    3338:	e0 e0       	ldi	r30, 0x00	; 0
    333a:	f0 e0       	ldi	r31, 0x00	; 0
    333c:	05 c0       	rjmp	.+10     	; 0x3348 <__pack_f+0x16c>
    333e:	ef ef       	ldi	r30, 0xFF	; 255
    3340:	f0 e0       	ldi	r31, 0x00	; 0
    3342:	20 e0       	ldi	r18, 0x00	; 0
    3344:	30 e0       	ldi	r19, 0x00	; 0
    3346:	a9 01       	movw	r20, r18
    3348:	8e 2f       	mov	r24, r30
    334a:	87 95       	ror	r24
    334c:	88 27       	eor	r24, r24
    334e:	87 95       	ror	r24
    3350:	94 2f       	mov	r25, r20
    3352:	9f 77       	andi	r25, 0x7F	; 127
    3354:	67 95       	ror	r22
    3356:	66 27       	eor	r22, r22
    3358:	67 95       	ror	r22
    335a:	e6 95       	lsr	r30
    335c:	e2 2e       	mov	r14, r18
    335e:	a9 2f       	mov	r26, r25
    3360:	a8 2b       	or	r26, r24
    3362:	fe 2f       	mov	r31, r30
    3364:	f6 2b       	or	r31, r22
    3366:	62 2f       	mov	r22, r18
    3368:	73 2f       	mov	r23, r19
    336a:	8a 2f       	mov	r24, r26
    336c:	9f 2f       	mov	r25, r31
    336e:	cd b7       	in	r28, 0x3d	; 61
    3370:	de b7       	in	r29, 0x3e	; 62
    3372:	e6 e0       	ldi	r30, 0x06	; 6
    3374:	0c 94 cd 1a 	jmp	0x359a	; 0x359a <__epilogue_restores__+0x18>

00003378 <__unpack_f>:
    3378:	dc 01       	movw	r26, r24
    337a:	fb 01       	movw	r30, r22
    337c:	2c 91       	ld	r18, X
    337e:	11 96       	adiw	r26, 0x01	; 1
    3380:	3c 91       	ld	r19, X
    3382:	11 97       	sbiw	r26, 0x01	; 1
    3384:	12 96       	adiw	r26, 0x02	; 2
    3386:	8c 91       	ld	r24, X
    3388:	12 97       	sbiw	r26, 0x02	; 2
    338a:	48 2f       	mov	r20, r24
    338c:	4f 77       	andi	r20, 0x7F	; 127
    338e:	50 e0       	ldi	r21, 0x00	; 0
    3390:	98 2f       	mov	r25, r24
    3392:	99 1f       	adc	r25, r25
    3394:	99 27       	eor	r25, r25
    3396:	99 1f       	adc	r25, r25
    3398:	13 96       	adiw	r26, 0x03	; 3
    339a:	6c 91       	ld	r22, X
    339c:	13 97       	sbiw	r26, 0x03	; 3
    339e:	86 2f       	mov	r24, r22
    33a0:	88 0f       	add	r24, r24
    33a2:	89 2b       	or	r24, r25
    33a4:	90 e0       	ldi	r25, 0x00	; 0
    33a6:	66 1f       	adc	r22, r22
    33a8:	66 27       	eor	r22, r22
    33aa:	66 1f       	adc	r22, r22
    33ac:	61 83       	std	Z+1, r22	; 0x01
    33ae:	00 97       	sbiw	r24, 0x00	; 0
    33b0:	39 f5       	brne	.+78     	; 0x3400 <__unpack_f+0x88>
    33b2:	21 15       	cp	r18, r1
    33b4:	31 05       	cpc	r19, r1
    33b6:	41 05       	cpc	r20, r1
    33b8:	51 05       	cpc	r21, r1
    33ba:	11 f4       	brne	.+4      	; 0x33c0 <__unpack_f+0x48>
    33bc:	82 e0       	ldi	r24, 0x02	; 2
    33be:	29 c0       	rjmp	.+82     	; 0x3412 <__unpack_f+0x9a>
    33c0:	82 e8       	ldi	r24, 0x82	; 130
    33c2:	9f ef       	ldi	r25, 0xFF	; 255
    33c4:	93 83       	std	Z+3, r25	; 0x03
    33c6:	82 83       	std	Z+2, r24	; 0x02
    33c8:	67 e0       	ldi	r22, 0x07	; 7
    33ca:	22 0f       	add	r18, r18
    33cc:	33 1f       	adc	r19, r19
    33ce:	44 1f       	adc	r20, r20
    33d0:	55 1f       	adc	r21, r21
    33d2:	6a 95       	dec	r22
    33d4:	d1 f7       	brne	.-12     	; 0x33ca <__unpack_f+0x52>
    33d6:	83 e0       	ldi	r24, 0x03	; 3
    33d8:	80 83       	st	Z, r24
    33da:	09 c0       	rjmp	.+18     	; 0x33ee <__unpack_f+0x76>
    33dc:	22 0f       	add	r18, r18
    33de:	33 1f       	adc	r19, r19
    33e0:	44 1f       	adc	r20, r20
    33e2:	55 1f       	adc	r21, r21
    33e4:	82 81       	ldd	r24, Z+2	; 0x02
    33e6:	93 81       	ldd	r25, Z+3	; 0x03
    33e8:	01 97       	sbiw	r24, 0x01	; 1
    33ea:	93 83       	std	Z+3, r25	; 0x03
    33ec:	82 83       	std	Z+2, r24	; 0x02
    33ee:	20 30       	cpi	r18, 0x00	; 0
    33f0:	80 e0       	ldi	r24, 0x00	; 0
    33f2:	38 07       	cpc	r19, r24
    33f4:	80 e0       	ldi	r24, 0x00	; 0
    33f6:	48 07       	cpc	r20, r24
    33f8:	80 e4       	ldi	r24, 0x40	; 64
    33fa:	58 07       	cpc	r21, r24
    33fc:	78 f3       	brcs	.-34     	; 0x33dc <__unpack_f+0x64>
    33fe:	20 c0       	rjmp	.+64     	; 0x3440 <__unpack_f+0xc8>
    3400:	8f 3f       	cpi	r24, 0xFF	; 255
    3402:	91 05       	cpc	r25, r1
    3404:	79 f4       	brne	.+30     	; 0x3424 <__unpack_f+0xac>
    3406:	21 15       	cp	r18, r1
    3408:	31 05       	cpc	r19, r1
    340a:	41 05       	cpc	r20, r1
    340c:	51 05       	cpc	r21, r1
    340e:	19 f4       	brne	.+6      	; 0x3416 <__unpack_f+0x9e>
    3410:	84 e0       	ldi	r24, 0x04	; 4
    3412:	80 83       	st	Z, r24
    3414:	08 95       	ret
    3416:	44 ff       	sbrs	r20, 4
    3418:	03 c0       	rjmp	.+6      	; 0x3420 <__unpack_f+0xa8>
    341a:	81 e0       	ldi	r24, 0x01	; 1
    341c:	80 83       	st	Z, r24
    341e:	10 c0       	rjmp	.+32     	; 0x3440 <__unpack_f+0xc8>
    3420:	10 82       	st	Z, r1
    3422:	0e c0       	rjmp	.+28     	; 0x3440 <__unpack_f+0xc8>
    3424:	8f 57       	subi	r24, 0x7F	; 127
    3426:	90 40       	sbci	r25, 0x00	; 0
    3428:	93 83       	std	Z+3, r25	; 0x03
    342a:	82 83       	std	Z+2, r24	; 0x02
    342c:	83 e0       	ldi	r24, 0x03	; 3
    342e:	80 83       	st	Z, r24
    3430:	87 e0       	ldi	r24, 0x07	; 7
    3432:	22 0f       	add	r18, r18
    3434:	33 1f       	adc	r19, r19
    3436:	44 1f       	adc	r20, r20
    3438:	55 1f       	adc	r21, r21
    343a:	8a 95       	dec	r24
    343c:	d1 f7       	brne	.-12     	; 0x3432 <__unpack_f+0xba>
    343e:	50 64       	ori	r21, 0x40	; 64
    3440:	24 83       	std	Z+4, r18	; 0x04
    3442:	35 83       	std	Z+5, r19	; 0x05
    3444:	46 83       	std	Z+6, r20	; 0x06
    3446:	57 83       	std	Z+7, r21	; 0x07
    3448:	08 95       	ret

0000344a <__fpcmp_parts_f>:
    344a:	fc 01       	movw	r30, r24
    344c:	db 01       	movw	r26, r22
    344e:	90 81       	ld	r25, Z
    3450:	92 30       	cpi	r25, 0x02	; 2
    3452:	08 f4       	brcc	.+2      	; 0x3456 <__fpcmp_parts_f+0xc>
    3454:	49 c0       	rjmp	.+146    	; 0x34e8 <__fpcmp_parts_f+0x9e>
    3456:	8c 91       	ld	r24, X
    3458:	82 30       	cpi	r24, 0x02	; 2
    345a:	08 f4       	brcc	.+2      	; 0x345e <__fpcmp_parts_f+0x14>
    345c:	45 c0       	rjmp	.+138    	; 0x34e8 <__fpcmp_parts_f+0x9e>
    345e:	94 30       	cpi	r25, 0x04	; 4
    3460:	51 f4       	brne	.+20     	; 0x3476 <__fpcmp_parts_f+0x2c>
    3462:	61 81       	ldd	r22, Z+1	; 0x01
    3464:	84 30       	cpi	r24, 0x04	; 4
    3466:	b1 f5       	brne	.+108    	; 0x34d4 <__fpcmp_parts_f+0x8a>
    3468:	11 96       	adiw	r26, 0x01	; 1
    346a:	2c 91       	ld	r18, X
    346c:	11 97       	sbiw	r26, 0x01	; 1
    346e:	30 e0       	ldi	r19, 0x00	; 0
    3470:	26 1b       	sub	r18, r22
    3472:	31 09       	sbc	r19, r1
    3474:	41 c0       	rjmp	.+130    	; 0x34f8 <__fpcmp_parts_f+0xae>
    3476:	84 30       	cpi	r24, 0x04	; 4
    3478:	21 f0       	breq	.+8      	; 0x3482 <__fpcmp_parts_f+0x38>
    347a:	92 30       	cpi	r25, 0x02	; 2
    347c:	41 f4       	brne	.+16     	; 0x348e <__fpcmp_parts_f+0x44>
    347e:	82 30       	cpi	r24, 0x02	; 2
    3480:	b1 f1       	breq	.+108    	; 0x34ee <__fpcmp_parts_f+0xa4>
    3482:	11 96       	adiw	r26, 0x01	; 1
    3484:	8c 91       	ld	r24, X
    3486:	11 97       	sbiw	r26, 0x01	; 1
    3488:	88 23       	and	r24, r24
    348a:	a1 f1       	breq	.+104    	; 0x34f4 <__fpcmp_parts_f+0xaa>
    348c:	2d c0       	rjmp	.+90     	; 0x34e8 <__fpcmp_parts_f+0x9e>
    348e:	61 81       	ldd	r22, Z+1	; 0x01
    3490:	82 30       	cpi	r24, 0x02	; 2
    3492:	01 f1       	breq	.+64     	; 0x34d4 <__fpcmp_parts_f+0x8a>
    3494:	11 96       	adiw	r26, 0x01	; 1
    3496:	8c 91       	ld	r24, X
    3498:	11 97       	sbiw	r26, 0x01	; 1
    349a:	68 17       	cp	r22, r24
    349c:	d9 f4       	brne	.+54     	; 0x34d4 <__fpcmp_parts_f+0x8a>
    349e:	22 81       	ldd	r18, Z+2	; 0x02
    34a0:	33 81       	ldd	r19, Z+3	; 0x03
    34a2:	12 96       	adiw	r26, 0x02	; 2
    34a4:	8d 91       	ld	r24, X+
    34a6:	9c 91       	ld	r25, X
    34a8:	13 97       	sbiw	r26, 0x03	; 3
    34aa:	82 17       	cp	r24, r18
    34ac:	93 07       	cpc	r25, r19
    34ae:	94 f0       	brlt	.+36     	; 0x34d4 <__fpcmp_parts_f+0x8a>
    34b0:	28 17       	cp	r18, r24
    34b2:	39 07       	cpc	r19, r25
    34b4:	bc f0       	brlt	.+46     	; 0x34e4 <__fpcmp_parts_f+0x9a>
    34b6:	24 81       	ldd	r18, Z+4	; 0x04
    34b8:	35 81       	ldd	r19, Z+5	; 0x05
    34ba:	46 81       	ldd	r20, Z+6	; 0x06
    34bc:	57 81       	ldd	r21, Z+7	; 0x07
    34be:	14 96       	adiw	r26, 0x04	; 4
    34c0:	8d 91       	ld	r24, X+
    34c2:	9d 91       	ld	r25, X+
    34c4:	0d 90       	ld	r0, X+
    34c6:	bc 91       	ld	r27, X
    34c8:	a0 2d       	mov	r26, r0
    34ca:	82 17       	cp	r24, r18
    34cc:	93 07       	cpc	r25, r19
    34ce:	a4 07       	cpc	r26, r20
    34d0:	b5 07       	cpc	r27, r21
    34d2:	18 f4       	brcc	.+6      	; 0x34da <__fpcmp_parts_f+0x90>
    34d4:	66 23       	and	r22, r22
    34d6:	41 f0       	breq	.+16     	; 0x34e8 <__fpcmp_parts_f+0x9e>
    34d8:	0d c0       	rjmp	.+26     	; 0x34f4 <__fpcmp_parts_f+0xaa>
    34da:	28 17       	cp	r18, r24
    34dc:	39 07       	cpc	r19, r25
    34de:	4a 07       	cpc	r20, r26
    34e0:	5b 07       	cpc	r21, r27
    34e2:	28 f4       	brcc	.+10     	; 0x34ee <__fpcmp_parts_f+0xa4>
    34e4:	66 23       	and	r22, r22
    34e6:	31 f0       	breq	.+12     	; 0x34f4 <__fpcmp_parts_f+0xaa>
    34e8:	21 e0       	ldi	r18, 0x01	; 1
    34ea:	30 e0       	ldi	r19, 0x00	; 0
    34ec:	05 c0       	rjmp	.+10     	; 0x34f8 <__fpcmp_parts_f+0xae>
    34ee:	20 e0       	ldi	r18, 0x00	; 0
    34f0:	30 e0       	ldi	r19, 0x00	; 0
    34f2:	02 c0       	rjmp	.+4      	; 0x34f8 <__fpcmp_parts_f+0xae>
    34f4:	2f ef       	ldi	r18, 0xFF	; 255
    34f6:	3f ef       	ldi	r19, 0xFF	; 255
    34f8:	c9 01       	movw	r24, r18
    34fa:	08 95       	ret

000034fc <__divmodhi4>:
    34fc:	97 fb       	bst	r25, 7
    34fe:	09 2e       	mov	r0, r25
    3500:	07 26       	eor	r0, r23
    3502:	0a d0       	rcall	.+20     	; 0x3518 <__divmodhi4_neg1>
    3504:	77 fd       	sbrc	r23, 7
    3506:	04 d0       	rcall	.+8      	; 0x3510 <__divmodhi4_neg2>
    3508:	0c d0       	rcall	.+24     	; 0x3522 <__udivmodhi4>
    350a:	06 d0       	rcall	.+12     	; 0x3518 <__divmodhi4_neg1>
    350c:	00 20       	and	r0, r0
    350e:	1a f4       	brpl	.+6      	; 0x3516 <__divmodhi4_exit>

00003510 <__divmodhi4_neg2>:
    3510:	70 95       	com	r23
    3512:	61 95       	neg	r22
    3514:	7f 4f       	sbci	r23, 0xFF	; 255

00003516 <__divmodhi4_exit>:
    3516:	08 95       	ret

00003518 <__divmodhi4_neg1>:
    3518:	f6 f7       	brtc	.-4      	; 0x3516 <__divmodhi4_exit>
    351a:	90 95       	com	r25
    351c:	81 95       	neg	r24
    351e:	9f 4f       	sbci	r25, 0xFF	; 255
    3520:	08 95       	ret

00003522 <__udivmodhi4>:
    3522:	aa 1b       	sub	r26, r26
    3524:	bb 1b       	sub	r27, r27
    3526:	51 e1       	ldi	r21, 0x11	; 17
    3528:	07 c0       	rjmp	.+14     	; 0x3538 <__udivmodhi4_ep>

0000352a <__udivmodhi4_loop>:
    352a:	aa 1f       	adc	r26, r26
    352c:	bb 1f       	adc	r27, r27
    352e:	a6 17       	cp	r26, r22
    3530:	b7 07       	cpc	r27, r23
    3532:	10 f0       	brcs	.+4      	; 0x3538 <__udivmodhi4_ep>
    3534:	a6 1b       	sub	r26, r22
    3536:	b7 0b       	sbc	r27, r23

00003538 <__udivmodhi4_ep>:
    3538:	88 1f       	adc	r24, r24
    353a:	99 1f       	adc	r25, r25
    353c:	5a 95       	dec	r21
    353e:	a9 f7       	brne	.-22     	; 0x352a <__udivmodhi4_loop>
    3540:	80 95       	com	r24
    3542:	90 95       	com	r25
    3544:	bc 01       	movw	r22, r24
    3546:	cd 01       	movw	r24, r26
    3548:	08 95       	ret

0000354a <__prologue_saves__>:
    354a:	2f 92       	push	r2
    354c:	3f 92       	push	r3
    354e:	4f 92       	push	r4
    3550:	5f 92       	push	r5
    3552:	6f 92       	push	r6
    3554:	7f 92       	push	r7
    3556:	8f 92       	push	r8
    3558:	9f 92       	push	r9
    355a:	af 92       	push	r10
    355c:	bf 92       	push	r11
    355e:	cf 92       	push	r12
    3560:	df 92       	push	r13
    3562:	ef 92       	push	r14
    3564:	ff 92       	push	r15
    3566:	0f 93       	push	r16
    3568:	1f 93       	push	r17
    356a:	cf 93       	push	r28
    356c:	df 93       	push	r29
    356e:	cd b7       	in	r28, 0x3d	; 61
    3570:	de b7       	in	r29, 0x3e	; 62
    3572:	ca 1b       	sub	r28, r26
    3574:	db 0b       	sbc	r29, r27
    3576:	0f b6       	in	r0, 0x3f	; 63
    3578:	f8 94       	cli
    357a:	de bf       	out	0x3e, r29	; 62
    357c:	0f be       	out	0x3f, r0	; 63
    357e:	cd bf       	out	0x3d, r28	; 61
    3580:	09 94       	ijmp

00003582 <__epilogue_restores__>:
    3582:	2a 88       	ldd	r2, Y+18	; 0x12
    3584:	39 88       	ldd	r3, Y+17	; 0x11
    3586:	48 88       	ldd	r4, Y+16	; 0x10
    3588:	5f 84       	ldd	r5, Y+15	; 0x0f
    358a:	6e 84       	ldd	r6, Y+14	; 0x0e
    358c:	7d 84       	ldd	r7, Y+13	; 0x0d
    358e:	8c 84       	ldd	r8, Y+12	; 0x0c
    3590:	9b 84       	ldd	r9, Y+11	; 0x0b
    3592:	aa 84       	ldd	r10, Y+10	; 0x0a
    3594:	b9 84       	ldd	r11, Y+9	; 0x09
    3596:	c8 84       	ldd	r12, Y+8	; 0x08
    3598:	df 80       	ldd	r13, Y+7	; 0x07
    359a:	ee 80       	ldd	r14, Y+6	; 0x06
    359c:	fd 80       	ldd	r15, Y+5	; 0x05
    359e:	0c 81       	ldd	r16, Y+4	; 0x04
    35a0:	1b 81       	ldd	r17, Y+3	; 0x03
    35a2:	aa 81       	ldd	r26, Y+2	; 0x02
    35a4:	b9 81       	ldd	r27, Y+1	; 0x01
    35a6:	ce 0f       	add	r28, r30
    35a8:	d1 1d       	adc	r29, r1
    35aa:	0f b6       	in	r0, 0x3f	; 63
    35ac:	f8 94       	cli
    35ae:	de bf       	out	0x3e, r29	; 62
    35b0:	0f be       	out	0x3f, r0	; 63
    35b2:	cd bf       	out	0x3d, r28	; 61
    35b4:	ed 01       	movw	r28, r26
    35b6:	08 95       	ret

000035b8 <_exit>:
    35b8:	f8 94       	cli

000035ba <__stop_program>:
    35ba:	ff cf       	rjmp	.-2      	; 0x35ba <__stop_program>
